/** 
 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
 */
package org.emoflon.neo.api;

import org.emoflon.neo.neo4j.adapter.NeoCoreBuilder;
import org.emoflon.neo.neo4j.adapter.NeoMatch;
import org.emoflon.neo.neo4j.adapter.NeoCoMatch;
import org.emoflon.neo.emsl.eMSL.EMSL_Spec;
import org.emoflon.neo.emsl.eMSL.Model;
import org.emoflon.neo.emsl.eMSL.Metamodel;
import org.emoflon.neo.emsl.util.EMSLUtil;
import org.emoflon.neo.engine.api.rules.IPattern;
import org.emoflon.neo.engine.api.rules.IRule;
import org.emoflon.neo.neo4j.adapter.NeoRule;
import org.emoflon.neo.neo4j.adapter.NeoRuleAccess;
import org.emoflon.neo.neo4j.adapter.patterns.NeoPattern;
import org.emoflon.neo.neo4j.adapter.patterns.NeoPatternFactory;
import org.emoflon.neo.emsl.eMSL.Pattern;
import org.emoflon.neo.emsl.eMSL.Rule;
import org.emoflon.neo.neo4j.adapter.NeoConstraint;
import org.emoflon.neo.engine.api.constraints.IConstraint;
import org.emoflon.neo.emsl.eMSL.Constraint;
import org.neo4j.driver.v1.Value;
import org.emoflon.neo.neo4j.adapter.patterns.NeoPatternAccess;
import org.emoflon.neo.neo4j.adapter.NeoMask;
import org.emoflon.neo.neo4j.adapter.NeoData;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@SuppressWarnings("unused")
public class API_FigureMoves {
	private EMSL_Spec spec;
	private NeoCoreBuilder builder;

	public API_FigureMoves(NeoCoreBuilder builder, String platformResourceURIRoot, String platformPluginURIRoot){
		spec = (EMSL_Spec) EMSLUtil.loadSpecification("platform:/resource/Chess/src/FigureMoves.msl", platformResourceURIRoot, platformPluginURIRoot);
		this.builder = builder;
	}

	//:~> platform:/resource/Chess/src/FigureMoves.msl#//@entities.0
	public ByOwnColourOccupiedFieldAccess getPattern_ByOwnColourOccupiedField() {
		return new ByOwnColourOccupiedFieldAccess();
	}
	
	public class ByOwnColourOccupiedFieldAccess extends NeoPatternAccess<ByOwnColourOccupiedFieldData,ByOwnColourOccupiedFieldMask> {
		public final String blockingFig = "blockingFig";
		public final String fig = "fig";
		public final String to = "to";
		
		@Override
		public NeoPattern matcher(){
			var p = (Pattern) spec.getEntities().get(0);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public NeoPattern matcher(ByOwnColourOccupiedFieldMask mask) {
			var p = (Pattern) spec.getEntities().get(0);
			return NeoPatternFactory.createNeoPattern(p, builder, mask);
		}
		
		@Override
		public ByOwnColourOccupiedFieldData data(NeoMatch m) {
			return new ByOwnColourOccupiedFieldData(m);
		}
		
		@Override
		public ByOwnColourOccupiedFieldMask mask() {
			return new ByOwnColourOccupiedFieldMask();
		}
	}
	
	public class ByOwnColourOccupiedFieldData extends NeoData {
		public final BlockingFigNode blockingFig;
		public final BlockingFig_standsOn_0_toRel blockingFig_standsOn_0_to;
		public final FigNode fig;
		public final ToNode to;
		
		public ByOwnColourOccupiedFieldData(NeoMatch m) {
			var data = m.getData();
			var blockingFig = data.get("blockingFig");
			this.blockingFig = new BlockingFigNode(blockingFig);
			var blockingFig_standsOn_0_to = data.get("blockingFig_standsOn_0_to");
			this.blockingFig_standsOn_0_to = new BlockingFig_standsOn_0_toRel(blockingFig_standsOn_0_to);
			var fig = data.get("fig");
			this.fig = new FigNode(fig);
			var to = data.get("to");
			this.to = new ToNode(to);
		}
		
		
		public class BlockingFigNode {
			public String colour;
			
			public BlockingFigNode(Value blockingFig) {
				if(!blockingFig.get("colour").isNull())
					this.colour = blockingFig.get("colour").asString();
			}
		}
		
		public class BlockingFig_standsOn_0_toRel {
		
			public BlockingFig_standsOn_0_toRel(Value blockingFig_standsOn_0_to) {
			}
		}
		public class FigNode {
			public String colour;
			
			public FigNode(Value fig) {
				if(!fig.get("colour").isNull())
					this.colour = fig.get("colour").asString();
			}
		}
		
		public class ToNode {
			
			public ToNode(Value to) {
			}
		}
		
	}
	
	public class ByOwnColourOccupiedFieldMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public ByOwnColourOccupiedFieldMask setBlockingFig(Long value) {
			nodeMask.put("blockingFig", value);
			return this;
		}
		public ByOwnColourOccupiedFieldMask setBlockingFigColour(String value) {
			attributeMask.put("blockingFig.colour", value);
			return this;
		}
		public ByOwnColourOccupiedFieldMask setFig(Long value) {
			nodeMask.put("fig", value);
			return this;
		}
		public ByOwnColourOccupiedFieldMask setFigColour(String value) {
			attributeMask.put("fig.colour", value);
			return this;
		}
		public ByOwnColourOccupiedFieldMask setTo(Long value) {
			nodeMask.put("to", value);
			return this;
		}
	
	}
	
	//:~> platform:/resource/Chess/src/FigureMoves.msl#//@entities.1
	public BottomLeftReferenceAccess getPattern_BottomLeftReference() {
		return new BottomLeftReferenceAccess();
	}
	
	public class BottomLeftReferenceAccess extends NeoPatternAccess<BottomLeftReferenceData,BottomLeftReferenceMask> {
		public final String f = "f";
		public final String f2 = "f2";
		
		@Override
		public NeoPattern matcher(){
			var p = (Pattern) spec.getEntities().get(1);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public NeoPattern matcher(BottomLeftReferenceMask mask) {
			var p = (Pattern) spec.getEntities().get(1);
			return NeoPatternFactory.createNeoPattern(p, builder, mask);
		}
		
		@Override
		public BottomLeftReferenceData data(NeoMatch m) {
			return new BottomLeftReferenceData(m);
		}
		
		@Override
		public BottomLeftReferenceMask mask() {
			return new BottomLeftReferenceMask();
		}
	}
	
	public class BottomLeftReferenceData extends NeoData {
		public final FNode f;
		public final F_bottomLeft_0_f2Rel f_bottomLeft_0_f2;
		public final F2Node f2;
		
		public BottomLeftReferenceData(NeoMatch m) {
			var data = m.getData();
			var f = data.get("f");
			this.f = new FNode(f);
			var f_bottomLeft_0_f2 = data.get("f_bottomLeft_0_f2");
			this.f_bottomLeft_0_f2 = new F_bottomLeft_0_f2Rel(f_bottomLeft_0_f2);
			var f2 = data.get("f2");
			this.f2 = new F2Node(f2);
		}
		
		
		public class FNode {
			
			public FNode(Value f) {
			}
		}
		
		public class F_bottomLeft_0_f2Rel {
		
			public F_bottomLeft_0_f2Rel(Value f_bottomLeft_0_f2) {
			}
		}
		public class F2Node {
			
			public F2Node(Value f2) {
			}
		}
		
	}
	
	public class BottomLeftReferenceMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public BottomLeftReferenceMask setF(Long value) {
			nodeMask.put("f", value);
			return this;
		}
		public BottomLeftReferenceMask setF2(Long value) {
			nodeMask.put("f2", value);
			return this;
		}
	
	}
	
	//:~> platform:/resource/Chess/src/FigureMoves.msl#//@entities.2
	public BottomRightReferenceAccess getPattern_BottomRightReference() {
		return new BottomRightReferenceAccess();
	}
	
	public class BottomRightReferenceAccess extends NeoPatternAccess<BottomRightReferenceData,BottomRightReferenceMask> {
		public final String f = "f";
		public final String f2 = "f2";
		
		@Override
		public NeoPattern matcher(){
			var p = (Pattern) spec.getEntities().get(2);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public NeoPattern matcher(BottomRightReferenceMask mask) {
			var p = (Pattern) spec.getEntities().get(2);
			return NeoPatternFactory.createNeoPattern(p, builder, mask);
		}
		
		@Override
		public BottomRightReferenceData data(NeoMatch m) {
			return new BottomRightReferenceData(m);
		}
		
		@Override
		public BottomRightReferenceMask mask() {
			return new BottomRightReferenceMask();
		}
	}
	
	public class BottomRightReferenceData extends NeoData {
		public final FNode f;
		public final F_bottomRight_0_f2Rel f_bottomRight_0_f2;
		public final F2Node f2;
		
		public BottomRightReferenceData(NeoMatch m) {
			var data = m.getData();
			var f = data.get("f");
			this.f = new FNode(f);
			var f_bottomRight_0_f2 = data.get("f_bottomRight_0_f2");
			this.f_bottomRight_0_f2 = new F_bottomRight_0_f2Rel(f_bottomRight_0_f2);
			var f2 = data.get("f2");
			this.f2 = new F2Node(f2);
		}
		
		
		public class FNode {
			
			public FNode(Value f) {
			}
		}
		
		public class F_bottomRight_0_f2Rel {
		
			public F_bottomRight_0_f2Rel(Value f_bottomRight_0_f2) {
			}
		}
		public class F2Node {
			
			public F2Node(Value f2) {
			}
		}
		
	}
	
	public class BottomRightReferenceMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public BottomRightReferenceMask setF(Long value) {
			nodeMask.put("f", value);
			return this;
		}
		public BottomRightReferenceMask setF2(Long value) {
			nodeMask.put("f2", value);
			return this;
		}
	
	}
	
	//:~> platform:/resource/Chess/src/FigureMoves.msl#//@entities.3
	public MoveFigAccess getRule_MoveFig() {
		return new MoveFigAccess();
	}
	
	public class MoveFigAccess extends NeoRuleAccess<MoveFigData,MoveFigMask> {
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(3);
			return new NeoRule(r, builder);
		}
		
		@Override
		public NeoRule rule(MoveFigMask mask) {
			var r = (Rule) spec.getEntities().get(3);
			return new NeoRule(r, builder, mask);
		}
		
		@Override
		public MoveFigData data(NeoMatch m) {
			return new MoveFigData(m);
		}
		
		@Override
		public MoveFigMask mask() {
			return new MoveFigMask();
		}
	}
	
	public class MoveFigData extends NeoData {
		public final FigNode fig;
		public final Fig_standsOn_0_fromRel fig_standsOn_0_from;
		public final Fig_standsOn_1_toRel fig_standsOn_1_to;
		public final FromNode from;
		public final ToNode to;
		
		public MoveFigData(NeoMatch m) {
			var data = m.getData();
			var fig = data.get("fig");
			this.fig = new FigNode(fig);
			var fig_standsOn_0_from = data.get("fig_standsOn_0_from");
			this.fig_standsOn_0_from = new Fig_standsOn_0_fromRel(fig_standsOn_0_from);
			var fig_standsOn_1_to = data.get("fig_standsOn_1_to");
			this.fig_standsOn_1_to = new Fig_standsOn_1_toRel(fig_standsOn_1_to);
			var from = data.get("from");
			this.from = new FromNode(from);
			var to = data.get("to");
			this.to = new ToNode(to);
		}
		
		
		public class FigNode {
			public String colour;
			
			public FigNode(Value fig) {
				if(!fig.get("colour").isNull())
					this.colour = fig.get("colour").asString();
			}
		}
		
		public class Fig_standsOn_0_fromRel {
		
			public Fig_standsOn_0_fromRel(Value fig_standsOn_0_from) {
			}
		}
		public class Fig_standsOn_1_toRel {
		
			public Fig_standsOn_1_toRel(Value fig_standsOn_1_to) {
			}
		}
		public class FromNode {
			
			public FromNode(Value from) {
			}
		}
		
		public class ToNode {
			
			public ToNode(Value to) {
			}
		}
		
	}
	
	public class MoveFigMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public MoveFigMask setFig(Long value) {
			nodeMask.put("fig", value);
			return this;
		}
		public MoveFigMask setFigColour(String value) {
			attributeMask.put("fig.colour", value);
			return this;
		}
		public MoveFigMask setFrom(Long value) {
			nodeMask.put("from", value);
			return this;
		}
		public MoveFigMask setTo(Long value) {
			nodeMask.put("to", value);
			return this;
		}
	}
	
	//:~> platform:/resource/Chess/src/FigureMoves.msl#//@entities.4
	public MovePawnAccess getRule_MovePawn() {
		return new MovePawnAccess();
	}
	
	public class MovePawnAccess extends NeoRuleAccess<MovePawnData,MovePawnMask> {
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(4);
			return new NeoRule(r, builder);
		}
		
		@Override
		public NeoRule rule(MovePawnMask mask) {
			var r = (Rule) spec.getEntities().get(4);
			return new NeoRule(r, builder, mask);
		}
		
		@Override
		public MovePawnData data(NeoMatch m) {
			return new MovePawnData(m);
		}
		
		@Override
		public MovePawnMask mask() {
			return new MovePawnMask();
		}
	}
	
	public class MovePawnData extends NeoData {
		public final FigNode fig;
		public final Fig_standsOn_0_fromRel fig_standsOn_0_from;
		public final Fig_standsOn_1_toRel fig_standsOn_1_to;
		public final FromNode from;
		public final ToNode to;
		
		public MovePawnData(NeoMatch m) {
			var data = m.getData();
			var fig = data.get("fig");
			this.fig = new FigNode(fig);
			var fig_standsOn_0_from = data.get("fig_standsOn_0_from");
			this.fig_standsOn_0_from = new Fig_standsOn_0_fromRel(fig_standsOn_0_from);
			var fig_standsOn_1_to = data.get("fig_standsOn_1_to");
			this.fig_standsOn_1_to = new Fig_standsOn_1_toRel(fig_standsOn_1_to);
			var from = data.get("from");
			this.from = new FromNode(from);
			var to = data.get("to");
			this.to = new ToNode(to);
		}
		
		
		public class FigNode {
			public String colour;
			
			public FigNode(Value fig) {
				if(!fig.get("colour").isNull())
					this.colour = fig.get("colour").asString();
			}
		}
		
		public class Fig_standsOn_0_fromRel {
		
			public Fig_standsOn_0_fromRel(Value fig_standsOn_0_from) {
			}
		}
		public class Fig_standsOn_1_toRel {
		
			public Fig_standsOn_1_toRel(Value fig_standsOn_1_to) {
			}
		}
		public class FromNode {
			
			public FromNode(Value from) {
			}
		}
		
		public class ToNode {
			
			public ToNode(Value to) {
			}
		}
		
	}
	
	public class MovePawnMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public MovePawnMask setFig(Long value) {
			nodeMask.put("fig", value);
			return this;
		}
		public MovePawnMask setFigColour(String value) {
			attributeMask.put("fig.colour", value);
			return this;
		}
		public MovePawnMask setFrom(Long value) {
			nodeMask.put("from", value);
			return this;
		}
		public MovePawnMask setTo(Long value) {
			nodeMask.put("to", value);
			return this;
		}
	}
	
	//:~> platform:/resource/Chess/src/FigureMoves.msl#//@entities.5
	public MoveWhitePawnAccess getRule_MoveWhitePawn() {
		return new MoveWhitePawnAccess();
	}
	
	public class MoveWhitePawnAccess extends NeoRuleAccess<MoveWhitePawnData,MoveWhitePawnMask> {
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(5);
			return new NeoRule(r, builder);
		}
		
		@Override
		public NeoRule rule(MoveWhitePawnMask mask) {
			var r = (Rule) spec.getEntities().get(5);
			return new NeoRule(r, builder, mask);
		}
		
		@Override
		public MoveWhitePawnData data(NeoMatch m) {
			return new MoveWhitePawnData(m);
		}
		
		@Override
		public MoveWhitePawnMask mask() {
			return new MoveWhitePawnMask();
		}
	}
	
	public class MoveWhitePawnData extends NeoData {
		public final FigNode fig;
		public final Fig_standsOn_0_fromRel fig_standsOn_0_from;
		public final Fig_standsOn_1_toRel fig_standsOn_1_to;
		public final FromNode from;
		public final ToNode to;
		public final To_bottom_0_fromRel to_bottom_0_from;
		
		public MoveWhitePawnData(NeoMatch m) {
			var data = m.getData();
			var fig = data.get("fig");
			this.fig = new FigNode(fig);
			var fig_standsOn_0_from = data.get("fig_standsOn_0_from");
			this.fig_standsOn_0_from = new Fig_standsOn_0_fromRel(fig_standsOn_0_from);
			var fig_standsOn_1_to = data.get("fig_standsOn_1_to");
			this.fig_standsOn_1_to = new Fig_standsOn_1_toRel(fig_standsOn_1_to);
			var from = data.get("from");
			this.from = new FromNode(from);
			var to = data.get("to");
			this.to = new ToNode(to);
			var to_bottom_0_from = data.get("to_bottom_0_from");
			this.to_bottom_0_from = new To_bottom_0_fromRel(to_bottom_0_from);
		}
		
		
		public class FigNode {
			public String colour;
			
			public FigNode(Value fig) {
				if(!fig.get("colour").isNull())
					this.colour = fig.get("colour").asString();
			}
		}
		
		public class Fig_standsOn_0_fromRel {
		
			public Fig_standsOn_0_fromRel(Value fig_standsOn_0_from) {
			}
		}
		public class Fig_standsOn_1_toRel {
		
			public Fig_standsOn_1_toRel(Value fig_standsOn_1_to) {
			}
		}
		public class FromNode {
			
			public FromNode(Value from) {
			}
		}
		
		public class ToNode {
			
			public ToNode(Value to) {
			}
		}
		
		public class To_bottom_0_fromRel {
		
			public To_bottom_0_fromRel(Value to_bottom_0_from) {
			}
		}
	}
	
	public class MoveWhitePawnMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public MoveWhitePawnMask setFig(Long value) {
			nodeMask.put("fig", value);
			return this;
		}
		public MoveWhitePawnMask setFigColour(String value) {
			attributeMask.put("fig.colour", value);
			return this;
		}
		public MoveWhitePawnMask setFrom(Long value) {
			nodeMask.put("from", value);
			return this;
		}
		public MoveWhitePawnMask setTo(Long value) {
			nodeMask.put("to", value);
			return this;
		}
	}
	
	//:~> platform:/resource/Chess/src/FigureMoves.msl#//@entities.6
	public MoveBlackPawnAccess getRule_MoveBlackPawn() {
		return new MoveBlackPawnAccess();
	}
	
	public class MoveBlackPawnAccess extends NeoRuleAccess<MoveBlackPawnData,MoveBlackPawnMask> {
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(6);
			return new NeoRule(r, builder);
		}
		
		@Override
		public NeoRule rule(MoveBlackPawnMask mask) {
			var r = (Rule) spec.getEntities().get(6);
			return new NeoRule(r, builder, mask);
		}
		
		@Override
		public MoveBlackPawnData data(NeoMatch m) {
			return new MoveBlackPawnData(m);
		}
		
		@Override
		public MoveBlackPawnMask mask() {
			return new MoveBlackPawnMask();
		}
	}
	
	public class MoveBlackPawnData extends NeoData {
		public final FigNode fig;
		public final Fig_standsOn_0_fromRel fig_standsOn_0_from;
		public final Fig_standsOn_1_toRel fig_standsOn_1_to;
		public final FromNode from;
		public final From_bottom_0_toRel from_bottom_0_to;
		public final ToNode to;
		
		public MoveBlackPawnData(NeoMatch m) {
			var data = m.getData();
			var fig = data.get("fig");
			this.fig = new FigNode(fig);
			var fig_standsOn_0_from = data.get("fig_standsOn_0_from");
			this.fig_standsOn_0_from = new Fig_standsOn_0_fromRel(fig_standsOn_0_from);
			var fig_standsOn_1_to = data.get("fig_standsOn_1_to");
			this.fig_standsOn_1_to = new Fig_standsOn_1_toRel(fig_standsOn_1_to);
			var from = data.get("from");
			this.from = new FromNode(from);
			var from_bottom_0_to = data.get("from_bottom_0_to");
			this.from_bottom_0_to = new From_bottom_0_toRel(from_bottom_0_to);
			var to = data.get("to");
			this.to = new ToNode(to);
		}
		
		
		public class FigNode {
			public String colour;
			
			public FigNode(Value fig) {
				if(!fig.get("colour").isNull())
					this.colour = fig.get("colour").asString();
			}
		}
		
		public class Fig_standsOn_0_fromRel {
		
			public Fig_standsOn_0_fromRel(Value fig_standsOn_0_from) {
			}
		}
		public class Fig_standsOn_1_toRel {
		
			public Fig_standsOn_1_toRel(Value fig_standsOn_1_to) {
			}
		}
		public class FromNode {
			
			public FromNode(Value from) {
			}
		}
		
		public class From_bottom_0_toRel {
		
			public From_bottom_0_toRel(Value from_bottom_0_to) {
			}
		}
		public class ToNode {
			
			public ToNode(Value to) {
			}
		}
		
	}
	
	public class MoveBlackPawnMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public MoveBlackPawnMask setFig(Long value) {
			nodeMask.put("fig", value);
			return this;
		}
		public MoveBlackPawnMask setFigColour(String value) {
			attributeMask.put("fig.colour", value);
			return this;
		}
		public MoveBlackPawnMask setFrom(Long value) {
			nodeMask.put("from", value);
			return this;
		}
		public MoveBlackPawnMask setTo(Long value) {
			nodeMask.put("to", value);
			return this;
		}
	}
	
	//:~> platform:/resource/Chess/src/FigureMoves.msl#//@entities.7
	public MoveRookAccess getRule_MoveRook() {
		return new MoveRookAccess();
	}
	
	public class MoveRookAccess extends NeoRuleAccess<MoveRookData,MoveRookMask> {
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(7);
			return new NeoRule(r, builder);
		}
		
		@Override
		public NeoRule rule(MoveRookMask mask) {
			var r = (Rule) spec.getEntities().get(7);
			return new NeoRule(r, builder, mask);
		}
		
		@Override
		public MoveRookData data(NeoMatch m) {
			return new MoveRookData(m);
		}
		
		@Override
		public MoveRookMask mask() {
			return new MoveRookMask();
		}
	}
	
	public class MoveRookData extends NeoData {
		public final FigNode fig;
		public final Fig_standsOn_0_fromRel fig_standsOn_0_from;
		public final Fig_standsOn_1_toRel fig_standsOn_1_to;
		public final FromNode from;
		public final ToNode to;
		
		public MoveRookData(NeoMatch m) {
			var data = m.getData();
			var fig = data.get("fig");
			this.fig = new FigNode(fig);
			var fig_standsOn_0_from = data.get("fig_standsOn_0_from");
			this.fig_standsOn_0_from = new Fig_standsOn_0_fromRel(fig_standsOn_0_from);
			var fig_standsOn_1_to = data.get("fig_standsOn_1_to");
			this.fig_standsOn_1_to = new Fig_standsOn_1_toRel(fig_standsOn_1_to);
			var from = data.get("from");
			this.from = new FromNode(from);
			var to = data.get("to");
			this.to = new ToNode(to);
		}
		
		
		public class FigNode {
			public String colour;
			
			public FigNode(Value fig) {
				if(!fig.get("colour").isNull())
					this.colour = fig.get("colour").asString();
			}
		}
		
		public class Fig_standsOn_0_fromRel {
		
			public Fig_standsOn_0_fromRel(Value fig_standsOn_0_from) {
			}
		}
		public class Fig_standsOn_1_toRel {
		
			public Fig_standsOn_1_toRel(Value fig_standsOn_1_to) {
			}
		}
		public class FromNode {
			
			public FromNode(Value from) {
			}
		}
		
		public class ToNode {
			
			public ToNode(Value to) {
			}
		}
		
	}
	
	public class MoveRookMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public MoveRookMask setFig(Long value) {
			nodeMask.put("fig", value);
			return this;
		}
		public MoveRookMask setFigColour(String value) {
			attributeMask.put("fig.colour", value);
			return this;
		}
		public MoveRookMask setFrom(Long value) {
			nodeMask.put("from", value);
			return this;
		}
		public MoveRookMask setTo(Long value) {
			nodeMask.put("to", value);
			return this;
		}
	}
	
	//:~> platform:/resource/Chess/src/FigureMoves.msl#//@entities.8
	public MoveRookUpAccess getRule_MoveRookUp() {
		return new MoveRookUpAccess();
	}
	
	public class MoveRookUpAccess extends NeoRuleAccess<MoveRookUpData,MoveRookUpMask> {
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(8);
			return new NeoRule(r, builder);
		}
		
		@Override
		public NeoRule rule(MoveRookUpMask mask) {
			var r = (Rule) spec.getEntities().get(8);
			return new NeoRule(r, builder, mask);
		}
		
		@Override
		public MoveRookUpData data(NeoMatch m) {
			return new MoveRookUpData(m);
		}
		
		@Override
		public MoveRookUpMask mask() {
			return new MoveRookUpMask();
		}
	}
	
	public class MoveRookUpData extends NeoData {
		public final FigNode fig;
		public final Fig_standsOn_0_fromRel fig_standsOn_0_from;
		public final Fig_standsOn_1_toRel fig_standsOn_1_to;
		public final FromNode from;
		public final ToNode to;
		public final To_bottom_0_fromRel to_bottom_0_from;
		
		public MoveRookUpData(NeoMatch m) {
			var data = m.getData();
			var fig = data.get("fig");
			this.fig = new FigNode(fig);
			var fig_standsOn_0_from = data.get("fig_standsOn_0_from");
			this.fig_standsOn_0_from = new Fig_standsOn_0_fromRel(fig_standsOn_0_from);
			var fig_standsOn_1_to = data.get("fig_standsOn_1_to");
			this.fig_standsOn_1_to = new Fig_standsOn_1_toRel(fig_standsOn_1_to);
			var from = data.get("from");
			this.from = new FromNode(from);
			var to = data.get("to");
			this.to = new ToNode(to);
			var to_bottom_0_from = data.get("to_bottom_0_from");
			this.to_bottom_0_from = new To_bottom_0_fromRel(to_bottom_0_from);
		}
		
		
		public class FigNode {
			public String colour;
			
			public FigNode(Value fig) {
				if(!fig.get("colour").isNull())
					this.colour = fig.get("colour").asString();
			}
		}
		
		public class Fig_standsOn_0_fromRel {
		
			public Fig_standsOn_0_fromRel(Value fig_standsOn_0_from) {
			}
		}
		public class Fig_standsOn_1_toRel {
		
			public Fig_standsOn_1_toRel(Value fig_standsOn_1_to) {
			}
		}
		public class FromNode {
			
			public FromNode(Value from) {
			}
		}
		
		public class ToNode {
			
			public ToNode(Value to) {
			}
		}
		
		public class To_bottom_0_fromRel {
		
			public To_bottom_0_fromRel(Value to_bottom_0_from) {
			}
		}
	}
	
	public class MoveRookUpMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public MoveRookUpMask setFig(Long value) {
			nodeMask.put("fig", value);
			return this;
		}
		public MoveRookUpMask setFigColour(String value) {
			attributeMask.put("fig.colour", value);
			return this;
		}
		public MoveRookUpMask setFrom(Long value) {
			nodeMask.put("from", value);
			return this;
		}
		public MoveRookUpMask setTo(Long value) {
			nodeMask.put("to", value);
			return this;
		}
	}
	
	//:~> platform:/resource/Chess/src/FigureMoves.msl#//@entities.9
	public MoveRookRightAccess getRule_MoveRookRight() {
		return new MoveRookRightAccess();
	}
	
	public class MoveRookRightAccess extends NeoRuleAccess<MoveRookRightData,MoveRookRightMask> {
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(9);
			return new NeoRule(r, builder);
		}
		
		@Override
		public NeoRule rule(MoveRookRightMask mask) {
			var r = (Rule) spec.getEntities().get(9);
			return new NeoRule(r, builder, mask);
		}
		
		@Override
		public MoveRookRightData data(NeoMatch m) {
			return new MoveRookRightData(m);
		}
		
		@Override
		public MoveRookRightMask mask() {
			return new MoveRookRightMask();
		}
	}
	
	public class MoveRookRightData extends NeoData {
		public final FigNode fig;
		public final Fig_standsOn_0_fromRel fig_standsOn_0_from;
		public final Fig_standsOn_1_toRel fig_standsOn_1_to;
		public final FromNode from;
		public final From_right_0_toRel from_right_0_to;
		public final ToNode to;
		
		public MoveRookRightData(NeoMatch m) {
			var data = m.getData();
			var fig = data.get("fig");
			this.fig = new FigNode(fig);
			var fig_standsOn_0_from = data.get("fig_standsOn_0_from");
			this.fig_standsOn_0_from = new Fig_standsOn_0_fromRel(fig_standsOn_0_from);
			var fig_standsOn_1_to = data.get("fig_standsOn_1_to");
			this.fig_standsOn_1_to = new Fig_standsOn_1_toRel(fig_standsOn_1_to);
			var from = data.get("from");
			this.from = new FromNode(from);
			var from_right_0_to = data.get("from_right_0_to");
			this.from_right_0_to = new From_right_0_toRel(from_right_0_to);
			var to = data.get("to");
			this.to = new ToNode(to);
		}
		
		
		public class FigNode {
			public String colour;
			
			public FigNode(Value fig) {
				if(!fig.get("colour").isNull())
					this.colour = fig.get("colour").asString();
			}
		}
		
		public class Fig_standsOn_0_fromRel {
		
			public Fig_standsOn_0_fromRel(Value fig_standsOn_0_from) {
			}
		}
		public class Fig_standsOn_1_toRel {
		
			public Fig_standsOn_1_toRel(Value fig_standsOn_1_to) {
			}
		}
		public class FromNode {
			
			public FromNode(Value from) {
			}
		}
		
		public class From_right_0_toRel {
		
			public From_right_0_toRel(Value from_right_0_to) {
			}
		}
		public class ToNode {
			
			public ToNode(Value to) {
			}
		}
		
	}
	
	public class MoveRookRightMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public MoveRookRightMask setFig(Long value) {
			nodeMask.put("fig", value);
			return this;
		}
		public MoveRookRightMask setFigColour(String value) {
			attributeMask.put("fig.colour", value);
			return this;
		}
		public MoveRookRightMask setFrom(Long value) {
			nodeMask.put("from", value);
			return this;
		}
		public MoveRookRightMask setTo(Long value) {
			nodeMask.put("to", value);
			return this;
		}
	}
	
	//:~> platform:/resource/Chess/src/FigureMoves.msl#//@entities.10
	public MoveRookDownAccess getRule_MoveRookDown() {
		return new MoveRookDownAccess();
	}
	
	public class MoveRookDownAccess extends NeoRuleAccess<MoveRookDownData,MoveRookDownMask> {
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(10);
			return new NeoRule(r, builder);
		}
		
		@Override
		public NeoRule rule(MoveRookDownMask mask) {
			var r = (Rule) spec.getEntities().get(10);
			return new NeoRule(r, builder, mask);
		}
		
		@Override
		public MoveRookDownData data(NeoMatch m) {
			return new MoveRookDownData(m);
		}
		
		@Override
		public MoveRookDownMask mask() {
			return new MoveRookDownMask();
		}
	}
	
	public class MoveRookDownData extends NeoData {
		public final FigNode fig;
		public final Fig_standsOn_0_fromRel fig_standsOn_0_from;
		public final Fig_standsOn_1_toRel fig_standsOn_1_to;
		public final FromNode from;
		public final From_bottom_0_toRel from_bottom_0_to;
		public final ToNode to;
		
		public MoveRookDownData(NeoMatch m) {
			var data = m.getData();
			var fig = data.get("fig");
			this.fig = new FigNode(fig);
			var fig_standsOn_0_from = data.get("fig_standsOn_0_from");
			this.fig_standsOn_0_from = new Fig_standsOn_0_fromRel(fig_standsOn_0_from);
			var fig_standsOn_1_to = data.get("fig_standsOn_1_to");
			this.fig_standsOn_1_to = new Fig_standsOn_1_toRel(fig_standsOn_1_to);
			var from = data.get("from");
			this.from = new FromNode(from);
			var from_bottom_0_to = data.get("from_bottom_0_to");
			this.from_bottom_0_to = new From_bottom_0_toRel(from_bottom_0_to);
			var to = data.get("to");
			this.to = new ToNode(to);
		}
		
		
		public class FigNode {
			public String colour;
			
			public FigNode(Value fig) {
				if(!fig.get("colour").isNull())
					this.colour = fig.get("colour").asString();
			}
		}
		
		public class Fig_standsOn_0_fromRel {
		
			public Fig_standsOn_0_fromRel(Value fig_standsOn_0_from) {
			}
		}
		public class Fig_standsOn_1_toRel {
		
			public Fig_standsOn_1_toRel(Value fig_standsOn_1_to) {
			}
		}
		public class FromNode {
			
			public FromNode(Value from) {
			}
		}
		
		public class From_bottom_0_toRel {
		
			public From_bottom_0_toRel(Value from_bottom_0_to) {
			}
		}
		public class ToNode {
			
			public ToNode(Value to) {
			}
		}
		
	}
	
	public class MoveRookDownMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public MoveRookDownMask setFig(Long value) {
			nodeMask.put("fig", value);
			return this;
		}
		public MoveRookDownMask setFigColour(String value) {
			attributeMask.put("fig.colour", value);
			return this;
		}
		public MoveRookDownMask setFrom(Long value) {
			nodeMask.put("from", value);
			return this;
		}
		public MoveRookDownMask setTo(Long value) {
			nodeMask.put("to", value);
			return this;
		}
	}
	
	//:~> platform:/resource/Chess/src/FigureMoves.msl#//@entities.11
	public MoveRookLeftAccess getRule_MoveRookLeft() {
		return new MoveRookLeftAccess();
	}
	
	public class MoveRookLeftAccess extends NeoRuleAccess<MoveRookLeftData,MoveRookLeftMask> {
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(11);
			return new NeoRule(r, builder);
		}
		
		@Override
		public NeoRule rule(MoveRookLeftMask mask) {
			var r = (Rule) spec.getEntities().get(11);
			return new NeoRule(r, builder, mask);
		}
		
		@Override
		public MoveRookLeftData data(NeoMatch m) {
			return new MoveRookLeftData(m);
		}
		
		@Override
		public MoveRookLeftMask mask() {
			return new MoveRookLeftMask();
		}
	}
	
	public class MoveRookLeftData extends NeoData {
		public final FigNode fig;
		public final Fig_standsOn_0_fromRel fig_standsOn_0_from;
		public final Fig_standsOn_1_toRel fig_standsOn_1_to;
		public final FromNode from;
		public final ToNode to;
		public final To_right_0_fromRel to_right_0_from;
		
		public MoveRookLeftData(NeoMatch m) {
			var data = m.getData();
			var fig = data.get("fig");
			this.fig = new FigNode(fig);
			var fig_standsOn_0_from = data.get("fig_standsOn_0_from");
			this.fig_standsOn_0_from = new Fig_standsOn_0_fromRel(fig_standsOn_0_from);
			var fig_standsOn_1_to = data.get("fig_standsOn_1_to");
			this.fig_standsOn_1_to = new Fig_standsOn_1_toRel(fig_standsOn_1_to);
			var from = data.get("from");
			this.from = new FromNode(from);
			var to = data.get("to");
			this.to = new ToNode(to);
			var to_right_0_from = data.get("to_right_0_from");
			this.to_right_0_from = new To_right_0_fromRel(to_right_0_from);
		}
		
		
		public class FigNode {
			public String colour;
			
			public FigNode(Value fig) {
				if(!fig.get("colour").isNull())
					this.colour = fig.get("colour").asString();
			}
		}
		
		public class Fig_standsOn_0_fromRel {
		
			public Fig_standsOn_0_fromRel(Value fig_standsOn_0_from) {
			}
		}
		public class Fig_standsOn_1_toRel {
		
			public Fig_standsOn_1_toRel(Value fig_standsOn_1_to) {
			}
		}
		public class FromNode {
			
			public FromNode(Value from) {
			}
		}
		
		public class ToNode {
			
			public ToNode(Value to) {
			}
		}
		
		public class To_right_0_fromRel {
		
			public To_right_0_fromRel(Value to_right_0_from) {
			}
		}
	}
	
	public class MoveRookLeftMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public MoveRookLeftMask setFig(Long value) {
			nodeMask.put("fig", value);
			return this;
		}
		public MoveRookLeftMask setFigColour(String value) {
			attributeMask.put("fig.colour", value);
			return this;
		}
		public MoveRookLeftMask setFrom(Long value) {
			nodeMask.put("from", value);
			return this;
		}
		public MoveRookLeftMask setTo(Long value) {
			nodeMask.put("to", value);
			return this;
		}
	}
	
	//:~> platform:/resource/Chess/src/FigureMoves.msl#//@entities.12
	public MoveBishopAccess getRule_MoveBishop() {
		return new MoveBishopAccess();
	}
	
	public class MoveBishopAccess extends NeoRuleAccess<MoveBishopData,MoveBishopMask> {
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(12);
			return new NeoRule(r, builder);
		}
		
		@Override
		public NeoRule rule(MoveBishopMask mask) {
			var r = (Rule) spec.getEntities().get(12);
			return new NeoRule(r, builder, mask);
		}
		
		@Override
		public MoveBishopData data(NeoMatch m) {
			return new MoveBishopData(m);
		}
		
		@Override
		public MoveBishopMask mask() {
			return new MoveBishopMask();
		}
	}
	
	public class MoveBishopData extends NeoData {
		public final FigNode fig;
		public final Fig_standsOn_0_fromRel fig_standsOn_0_from;
		public final Fig_standsOn_1_toRel fig_standsOn_1_to;
		public final FromNode from;
		public final ToNode to;
		
		public MoveBishopData(NeoMatch m) {
			var data = m.getData();
			var fig = data.get("fig");
			this.fig = new FigNode(fig);
			var fig_standsOn_0_from = data.get("fig_standsOn_0_from");
			this.fig_standsOn_0_from = new Fig_standsOn_0_fromRel(fig_standsOn_0_from);
			var fig_standsOn_1_to = data.get("fig_standsOn_1_to");
			this.fig_standsOn_1_to = new Fig_standsOn_1_toRel(fig_standsOn_1_to);
			var from = data.get("from");
			this.from = new FromNode(from);
			var to = data.get("to");
			this.to = new ToNode(to);
		}
		
		
		public class FigNode {
			public String colour;
			
			public FigNode(Value fig) {
				if(!fig.get("colour").isNull())
					this.colour = fig.get("colour").asString();
			}
		}
		
		public class Fig_standsOn_0_fromRel {
		
			public Fig_standsOn_0_fromRel(Value fig_standsOn_0_from) {
			}
		}
		public class Fig_standsOn_1_toRel {
		
			public Fig_standsOn_1_toRel(Value fig_standsOn_1_to) {
			}
		}
		public class FromNode {
			
			public FromNode(Value from) {
			}
		}
		
		public class ToNode {
			
			public ToNode(Value to) {
			}
		}
		
	}
	
	public class MoveBishopMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public MoveBishopMask setFig(Long value) {
			nodeMask.put("fig", value);
			return this;
		}
		public MoveBishopMask setFigColour(String value) {
			attributeMask.put("fig.colour", value);
			return this;
		}
		public MoveBishopMask setFrom(Long value) {
			nodeMask.put("from", value);
			return this;
		}
		public MoveBishopMask setTo(Long value) {
			nodeMask.put("to", value);
			return this;
		}
	}
	
	//:~> platform:/resource/Chess/src/FigureMoves.msl#//@entities.13
	public MoveBishopUpLeftAccess getRule_MoveBishopUpLeft() {
		return new MoveBishopUpLeftAccess();
	}
	
	public class MoveBishopUpLeftAccess extends NeoRuleAccess<MoveBishopUpLeftData,MoveBishopUpLeftMask> {
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(13);
			return new NeoRule(r, builder);
		}
		
		@Override
		public NeoRule rule(MoveBishopUpLeftMask mask) {
			var r = (Rule) spec.getEntities().get(13);
			return new NeoRule(r, builder, mask);
		}
		
		@Override
		public MoveBishopUpLeftData data(NeoMatch m) {
			return new MoveBishopUpLeftData(m);
		}
		
		@Override
		public MoveBishopUpLeftMask mask() {
			return new MoveBishopUpLeftMask();
		}
	}
	
	public class MoveBishopUpLeftData extends NeoData {
		public final FigNode fig;
		public final Fig_standsOn_0_fromRel fig_standsOn_0_from;
		public final Fig_standsOn_1_toRel fig_standsOn_1_to;
		public final FromNode from;
		public final ToNode to;
		public final To_bottomRight_0_fromRel to_bottomRight_0_from;
		
		public MoveBishopUpLeftData(NeoMatch m) {
			var data = m.getData();
			var fig = data.get("fig");
			this.fig = new FigNode(fig);
			var fig_standsOn_0_from = data.get("fig_standsOn_0_from");
			this.fig_standsOn_0_from = new Fig_standsOn_0_fromRel(fig_standsOn_0_from);
			var fig_standsOn_1_to = data.get("fig_standsOn_1_to");
			this.fig_standsOn_1_to = new Fig_standsOn_1_toRel(fig_standsOn_1_to);
			var from = data.get("from");
			this.from = new FromNode(from);
			var to = data.get("to");
			this.to = new ToNode(to);
			var to_bottomRight_0_from = data.get("to_bottomRight_0_from");
			this.to_bottomRight_0_from = new To_bottomRight_0_fromRel(to_bottomRight_0_from);
		}
		
		
		public class FigNode {
			public String colour;
			
			public FigNode(Value fig) {
				if(!fig.get("colour").isNull())
					this.colour = fig.get("colour").asString();
			}
		}
		
		public class Fig_standsOn_0_fromRel {
		
			public Fig_standsOn_0_fromRel(Value fig_standsOn_0_from) {
			}
		}
		public class Fig_standsOn_1_toRel {
		
			public Fig_standsOn_1_toRel(Value fig_standsOn_1_to) {
			}
		}
		public class FromNode {
			
			public FromNode(Value from) {
			}
		}
		
		public class ToNode {
			
			public ToNode(Value to) {
			}
		}
		
		public class To_bottomRight_0_fromRel {
		
			public To_bottomRight_0_fromRel(Value to_bottomRight_0_from) {
			}
		}
	}
	
	public class MoveBishopUpLeftMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public MoveBishopUpLeftMask setFig(Long value) {
			nodeMask.put("fig", value);
			return this;
		}
		public MoveBishopUpLeftMask setFigColour(String value) {
			attributeMask.put("fig.colour", value);
			return this;
		}
		public MoveBishopUpLeftMask setFrom(Long value) {
			nodeMask.put("from", value);
			return this;
		}
		public MoveBishopUpLeftMask setTo(Long value) {
			nodeMask.put("to", value);
			return this;
		}
	}
	
	//:~> platform:/resource/Chess/src/FigureMoves.msl#//@entities.14
	public MoveBishopUpRightAccess getRule_MoveBishopUpRight() {
		return new MoveBishopUpRightAccess();
	}
	
	public class MoveBishopUpRightAccess extends NeoRuleAccess<MoveBishopUpRightData,MoveBishopUpRightMask> {
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(14);
			return new NeoRule(r, builder);
		}
		
		@Override
		public NeoRule rule(MoveBishopUpRightMask mask) {
			var r = (Rule) spec.getEntities().get(14);
			return new NeoRule(r, builder, mask);
		}
		
		@Override
		public MoveBishopUpRightData data(NeoMatch m) {
			return new MoveBishopUpRightData(m);
		}
		
		@Override
		public MoveBishopUpRightMask mask() {
			return new MoveBishopUpRightMask();
		}
	}
	
	public class MoveBishopUpRightData extends NeoData {
		public final FigNode fig;
		public final Fig_standsOn_0_fromRel fig_standsOn_0_from;
		public final Fig_standsOn_1_toRel fig_standsOn_1_to;
		public final FromNode from;
		public final ToNode to;
		public final To_bottomLeft_0_fromRel to_bottomLeft_0_from;
		
		public MoveBishopUpRightData(NeoMatch m) {
			var data = m.getData();
			var fig = data.get("fig");
			this.fig = new FigNode(fig);
			var fig_standsOn_0_from = data.get("fig_standsOn_0_from");
			this.fig_standsOn_0_from = new Fig_standsOn_0_fromRel(fig_standsOn_0_from);
			var fig_standsOn_1_to = data.get("fig_standsOn_1_to");
			this.fig_standsOn_1_to = new Fig_standsOn_1_toRel(fig_standsOn_1_to);
			var from = data.get("from");
			this.from = new FromNode(from);
			var to = data.get("to");
			this.to = new ToNode(to);
			var to_bottomLeft_0_from = data.get("to_bottomLeft_0_from");
			this.to_bottomLeft_0_from = new To_bottomLeft_0_fromRel(to_bottomLeft_0_from);
		}
		
		
		public class FigNode {
			public String colour;
			
			public FigNode(Value fig) {
				if(!fig.get("colour").isNull())
					this.colour = fig.get("colour").asString();
			}
		}
		
		public class Fig_standsOn_0_fromRel {
		
			public Fig_standsOn_0_fromRel(Value fig_standsOn_0_from) {
			}
		}
		public class Fig_standsOn_1_toRel {
		
			public Fig_standsOn_1_toRel(Value fig_standsOn_1_to) {
			}
		}
		public class FromNode {
			
			public FromNode(Value from) {
			}
		}
		
		public class ToNode {
			
			public ToNode(Value to) {
			}
		}
		
		public class To_bottomLeft_0_fromRel {
		
			public To_bottomLeft_0_fromRel(Value to_bottomLeft_0_from) {
			}
		}
	}
	
	public class MoveBishopUpRightMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public MoveBishopUpRightMask setFig(Long value) {
			nodeMask.put("fig", value);
			return this;
		}
		public MoveBishopUpRightMask setFigColour(String value) {
			attributeMask.put("fig.colour", value);
			return this;
		}
		public MoveBishopUpRightMask setFrom(Long value) {
			nodeMask.put("from", value);
			return this;
		}
		public MoveBishopUpRightMask setTo(Long value) {
			nodeMask.put("to", value);
			return this;
		}
	}
	
	//:~> platform:/resource/Chess/src/FigureMoves.msl#//@entities.15
	public MoveBishopDownLeftAccess getRule_MoveBishopDownLeft() {
		return new MoveBishopDownLeftAccess();
	}
	
	public class MoveBishopDownLeftAccess extends NeoRuleAccess<MoveBishopDownLeftData,MoveBishopDownLeftMask> {
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(15);
			return new NeoRule(r, builder);
		}
		
		@Override
		public NeoRule rule(MoveBishopDownLeftMask mask) {
			var r = (Rule) spec.getEntities().get(15);
			return new NeoRule(r, builder, mask);
		}
		
		@Override
		public MoveBishopDownLeftData data(NeoMatch m) {
			return new MoveBishopDownLeftData(m);
		}
		
		@Override
		public MoveBishopDownLeftMask mask() {
			return new MoveBishopDownLeftMask();
		}
	}
	
	public class MoveBishopDownLeftData extends NeoData {
		public final FigNode fig;
		public final Fig_standsOn_0_fromRel fig_standsOn_0_from;
		public final Fig_standsOn_1_toRel fig_standsOn_1_to;
		public final FromNode from;
		public final From_bottomLeft_0_toRel from_bottomLeft_0_to;
		public final ToNode to;
		
		public MoveBishopDownLeftData(NeoMatch m) {
			var data = m.getData();
			var fig = data.get("fig");
			this.fig = new FigNode(fig);
			var fig_standsOn_0_from = data.get("fig_standsOn_0_from");
			this.fig_standsOn_0_from = new Fig_standsOn_0_fromRel(fig_standsOn_0_from);
			var fig_standsOn_1_to = data.get("fig_standsOn_1_to");
			this.fig_standsOn_1_to = new Fig_standsOn_1_toRel(fig_standsOn_1_to);
			var from = data.get("from");
			this.from = new FromNode(from);
			var from_bottomLeft_0_to = data.get("from_bottomLeft_0_to");
			this.from_bottomLeft_0_to = new From_bottomLeft_0_toRel(from_bottomLeft_0_to);
			var to = data.get("to");
			this.to = new ToNode(to);
		}
		
		
		public class FigNode {
			public String colour;
			
			public FigNode(Value fig) {
				if(!fig.get("colour").isNull())
					this.colour = fig.get("colour").asString();
			}
		}
		
		public class Fig_standsOn_0_fromRel {
		
			public Fig_standsOn_0_fromRel(Value fig_standsOn_0_from) {
			}
		}
		public class Fig_standsOn_1_toRel {
		
			public Fig_standsOn_1_toRel(Value fig_standsOn_1_to) {
			}
		}
		public class FromNode {
			
			public FromNode(Value from) {
			}
		}
		
		public class From_bottomLeft_0_toRel {
		
			public From_bottomLeft_0_toRel(Value from_bottomLeft_0_to) {
			}
		}
		public class ToNode {
			
			public ToNode(Value to) {
			}
		}
		
	}
	
	public class MoveBishopDownLeftMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public MoveBishopDownLeftMask setFig(Long value) {
			nodeMask.put("fig", value);
			return this;
		}
		public MoveBishopDownLeftMask setFigColour(String value) {
			attributeMask.put("fig.colour", value);
			return this;
		}
		public MoveBishopDownLeftMask setFrom(Long value) {
			nodeMask.put("from", value);
			return this;
		}
		public MoveBishopDownLeftMask setTo(Long value) {
			nodeMask.put("to", value);
			return this;
		}
	}
	
	//:~> platform:/resource/Chess/src/FigureMoves.msl#//@entities.16
	public MoveBishopDownRightAccess getRule_MoveBishopDownRight() {
		return new MoveBishopDownRightAccess();
	}
	
	public class MoveBishopDownRightAccess extends NeoRuleAccess<MoveBishopDownRightData,MoveBishopDownRightMask> {
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(16);
			return new NeoRule(r, builder);
		}
		
		@Override
		public NeoRule rule(MoveBishopDownRightMask mask) {
			var r = (Rule) spec.getEntities().get(16);
			return new NeoRule(r, builder, mask);
		}
		
		@Override
		public MoveBishopDownRightData data(NeoMatch m) {
			return new MoveBishopDownRightData(m);
		}
		
		@Override
		public MoveBishopDownRightMask mask() {
			return new MoveBishopDownRightMask();
		}
	}
	
	public class MoveBishopDownRightData extends NeoData {
		public final FigNode fig;
		public final Fig_standsOn_0_fromRel fig_standsOn_0_from;
		public final Fig_standsOn_1_toRel fig_standsOn_1_to;
		public final FromNode from;
		public final From_bottomRight_0_toRel from_bottomRight_0_to;
		public final ToNode to;
		
		public MoveBishopDownRightData(NeoMatch m) {
			var data = m.getData();
			var fig = data.get("fig");
			this.fig = new FigNode(fig);
			var fig_standsOn_0_from = data.get("fig_standsOn_0_from");
			this.fig_standsOn_0_from = new Fig_standsOn_0_fromRel(fig_standsOn_0_from);
			var fig_standsOn_1_to = data.get("fig_standsOn_1_to");
			this.fig_standsOn_1_to = new Fig_standsOn_1_toRel(fig_standsOn_1_to);
			var from = data.get("from");
			this.from = new FromNode(from);
			var from_bottomRight_0_to = data.get("from_bottomRight_0_to");
			this.from_bottomRight_0_to = new From_bottomRight_0_toRel(from_bottomRight_0_to);
			var to = data.get("to");
			this.to = new ToNode(to);
		}
		
		
		public class FigNode {
			public String colour;
			
			public FigNode(Value fig) {
				if(!fig.get("colour").isNull())
					this.colour = fig.get("colour").asString();
			}
		}
		
		public class Fig_standsOn_0_fromRel {
		
			public Fig_standsOn_0_fromRel(Value fig_standsOn_0_from) {
			}
		}
		public class Fig_standsOn_1_toRel {
		
			public Fig_standsOn_1_toRel(Value fig_standsOn_1_to) {
			}
		}
		public class FromNode {
			
			public FromNode(Value from) {
			}
		}
		
		public class From_bottomRight_0_toRel {
		
			public From_bottomRight_0_toRel(Value from_bottomRight_0_to) {
			}
		}
		public class ToNode {
			
			public ToNode(Value to) {
			}
		}
		
	}
	
	public class MoveBishopDownRightMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public MoveBishopDownRightMask setFig(Long value) {
			nodeMask.put("fig", value);
			return this;
		}
		public MoveBishopDownRightMask setFigColour(String value) {
			attributeMask.put("fig.colour", value);
			return this;
		}
		public MoveBishopDownRightMask setFrom(Long value) {
			nodeMask.put("from", value);
			return this;
		}
		public MoveBishopDownRightMask setTo(Long value) {
			nodeMask.put("to", value);
			return this;
		}
	}
}
