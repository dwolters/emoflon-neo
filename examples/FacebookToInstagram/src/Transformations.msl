import "platform:/resource/FacebookToInstagram/src/Languages.msl"

tripleGrammar FacebookToInstagramGrammar {
	source {
		FacebookLanguage
	}
	
	target {
		InstagramLanguage
	}
	
	correspondence {
		FacebookLanguage.Network <-NetworkToNetwork-> InstagramLanguage.Network
		
		FacebookLanguage.User <-FbUserToInUser-> InstagramLanguage.User
	}
	
	rules {
		// Axioms
		NetworkToNetworkIslandRule
		UserToUserIslandRule
		
		// Connect users to networks
		UserNetworkBridgeRule
		
		// Handle friendship/followership
		HandleIntraNetworkFollowers
		IgnoreIntraNetworkFollowers
		IgnoreInterNetworkFollowers
		
		// Ignore all extra relationships
		FriendsParentsIgnoreRule
		FriendsSpouseIgnoreRule
		FriendsSiblingsIgnoreRule		
	}
}

abstract tripleRule Followers : FacebookToInstagramGrammar {
	source {
		n : Network {
			-users-> fn
		}
		
		fu : User
		fn : User
	}
	
	target {
		iu : User 
		
		in : User 
	}
	
	correspondence {
		fu <-:FbUserToInUser-> iu
		
		fn <-:FbUserToInUser-> in
	}
}

tripleRule HandleIntraNetworkFollowers : FacebookToInstagramGrammar -> Followers {
	source {
		n : Network {
			-users-> $fu
			++ -friendships-> fri
		}
		
		++ fri : Friendship {
			++ -friends-> $fu
			++ -friends-> $fn
		}
	}
	
	target {
		iu : User {
			++ -follows->$in
		}
	}
} forbid src(NoDoubleFriendshipFacebook) && trg(NoRedundantFollowershipInstagram) && trg(NoDoubleFollowershipInstagram)

pattern NoDoubleFriendshipFacebook {
	n:FacebookLanguage.Network {
		-friendships->other
	}
	
	fn : FacebookLanguage.User
	
	fu : FacebookLanguage.User
	
	other : Friendship {
		-friends-> fn
		-friends-> fu
	}
}

pattern NoDoubleFollowershipInstagram {
	in : InstagramLanguage.User {
		-follows-> iu
	}
	
	iu : InstagramLanguage.User
}

pattern NoRedundantFollowershipInstagram -> NoDoubleFollowershipInstagram[in -> iu, iu -> in]

abstract tripleRule UserRelationIgnoreRule : FacebookToInstagramGrammar {
	source {
		fu : User
		
		fn : User
	}
}

tripleRule FriendsParentsIgnoreRule : FacebookToInstagramGrammar -> UserRelationIgnoreRule {
	source {
		fu : User {
			++ -parents-> $fn
		}
	}
} forbid src(NoDoubleParent)

pattern NoDoubleParent {
	fn:FacebookLanguage.User
	
	fu : FacebookLanguage.User {
		-parents-> fn
	}
}

tripleRule FriendsSpouseIgnoreRule : FacebookToInstagramGrammar -> UserRelationIgnoreRule {
	source {
		fu : User {
			++ -spouse-> $fn
		}
	}
} forbid src(NoDoubleSpouse)

pattern NoDoubleSpouse {
	fn:FacebookLanguage.User
	
	fu : FacebookLanguage.User {
		-spouse-> fn
	}
}

tripleRule FriendsSiblingsIgnoreRule : FacebookToInstagramGrammar -> UserRelationIgnoreRule {
	source {
		fu : User {
			++ -siblings-> $fn
		}
	}
} forbid src(NoDoubleSibling)

pattern NoDoubleSibling {
	fn:FacebookLanguage.User
	
	fu : FacebookLanguage.User {
		-siblings-> fn
	}
}

tripleRule IgnoreInterNetworkFollowers : FacebookToInstagramGrammar -> Followers {
	source {
		nu : Network {
			-users-> $fu
		}
	}
	
	target {	
		in : User {
			++ -follows-> $iu
		}
	}
} 
//FIXME [Mario]
//forbid trg(NoDoubleFollowershipInstagram)

tripleRule IgnoreIntraNetworkFollowers : FacebookToInstagramGrammar {
	target {
		iu : User {
			-follows-> in
		}
		
		in : User {
			++ -follows-> iu
		}
	}
} 
// FIXME[Mario]
//forbid trg(NoDoubleFollowershipInstagram)

tripleRule NetworkToNetworkIslandRule : FacebookToInstagramGrammar {
	source {
		++ fl : Network
	}
	
	target {
		++ il : Network
	}
	
	correspondence {
		++ fl <-:NetworkToNetwork-> il
	}
}

tripleRule UserNetworkBridgeRule : FacebookToInstagramGrammar {
	source {
		f : Network {
			++ -users-> fu
		}
		
		fu : User
	}
	
	target {
		i : Network {
			++ -users-> iu
		}
		
		iu : User
	}
	
	correspondence {
		f <-:NetworkToNetwork-> i
		fu <-:FbUserToInUser-> iu
	}
}  forbid src(AlreadyInFBNetwork) && trg(AlreadyInInstNetwork)

pattern AlreadyInFBNetwork {
	f:FacebookLanguage.Network {
		-users->fu
	}
	
	fu:FacebookLanguage.User
}

pattern AlreadyInInstNetwork {
	i:InstagramLanguage.Network {
		-users->iu
	}
	
	iu:InstagramLanguage.User
}

tripleRule UserToUserIslandRule : FacebookToInstagramGrammar {
	source {
		++ flu : User
	}
	
	target {
		++ ilu : User
	}
	
	correspondence {
		++ flu <-:FbUserToInUser-> ilu
	}
}









