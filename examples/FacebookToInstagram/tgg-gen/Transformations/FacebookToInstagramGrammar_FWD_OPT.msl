import "platform:/resource/FacebookToInstagram/src/Facebook.msl"
import "platform:/resource/FacebookToInstagram/src/Instagram.msl"

grammar FacebookToInstagramGrammar__FWD_OPT {
	createTrgModel
	NetworkToNetworkIslandRule
	UserToUserIslandRule
	UserNetworkBridgeRule
	RequestFriendship
	AcceptFriendship
	IgnoreInterNetworkFollowers
	ParentsIgnoreRule
	SpouseIgnoreRule
	SiblingsIgnoreRule
}


rule createTrgModel {
	++ trgM : Model {
		.ename := <__trgModelName>
		++ -conformsTo-> mmInstagramLanguage
	}

	mmInstagramLanguage : MetaModel {
		.ename : "InstagramLanguage"
	}
} when forbid trgModelExists

pattern trgModelExists {
	trgM : Model {
		.ename : <__trgModelName>
	}
}

rule NetworkToNetworkIslandRule {
	srcM : Model {
		.ename : <__srcModelName>
	}
	
	trgM : Model {
		.ename : <__trgModelName>
	}
	
	fl:FacebookLanguage.Network {
		-elementOf->srcM
		++-corr->il
		{
			._type_ := "NetworkToNetwork"
		}
	}

	++il:InstagramLanguage.Network {
		++-elementOf->trgM
		.description : fl::description
	}
} 


rule UserToUserIslandRule {
	srcM : Model {
		.ename : <__srcModelName>
	}
	
	trgM : Model {
		.ename : <__trgModelName>
	}
	
	flu:FacebookLanguage.User {
		-elementOf->srcM
		++-corr->ilu
		{
			._type_ := "FbUserToInUser"
		}
		.name : ilu::name
	}

	++ilu:InstagramLanguage.User {
		++-elementOf->trgM
	}
} 


rule UserNetworkBridgeRule {
	srcM : Model {
		.ename : <__srcModelName>
	}
	
	trgM : Model {
		.ename : <__trgModelName>
	}
	
	f:FacebookLanguage.Network {
		-elementOf->srcM
		-users->fu
		-corr->i
		{
			._type_ : "NetworkToNetwork"
		}
	}
	
	fu:FacebookLanguage.User {
		-elementOf->srcM
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
	}

	i:InstagramLanguage.Network {
		-elementOf->trgM
		++-users->iu
	}
	
	iu:InstagramLanguage.User {
		-elementOf->trgM
	}
} 


rule RequestFriendship {
	
	trgM : Model {
		.ename : <__trgModelName>
	}
	

	iu:InstagramLanguage.User {
		-elementOf->trgM
	}
	
	in:InstagramLanguage.User {
		-elementOf->trgM
		++-follows->iu
	}
} 


rule AcceptFriendship {
	srcM : Model {
		.ename : <__srcModelName>
	}
	
	trgM : Model {
		.ename : <__trgModelName>
	}
	
	fn:FacebookLanguage.User {
		-elementOf->srcM
		-corr->in
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fri:Friendship {
		-elementOf->srcM
		-friends->fn
		-friends->fu
	}
	
	n:FacebookLanguage.Network {
		-elementOf->srcM
		-friendships->fri
		-users->fn
		-users->fu
	}
	
	fu:FacebookLanguage.User {
		-elementOf->srcM
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
	}

	in:InstagramLanguage.User {
		-elementOf->trgM
		++-follows->iu
	}
	
	iu:InstagramLanguage.User {
		-elementOf->trgM
		-follows->in
	}
} 


rule IgnoreInterNetworkFollowers {
	srcM : Model {
		.ename : <__srcModelName>
	}
	
	trgM : Model {
		.ename : <__trgModelName>
	}
	
	nu:FacebookLanguage.Network {
		-elementOf->srcM
		-users->fu
	}
	
	fn:FacebookLanguage.User {
		-elementOf->srcM
		-corr->in
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	n:FacebookLanguage.Network {
		-elementOf->srcM
		-users->fn
	}
	
	fu:FacebookLanguage.User {
		-elementOf->srcM
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
	}

	in:InstagramLanguage.User {
		-elementOf->trgM
		++-follows->iu
	}
	
	iu:InstagramLanguage.User {
		-elementOf->trgM
		-follows->in
	}
} 


rule ParentsIgnoreRule {
	srcM : Model {
		.ename : <__srcModelName>
	}
	
	
	fn:FacebookLanguage.User {
		-elementOf->srcM
	}
	
	fu:FacebookLanguage.User {
		-elementOf->srcM
		-parents->fn
	}

} 


rule SpouseIgnoreRule {
	srcM : Model {
		.ename : <__srcModelName>
	}
	
	
	fu:FacebookLanguage.User {
		-elementOf->srcM
		-spouse->fn
	}
	
	fn:FacebookLanguage.User {
		-elementOf->srcM
		-spouse->fu
	}

} 


rule SiblingsIgnoreRule {
	srcM : Model {
		.ename : <__srcModelName>
	}
	
	
	fn:FacebookLanguage.User {
		-elementOf->srcM
		-siblings->fu
	}
	
	fu:FacebookLanguage.User {
		-elementOf->srcM
		-siblings->fn
	}

} 

