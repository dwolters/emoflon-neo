/** 
 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
 */
package org.emoflon.neo.api.org.emoflon.benchmark.org.emoflon.ibex.neo.benchmark.exttype2doc.concsync;

import org.emoflon.neo.cypher.common.*;
import org.emoflon.neo.cypher.constraints.*;
import org.emoflon.neo.cypher.factories.*;
import org.emoflon.neo.cypher.models.*;
import org.emoflon.neo.cypher.patterns.*;
import org.emoflon.neo.cypher.rules.*;
import org.emoflon.neo.engine.api.patterns.*;
import org.emoflon.neo.engine.api.constraints.*;
import org.emoflon.neo.engine.api.rules.*;
import org.emoflon.neo.emsl.eMSL.*;
import org.emoflon.neo.emsl.util.*;
import org.neo4j.driver.Value;
import org.neo4j.driver.Record;
import org.eclipse.emf.common.util.URI;
import org.emoflon.neo.api.org.emoflon.benchmark.API_Common;
import java.util.Collection;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;
import java.util.Optional;
import java.time.LocalDate;

@SuppressWarnings("unused")
public class API_ExtType2Doc_ConcSync_Rules {
	private EMSL_Spec spec;
	private NeoCoreBuilder builder;

	/** Use this constructor for default values */
	public API_ExtType2Doc_ConcSync_Rules(NeoCoreBuilder builder) {
		this(builder, API_Common.PLATFORM_RESOURCE_URI, API_Common.PLATFORM_PLUGIN_URI, API_Common.NEOCORE_URI_INSTALLED);
	}

	/** Use this constructor to configure values for loading EMSL files */
	public API_ExtType2Doc_ConcSync_Rules(NeoCoreBuilder builder, String platformResourceURIRoot, String platformPluginURIRoot, String neocoreURI){
		this((EMSL_Spec) EMSLUtil.loadSpecification("platform:/resource/org.emoflon.benchmark/src/org/emoflon/ibex/neo/benchmark/exttype2doc/concsync/ExtType2Doc_ConcSync_Rules.msl", platformResourceURIRoot, platformPluginURIRoot, neocoreURI), builder);
	}

	public API_ExtType2Doc_ConcSync_Rules(EMSL_Spec spec, NeoCoreBuilder builder) {
		this.spec = spec;
		this.builder = builder;
	}

	//:~> platform:/resource/org.emoflon.benchmark/src/org/emoflon/ibex/neo/benchmark/exttype2doc/concsync/ExtType2Doc_ConcSync_Rules.msl#//@entities.0
	public AttributeConflictAccess getRule_AttributeConflict() {
		return new AttributeConflictAccess();
	}
	
	public class AttributeConflictAccess extends NeoRuleCoAccess<AttributeConflictData, AttributeConflictCoData, AttributeConflictMask> {
		public final String _T1 = "T1";
		public final String _D1 = "D1";
		
		public final String _param__typeName = "typeName";
		public final String _param__docName = "docName";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(0);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<AttributeConflictData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new AttributeConflictData(d));
		}
			
		@Override
		public Stream<AttributeConflictCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new AttributeConflictCoData(d));
		}
		
		@Override
		public AttributeConflictMask mask() {
			return new AttributeConflictMask();
		}
	}
	
	public class AttributeConflictData extends NeoData {
		public AttributeConflictData(Record data) {
		
		}
	}
	
	public class AttributeConflictCoData extends NeoData {
		public AttributeConflictCoData(Record data) {
		
		}
	}
	
	public class AttributeConflictMask extends NeoMask {
	}
	
	//:~> platform:/resource/org.emoflon.benchmark/src/org/emoflon/ibex/neo/benchmark/exttype2doc/concsync/ExtType2Doc_ConcSync_Rules.msl#//@entities.1
	public MoveConflictAccess getRule_MoveConflict() {
		return new MoveConflictAccess();
	}
	
	public class MoveConflictAccess extends NeoRuleCoAccess<MoveConflictData, MoveConflictCoData, MoveConflictMask> {
		public final String _T1 = "T1";
		public final String _T2 = "T2";
		public final String _T3 = "T3";
		public final String _T4 = "T4";
		public final String _D1 = "D1";
		public final String _D2 = "D2";
		public final String _D3 = "D3";
		public final String _D4 = "D4";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(1);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MoveConflictData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveConflictData(d));
		}
			
		@Override
		public Stream<MoveConflictCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveConflictCoData(d));
		}
		
		@Override
		public MoveConflictMask mask() {
			return new MoveConflictMask();
		}
	}
	
	public class MoveConflictData extends NeoData {
		public MoveConflictData(Record data) {
		
		}
	}
	
	public class MoveConflictCoData extends NeoData {
		public MoveConflictCoData(Record data) {
		
		}
	}
	
	public class MoveConflictMask extends NeoMask {
	}
	
	//:~> platform:/resource/org.emoflon.benchmark/src/org/emoflon/ibex/neo/benchmark/exttype2doc/concsync/ExtType2Doc_ConcSync_Rules.msl#//@entities.2
	public DeletePreserveConflictAccess getRule_DeletePreserveConflict() {
		return new DeletePreserveConflictAccess();
	}
	
	public class DeletePreserveConflictAccess extends NeoRuleCoAccess<DeletePreserveConflictData, DeletePreserveConflictCoData, DeletePreserveConflictMask> {
		public final String _T1 = "T1";
		public final String _T2 = "T2";
		public final String _T3 = "T3";
		public final String _T4 = "T4";
		public final String _D1 = "D1";
		public final String _D2 = "D2";
		public final String _D3 = "D3";
		public final String _D4 = "D4";
		public final String _E1 = "E1";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(2);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<DeletePreserveConflictData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new DeletePreserveConflictData(d));
		}
			
		@Override
		public Stream<DeletePreserveConflictCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new DeletePreserveConflictCoData(d));
		}
		
		@Override
		public DeletePreserveConflictMask mask() {
			return new DeletePreserveConflictMask();
		}
	}
	
	public class DeletePreserveConflictData extends NeoData {
		public DeletePreserveConflictData(Record data) {
		
		}
	}
	
	public class DeletePreserveConflictCoData extends NeoData {
		public DeletePreserveConflictCoData(Record data) {
		
		}
	}
	
	public class DeletePreserveConflictMask extends NeoMask {
	}
	
	//:~> platform:/resource/org.emoflon.benchmark/src/org/emoflon/ibex/neo/benchmark/exttype2doc/concsync/ExtType2Doc_ConcSync_Rules.msl#//@entities.3
	public MultiplicityConflictUpperAccess getRule_MultiplicityConflictUpper() {
		return new MultiplicityConflictUpperAccess();
	}
	
	public class MultiplicityConflictUpperAccess extends NeoRuleCoAccess<MultiplicityConflictUpperData, MultiplicityConflictUpperCoData, MultiplicityConflictUpperMask> {
		public final String _M1 = "M1";
		public final String _J1 = "J1";
		public final String _J2 = "J2";
		public final String _E1 = "E1";
		public final String _A1 = "A1";
		public final String _A3 = "A3";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(3);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MultiplicityConflictUpperData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MultiplicityConflictUpperData(d));
		}
			
		@Override
		public Stream<MultiplicityConflictUpperCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MultiplicityConflictUpperCoData(d));
		}
		
		@Override
		public MultiplicityConflictUpperMask mask() {
			return new MultiplicityConflictUpperMask();
		}
	}
	
	public class MultiplicityConflictUpperData extends NeoData {
		public MultiplicityConflictUpperData(Record data) {
		
		}
	}
	
	public class MultiplicityConflictUpperCoData extends NeoData {
		public MultiplicityConflictUpperCoData(Record data) {
		
		}
	}
	
	public class MultiplicityConflictUpperMask extends NeoMask {
	}
	
	//:~> platform:/resource/org.emoflon.benchmark/src/org/emoflon/ibex/neo/benchmark/exttype2doc/concsync/ExtType2Doc_ConcSync_Rules.msl#//@entities.4
	public MultiplicityConflictLowerAccess getRule_MultiplicityConflictLower() {
		return new MultiplicityConflictLowerAccess();
	}
	
	public class MultiplicityConflictLowerAccess extends NeoRuleCoAccess<MultiplicityConflictLowerData, MultiplicityConflictLowerCoData, MultiplicityConflictLowerMask> {
		public final String _M1 = "M1";
		public final String _J1 = "J1";
		public final String _J2 = "J2";
		public final String _E1 = "E1";
		public final String _A1 = "A1";
		public final String _A2 = "A2";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(4);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MultiplicityConflictLowerData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MultiplicityConflictLowerData(d));
		}
			
		@Override
		public Stream<MultiplicityConflictLowerCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MultiplicityConflictLowerCoData(d));
		}
		
		@Override
		public MultiplicityConflictLowerMask mask() {
			return new MultiplicityConflictLowerMask();
		}
	}
	
	public class MultiplicityConflictLowerData extends NeoData {
		public MultiplicityConflictLowerData(Record data) {
		
		}
	}
	
	public class MultiplicityConflictLowerCoData extends NeoData {
		public MultiplicityConflictLowerCoData(Record data) {
		
		}
	}
	
	public class MultiplicityConflictLowerMask extends NeoMask {
	}
}
