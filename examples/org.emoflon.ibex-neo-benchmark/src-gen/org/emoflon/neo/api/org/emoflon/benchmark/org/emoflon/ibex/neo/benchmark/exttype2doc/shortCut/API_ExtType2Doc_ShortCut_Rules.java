/** 
 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
 */
package org.emoflon.neo.api.org.emoflon.benchmark.org.emoflon.ibex.neo.benchmark.exttype2doc.shortCut;

import org.emoflon.neo.cypher.common.*;
import org.emoflon.neo.cypher.constraints.*;
import org.emoflon.neo.cypher.factories.*;
import org.emoflon.neo.cypher.models.*;
import org.emoflon.neo.cypher.patterns.*;
import org.emoflon.neo.cypher.rules.*;
import org.emoflon.neo.engine.api.patterns.*;
import org.emoflon.neo.engine.api.constraints.*;
import org.emoflon.neo.engine.api.rules.*;
import org.emoflon.neo.emsl.eMSL.*;
import org.emoflon.neo.emsl.util.*;
import org.neo4j.driver.Value;
import org.neo4j.driver.Record;
import org.eclipse.emf.common.util.URI;
import org.emoflon.neo.api.org.emoflon.benchmark.API_Common;
import java.util.Collection;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;
import java.util.Optional;
import java.time.LocalDate;

@SuppressWarnings("unused")
public class API_ExtType2Doc_ShortCut_Rules {
	private EMSL_Spec spec;
	private NeoCoreBuilder builder;

	/** Use this constructor for default values */
	public API_ExtType2Doc_ShortCut_Rules(NeoCoreBuilder builder) {
		this(builder, API_Common.PLATFORM_RESOURCE_URI, API_Common.PLATFORM_PLUGIN_URI, API_Common.NEOCORE_URI_INSTALLED);
	}

	/** Use this constructor to configure values for loading EMSL files */
	public API_ExtType2Doc_ShortCut_Rules(NeoCoreBuilder builder, String platformResourceURIRoot, String platformPluginURIRoot, String neocoreURI){
		this((EMSL_Spec) EMSLUtil.loadSpecification("platform:/resource/org.emoflon.benchmark/src/org/emoflon/ibex/neo/benchmark/exttype2doc/shortCut/ExtType2Doc_ShortCut_Rules.msl", platformResourceURIRoot, platformPluginURIRoot, neocoreURI), builder);
	}

	public API_ExtType2Doc_ShortCut_Rules(EMSL_Spec spec, NeoCoreBuilder builder) {
		this.spec = spec;
		this.builder = builder;
	}

	//:~> platform:/resource/org.emoflon.benchmark/src/org/emoflon/ibex/neo/benchmark/exttype2doc/shortCut/ExtType2Doc_ShortCut_Rules.msl#//@entities.0
	public MovePackageAccess getRule_MovePackage() {
		return new MovePackageAccess();
	}
	
	public class MovePackageAccess extends NeoRuleCoAccess<MovePackageData, MovePackageCoData, MovePackageMask> {
		public final String _P0 = "P0";
		public final String _P1 = "P1";
		public final String _P2 = "P2";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(0);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MovePackageData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MovePackageData(d));
		}
			
		@Override
		public Stream<MovePackageCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MovePackageCoData(d));
		}
		
		@Override
		public MovePackageMask mask() {
			return new MovePackageMask();
		}
	}
	
	public class MovePackageData extends NeoData {
		public MovePackageData(Record data) {
		
		}
	}
	
	public class MovePackageCoData extends NeoData {
		public MovePackageCoData(Record data) {
		
		}
	}
	
	public class MovePackageMask extends NeoMask {
	}
	
	//:~> platform:/resource/org.emoflon.benchmark/src/org/emoflon/ibex/neo/benchmark/exttype2doc/shortCut/ExtType2Doc_ShortCut_Rules.msl#//@entities.1
	public MoveTypeRoot_N2Access getRule_MoveTypeRoot_N2() {
		return new MoveTypeRoot_N2Access();
	}
	
	public class MoveTypeRoot_N2Access extends NeoRuleCoAccess<MoveTypeRoot_N2Data, MoveTypeRoot_N2CoData, MoveTypeRoot_N2Mask> {
		public final String _P0 = "P0";
		public final String _P1 = "P1";
		public final String _P2 = "P2";
		public final String _T1 = "T1";
		public final String _T2 = "T2";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(1);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MoveTypeRoot_N2Data> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveTypeRoot_N2Data(d));
		}
			
		@Override
		public Stream<MoveTypeRoot_N2CoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveTypeRoot_N2CoData(d));
		}
		
		@Override
		public MoveTypeRoot_N2Mask mask() {
			return new MoveTypeRoot_N2Mask();
		}
	}
	
	public class MoveTypeRoot_N2Data extends NeoData {
		public MoveTypeRoot_N2Data(Record data) {
		
		}
	}
	
	public class MoveTypeRoot_N2CoData extends NeoData {
		public MoveTypeRoot_N2CoData(Record data) {
		
		}
	}
	
	public class MoveTypeRoot_N2Mask extends NeoMask {
	}
	
	//:~> platform:/resource/org.emoflon.benchmark/src/org/emoflon/ibex/neo/benchmark/exttype2doc/shortCut/ExtType2Doc_ShortCut_Rules.msl#//@entities.2
	public OtherTypeInPackageAccess getPattern_OtherTypeInPackage() {
		return new OtherTypeInPackageAccess();
	}
	
	public class OtherTypeInPackageAccess extends NeoPatternAccess<OtherTypeInPackageData, OtherTypeInPackageMask> {
		public final String _P2 = "P2";
		public final String _T = "T";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(2);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<OtherTypeInPackageData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new OtherTypeInPackageData(d));
		}
		
		@Override
		public OtherTypeInPackageMask mask() {
			return new OtherTypeInPackageMask();
		}
	}
	
	public class OtherTypeInPackageData extends NeoData {
		public OtherTypeInPackageData(Record data) {
			
		}
	}
	
	public class OtherTypeInPackageMask extends NeoMask {
	}
	
	//:~> platform:/resource/org.emoflon.benchmark/src/org/emoflon/ibex/neo/benchmark/exttype2doc/shortCut/ExtType2Doc_ShortCut_Rules.msl#//@entities.3
	public MoveTypeLeafAccess getRule_MoveTypeLeaf() {
		return new MoveTypeLeafAccess();
	}
	
	public class MoveTypeLeafAccess extends NeoRuleCoAccess<MoveTypeLeafData, MoveTypeLeafCoData, MoveTypeLeafMask> {
		public final String _P0 = "P0";
		public final String _P1 = "P1";
		public final String _P2 = "P2";
		public final String _T1 = "T1";
		public final String _T2 = "T2";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(3);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MoveTypeLeafData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveTypeLeafData(d));
		}
			
		@Override
		public Stream<MoveTypeLeafCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveTypeLeafCoData(d));
		}
		
		@Override
		public MoveTypeLeafMask mask() {
			return new MoveTypeLeafMask();
		}
	}
	
	public class MoveTypeLeafData extends NeoData {
		public MoveTypeLeafData(Record data) {
		
		}
	}
	
	public class MoveTypeLeafCoData extends NeoData {
		public MoveTypeLeafCoData(Record data) {
		
		}
	}
	
	public class MoveTypeLeafMask extends NeoMask {
	}
	
	//:~> platform:/resource/org.emoflon.benchmark/src/org/emoflon/ibex/neo/benchmark/exttype2doc/shortCut/ExtType2Doc_ShortCut_Rules.msl#//@entities.4
	public OtherTypeInheritingAccess getPattern_OtherTypeInheriting() {
		return new OtherTypeInheritingAccess();
	}
	
	public class OtherTypeInheritingAccess extends NeoPatternAccess<OtherTypeInheritingData, OtherTypeInheritingMask> {
		public final String _T2 = "T2";
		public final String _T = "T";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(4);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<OtherTypeInheritingData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new OtherTypeInheritingData(d));
		}
		
		@Override
		public OtherTypeInheritingMask mask() {
			return new OtherTypeInheritingMask();
		}
	}
	
	public class OtherTypeInheritingData extends NeoData {
		public OtherTypeInheritingData(Record data) {
			
		}
	}
	
	public class OtherTypeInheritingMask extends NeoMask {
	}
	
	//:~> platform:/resource/org.emoflon.benchmark/src/org/emoflon/ibex/neo/benchmark/exttype2doc/shortCut/ExtType2Doc_ShortCut_Rules.msl#//@entities.5
	public CreateTypeRootAccess getRule_CreateTypeRoot() {
		return new CreateTypeRootAccess();
	}
	
	public class CreateTypeRootAccess extends NeoRuleCoAccess<CreateTypeRootData, CreateTypeRootCoData, CreateTypeRootMask> {
		public final String _P0 = "P0";
		public final String _T0 = "T0";
		public final String _T1 = "T1";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(5);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<CreateTypeRootData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateTypeRootData(d));
		}
			
		@Override
		public Stream<CreateTypeRootCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateTypeRootCoData(d));
		}
		
		@Override
		public CreateTypeRootMask mask() {
			return new CreateTypeRootMask();
		}
	}
	
	public class CreateTypeRootData extends NeoData {
		public CreateTypeRootData(Record data) {
		
		}
	}
	
	public class CreateTypeRootCoData extends NeoData {
		public CreateTypeRootCoData(Record data) {
		
		}
	}
	
	public class CreateTypeRootMask extends NeoMask {
	}
	
	//:~> platform:/resource/org.emoflon.benchmark/src/org/emoflon/ibex/neo/benchmark/exttype2doc/shortCut/ExtType2Doc_ShortCut_Rules.msl#//@entities.6
	public OtherTypeExtendedAccess getPattern_OtherTypeExtended() {
		return new OtherTypeExtendedAccess();
	}
	
	public class OtherTypeExtendedAccess extends NeoPatternAccess<OtherTypeExtendedData, OtherTypeExtendedMask> {
		public final String _T1 = "T1";
		public final String _T = "T";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(6);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<OtherTypeExtendedData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new OtherTypeExtendedData(d));
		}
		
		@Override
		public OtherTypeExtendedMask mask() {
			return new OtherTypeExtendedMask();
		}
	}
	
	public class OtherTypeExtendedData extends NeoData {
		public OtherTypeExtendedData(Record data) {
			
		}
	}
	
	public class OtherTypeExtendedMask extends NeoMask {
	}
	
	//:~> platform:/resource/org.emoflon.benchmark/src/org/emoflon/ibex/neo/benchmark/exttype2doc/shortCut/ExtType2Doc_ShortCut_Rules.msl#//@entities.7
	public CreatePackageRootAccess getRule_CreatePackageRoot() {
		return new CreatePackageRootAccess();
	}
	
	public class CreatePackageRootAccess extends NeoRuleCoAccess<CreatePackageRootData, CreatePackageRootCoData, CreatePackageRootMask> {
		public final String _P0 = "P0";
		public final String _P1 = "P1";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(7);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<CreatePackageRootData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreatePackageRootData(d));
		}
			
		@Override
		public Stream<CreatePackageRootCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreatePackageRootCoData(d));
		}
		
		@Override
		public CreatePackageRootMask mask() {
			return new CreatePackageRootMask();
		}
	}
	
	public class CreatePackageRootData extends NeoData {
		public CreatePackageRootData(Record data) {
		
		}
	}
	
	public class CreatePackageRootCoData extends NeoData {
		public CreatePackageRootCoData(Record data) {
		
		}
	}
	
	public class CreatePackageRootMask extends NeoMask {
	}
	
	//:~> platform:/resource/org.emoflon.benchmark/src/org/emoflon/ibex/neo/benchmark/exttype2doc/shortCut/ExtType2Doc_ShortCut_Rules.msl#//@entities.8
	public OtherSuperPackageAccess getPattern_OtherSuperPackage() {
		return new OtherSuperPackageAccess();
	}
	
	public class OtherSuperPackageAccess extends NeoPatternAccess<OtherSuperPackageData, OtherSuperPackageMask> {
		public final String _P1 = "P1";
		public final String _P = "P";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(8);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<OtherSuperPackageData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new OtherSuperPackageData(d));
		}
		
		@Override
		public OtherSuperPackageMask mask() {
			return new OtherSuperPackageMask();
		}
	}
	
	public class OtherSuperPackageData extends NeoData {
		public OtherSuperPackageData(Record data) {
			
		}
	}
	
	public class OtherSuperPackageMask extends NeoMask {
	}
}
