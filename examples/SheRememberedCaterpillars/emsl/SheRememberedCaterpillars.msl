metamodel SheRememberedCaterpillars {
	Character : ColouredThingOnPlatform
	
	Platform
	
	Bridge : ColouredThing {		
		-feet(2..2)->Platform
 	}
	
	Wall : ColouredThingOnPlatform
	
	abstract ColouredThing {
		.colour : COLOUR
	}
	
	abstract IsOnAPlatform {
		-on(1..1)->Platform
	}
	
	abstract ColouredThingOnPlatform : ColouredThing, IsOnAPlatform
	
	enum COLOUR {
		RED
		BLUE
		PURPLE
	}
}

model SimpleGame {
	a:Character {
		.colour : enum::BLUE
		 
		-on->p1
	}
	
	w:Wall {
		.colour : enum::RED
		
		-on->p2
	}
	
	b:Bridge {
		.colour : enum::BLUE
		
		-feet->p1
		-feet->p2
	}
	
	p1:Platform
	p2:Platform
}

pattern canCrossBridge {
	a:Character {
		-on->p1
	}
	
	b:Bridge {
		.colour : a::colour  
		
		-feet->p1
		-feet->p2
	}
	
	p1:Platform
	p2:Platform
}

pattern everythingBlue {
	a:Character {
		.colour : enum::BLUE
		-on->p1
	}
	
	b:Bridge {
		.colour : enum::BLUE
		
		-feet->p1
		-feet->p2
	}
	
	p1:Platform
	p2:Platform
}

pattern strangeBridge {
	b:Bridge {
		-feet->p
		-feet->p
	}
	
	p:Platform
}

pattern standingInFrontOfBridge {
	a:Character {
		-on->p
	}
	
	b:Bridge {
		-feet->p
	}
	
	p:Platform
}

pattern colouredThingOnPlatform {
	c:ColouredThingOnPlatform {
		-on->p
	}
	
	p:Platform
}

pattern colouredThing {
	c:ColouredThing
}

pattern noWayForward {
	a:Character {
		-on->p
	}
	
	p:Platform
} when forbid standingInFrontOfBridge

pattern noDeadEnd {
	a:Character {
		-on->p1
	}
	
	p1:Platform
} when enforce bridge

pattern bridge {
	p1:Platform
	p2:Platform
	
	b:Bridge {
		-feet->p1
		-feet->p2
	}
}

constraint noStrangeBridges = forbid strangeBridge

constraint strangeBridges = !noStrangeBridges

constraint canCrossBridgeSomewhere = enforce canCrossBridge

constraint alwaysOnPlatform = if colouredThing then colouredThingOnPlatform

constraint nothingBlue = forbid everythingBlue