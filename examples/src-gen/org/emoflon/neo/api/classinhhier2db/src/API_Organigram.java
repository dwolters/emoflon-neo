/** 
 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
 */
package org.emoflon.neo.api.classinhhier2db.src;

import org.emoflon.neo.cypher.common.*;
import org.emoflon.neo.cypher.constraints.*;
import org.emoflon.neo.cypher.factories.*;
import org.emoflon.neo.cypher.models.*;
import org.emoflon.neo.cypher.patterns.*;
import org.emoflon.neo.cypher.rules.*;
import org.emoflon.neo.engine.api.patterns.*;
import org.emoflon.neo.engine.api.constraints.*;
import org.emoflon.neo.engine.api.rules.*;
import org.emoflon.neo.emsl.eMSL.*;
import org.emoflon.neo.emsl.util.*;
import org.neo4j.driver.Value;
import org.neo4j.driver.Record;
import org.eclipse.emf.common.util.URI;
import org.emoflon.neo.api.classinhhier2db.API_Common;
import java.util.Collection;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;
import java.util.Optional;
import java.time.LocalDate;

@SuppressWarnings("unused")
public class API_Organigram {
	private EMSL_Spec spec;
	private NeoCoreBuilder builder;

	/** Use this constructor for default values */
	public API_Organigram(NeoCoreBuilder builder) {
		this(builder, API_Common.PLATFORM_RESOURCE_URI, API_Common.PLATFORM_PLUGIN_URI, API_Common.NEOCORE_URI_INSTALLED);
	}

	/** Use this constructor to configure values for loading EMSL files */
	public API_Organigram(NeoCoreBuilder builder, String platformResourceURIRoot, String platformPluginURIRoot, String neocoreURI){
		this((EMSL_Spec) EMSLUtil.loadSpecification("platform:/resource/ClassInhHier2DB/Organigram/src/Organigram.msl", platformResourceURIRoot, platformPluginURIRoot, neocoreURI), builder);
	}

	public API_Organigram(EMSL_Spec spec, NeoCoreBuilder builder) {
		this.spec = spec;
		this.builder = builder;
	}

	//:~> platform:/resource/ClassInhHier2DB/Organigram/src/Organigram.msl#//@entities.0
	public Metamodel getMetamodel_Company(){
		return (Metamodel) spec.getEntities().get(0);
	}
	
	public static final String Company__Company = "Company__Company";
	public static final String Company__Employee = "Company__Employee";
	public static final String Company__Staff = "Company__Staff";
	public static final String Company__CEO = "Company__CEO";
	public static final String Company__Manager = "Company__Manager";
	public static final String Company__ProductionManager = "Company__ProductionManager";
	public static final String Company__MarketingManager = "Company__MarketingManager";
	public static final String Company__Foreman = "Company__Foreman";
	public static final String Company__Worker = "Company__Worker";
	public static final String Company__SalesOfficer = "Company__SalesOfficer";
	public static final String Company__SalesPerson = "Company__SalesPerson";
	
	//:~> platform:/resource/ClassInhHier2DB/Organigram/src/Organigram.msl#//@entities.1
	public Model getModel_TestEmployee(){
		return (Model) spec.getEntities().get(1);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Organigram/src/Organigram.msl#//@entities.2
	public Model getModel_SimpleCompany(){
		return (Model) spec.getEntities().get(2);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Organigram/src/Organigram.msl#//@entities.3
	public IsEmployedAccess getPattern_IsEmployed() {
		return new IsEmployedAccess();
	}
	
	public class IsEmployedAccess extends NeoPatternAccess<IsEmployedData, IsEmployedMask> {
		public final String _company = "company";
		public final String _manager = "manager";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(3);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<IsEmployedData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new IsEmployedData(d));
		}
		
		@Override
		public IsEmployedMask mask() {
			return new IsEmployedMask();
		}
	}
	
	public class IsEmployedData extends NeoData {
		public IsEmployedData(Record data) {
			
		}
	}
	
	public class IsEmployedMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Organigram/src/Organigram.msl#//@entities.4
	public ManagersMustBeEmployedAccess getPattern_ManagersMustBeEmployed() {
		return new ManagersMustBeEmployedAccess();
	}
	
	public class ManagersMustBeEmployedAccess extends NeoPatternAccess<ManagersMustBeEmployedData, ManagersMustBeEmployedMask> {
		public final String _manager = "manager";
		public final String _company = "company";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(4);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<ManagersMustBeEmployedData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new ManagersMustBeEmployedData(d));
		}
		
		@Override
		public ManagersMustBeEmployedMask mask() {
			return new ManagersMustBeEmployedMask();
		}
	}
	
	public class ManagersMustBeEmployedData extends NeoData {
		public ManagersMustBeEmployedData(Record data) {
			
		}
	}
	
	public class ManagersMustBeEmployedMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Organigram/src/Organigram.msl#//@entities.5
	public CeoIsEmployedAccess getPattern_CeoIsEmployed() {
		return new CeoIsEmployedAccess();
	}
	
	public class CeoIsEmployedAccess extends NeoPatternAccess<CeoIsEmployedData, CeoIsEmployedMask> {
		public final String _company = "company";
		public final String _ceo = "ceo";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(5);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<CeoIsEmployedData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CeoIsEmployedData(d));
		}
		
		@Override
		public CeoIsEmployedMask mask() {
			return new CeoIsEmployedMask();
		}
	}
	
	public class CeoIsEmployedData extends NeoData {
		public CeoIsEmployedData(Record data) {
			
		}
	}
	
	public class CeoIsEmployedMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Organigram/src/Organigram.msl#//@entities.6
	public CeoAndManagerEmployedAccess getPattern_CeoAndManagerEmployed() {
		return new CeoAndManagerEmployedAccess();
	}
	
	public class CeoAndManagerEmployedAccess extends NeoPatternAccess<CeoAndManagerEmployedData, CeoAndManagerEmployedMask> {
		public final String _manager = "manager";
		public final String _company = "company";
		public final String _ceo = "ceo";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(6);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<CeoAndManagerEmployedData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CeoAndManagerEmployedData(d));
		}
		
		@Override
		public CeoAndManagerEmployedMask mask() {
			return new CeoAndManagerEmployedMask();
		}
	}
	
	public class CeoAndManagerEmployedData extends NeoData {
		public CeoAndManagerEmployedData(Record data) {
			
		}
	}
	
	public class CeoAndManagerEmployedMask extends NeoMask {
	}
}
