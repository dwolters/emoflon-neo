/** 
 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
 */
package org.emoflon.neo.api.classinhhier2db.src;

import org.emoflon.neo.cypher.common.*;
import org.emoflon.neo.cypher.constraints.*;
import org.emoflon.neo.cypher.factories.*;
import org.emoflon.neo.cypher.models.*;
import org.emoflon.neo.cypher.patterns.*;
import org.emoflon.neo.cypher.rules.*;
import org.emoflon.neo.engine.api.patterns.*;
import org.emoflon.neo.engine.api.constraints.*;
import org.emoflon.neo.engine.api.rules.*;
import org.emoflon.neo.emsl.eMSL.*;
import org.emoflon.neo.emsl.util.*;
import org.neo4j.driver.Value;
import org.neo4j.driver.Record;
import org.eclipse.emf.common.util.URI;
import org.emoflon.neo.api.classinhhier2db.API_Common;
import java.util.Collection;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;
import java.util.Optional;
import java.time.LocalDate;

@SuppressWarnings("unused")
public class API_PacMan {
	private EMSL_Spec spec;
	private NeoCoreBuilder builder;

	/** Use this constructor for default values */
	public API_PacMan(NeoCoreBuilder builder) {
		this(builder, API_Common.PLATFORM_RESOURCE_URI, API_Common.PLATFORM_PLUGIN_URI, API_Common.NEOCORE_URI_INSTALLED);
	}

	/** Use this constructor to configure values for loading EMSL files */
	public API_PacMan(NeoCoreBuilder builder, String platformResourceURIRoot, String platformPluginURIRoot, String neocoreURI){
		this((EMSL_Spec) EMSLUtil.loadSpecification("platform:/resource/ClassInhHier2DB/PacMan/src/PacMan.msl", platformResourceURIRoot, platformPluginURIRoot, neocoreURI), builder);
	}

	public API_PacMan(EMSL_Spec spec, NeoCoreBuilder builder) {
		this.spec = spec;
		this.builder = builder;
	}

	//:~> platform:/resource/ClassInhHier2DB/PacMan/src/PacMan.msl#//@entities.0
	public Metamodel getMetamodel_PacMan(){
		return (Metamodel) spec.getEntities().get(0);
	}
	
	public static final String PacMan__Figure = "PacMan__Figure";
	public static final String PacMan__Field = "PacMan__Field";
	public static final String PacMan__Marble = "PacMan__Marble";
	public static final String PacMan__PacMan = "PacMan__PacMan";
	public static final String PacMan__Ghost = "PacMan__Ghost";
	
	//:~> platform:/resource/ClassInhHier2DB/PacMan/src/PacMan.msl#//@entities.1
	public Model getModel_SimplePacManGame(){
		return (Model) spec.getEntities().get(1);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/PacMan/src/PacMan.msl#//@entities.2
	public OnePacManAccess getPattern_OnePacMan() {
		return new OnePacManAccess();
	}
	
	public class OnePacManAccess extends NeoPatternAccess<OnePacManData, OnePacManMask> {
		public final String _p = "p";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(2);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<OnePacManData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new OnePacManData(d));
		}
		
		@Override
		public OnePacManMask mask() {
			return new OnePacManMask();
		}
	}
	
	public class OnePacManData extends NeoData {
		public final PNode _p;
		
		public OnePacManData(Record data) {
			var _p = data.get("p");
			this._p = new PNode(_p);
		}
		
		
		public class PNode {
			public int _marbles;
			public String _ename;
			
			public PNode(Value _p) {
				if(!_p.get("marbles").isNull())
					this._marbles = _p.get("marbles").asInt();
				if(!_p.get("ename").isNull())
					this._ename = _p.get("ename").asString();
			}
		}
		
	}
	
	public class OnePacManMask extends NeoMask {
		public OnePacManMask setP(Long value) {
			nodeMask.put("p", value);
			return this;
		}
		public OnePacManMask setPMarbles(int value) {
			attributeMask.put("p.marbles", value);
			return this;
		}
		public OnePacManMask setPEname(String value) {
			attributeMask.put("p.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/ClassInhHier2DB/PacMan/src/PacMan.msl#//@entities.3
	public FigureOnFieldAccess getPattern_FigureOnField() {
		return new FigureOnFieldAccess();
	}
	
	public class FigureOnFieldAccess extends NeoPatternAccess<FigureOnFieldData, FigureOnFieldMask> {
		public final String _fig = "fig";
		public final String _field = "field";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(3);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<FigureOnFieldData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new FigureOnFieldData(d));
		}
		
		@Override
		public FigureOnFieldMask mask() {
			return new FigureOnFieldMask();
		}
	}
	
	public class FigureOnFieldData extends NeoData {
		public final FigNode _fig;
		public final Fig_standsOn_0_fieldRel _fig_standsOn_0_field;
		public final FieldNode _field;
		
		public FigureOnFieldData(Record data) {
			var _fig = data.get("fig");
			this._fig = new FigNode(_fig);
			var _fig_standsOn_0_field = data.get("fig_standsOn_0_field");
			this._fig_standsOn_0_field = new Fig_standsOn_0_fieldRel(_fig_standsOn_0_field);
			var _field = data.get("field");
			this._field = new FieldNode(_field);
		}
		
		
		public class FigNode {
			public String _ename;
			
			public FigNode(Value _fig) {
				if(!_fig.get("ename").isNull())
					this._ename = _fig.get("ename").asString();
			}
		}
		
		public class Fig_standsOn_0_fieldRel {
		
			public Fig_standsOn_0_fieldRel(Value _fig_standsOn_0_field) {
			}
		}
		public class FieldNode {
			public String _ename;
			
			public FieldNode(Value _field) {
				if(!_field.get("ename").isNull())
					this._ename = _field.get("ename").asString();
			}
		}
		
	}
	
	public class FigureOnFieldMask extends NeoMask {
		public FigureOnFieldMask setFig(Long value) {
			nodeMask.put("fig", value);
			return this;
		}
		public FigureOnFieldMask setFigEname(String value) {
			attributeMask.put("fig.ename", value);
			return this;
		}
		public FigureOnFieldMask setField(Long value) {
			nodeMask.put("field", value);
			return this;
		}
		public FigureOnFieldMask setFieldEname(String value) {
			attributeMask.put("field.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/ClassInhHier2DB/PacMan/src/PacMan.msl#//@entities.4
	public OneGhostAccess getPattern_OneGhost() {
		return new OneGhostAccess();
	}
	
	public class OneGhostAccess extends NeoPatternAccess<OneGhostData, OneGhostMask> {
		public final String _g = "g";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(4);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<OneGhostData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new OneGhostData(d));
		}
		
		@Override
		public OneGhostMask mask() {
			return new OneGhostMask();
		}
	}
	
	public class OneGhostData extends NeoData {
		public final GNode _g;
		
		public OneGhostData(Record data) {
			var _g = data.get("g");
			this._g = new GNode(_g);
		}
		
		
		public class GNode {
			public String _ename;
			
			public GNode(Value _g) {
				if(!_g.get("ename").isNull())
					this._ename = _g.get("ename").asString();
			}
		}
		
	}
	
	public class OneGhostMask extends NeoMask {
		public OneGhostMask setG(Long value) {
			nodeMask.put("g", value);
			return this;
		}
		public OneGhostMask setGEname(String value) {
			attributeMask.put("g.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/ClassInhHier2DB/PacMan/src/PacMan.msl#//@entities.5
	public PacManOnFieldAccess getPattern_PacManOnField() {
		return new PacManOnFieldAccess();
	}
	
	public class PacManOnFieldAccess extends NeoPatternAccess<PacManOnFieldData, PacManOnFieldMask> {
		public final String _field = "field";
		public final String _fig = "fig";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(5);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<PacManOnFieldData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new PacManOnFieldData(d));
		}
		
		@Override
		public PacManOnFieldMask mask() {
			return new PacManOnFieldMask();
		}
	}
	
	public class PacManOnFieldData extends NeoData {
		public final FieldNode _field;
		public final FigNode _fig;
		public final Fig_standsOn_0_fieldRel _fig_standsOn_0_field;
		
		public PacManOnFieldData(Record data) {
			var _field = data.get("field");
			this._field = new FieldNode(_field);
			var _fig = data.get("fig");
			this._fig = new FigNode(_fig);
			var _fig_standsOn_0_field = data.get("fig_standsOn_0_field");
			this._fig_standsOn_0_field = new Fig_standsOn_0_fieldRel(_fig_standsOn_0_field);
		}
		
		
		public class FieldNode {
			public String _ename;
			
			public FieldNode(Value _field) {
				if(!_field.get("ename").isNull())
					this._ename = _field.get("ename").asString();
			}
		}
		
		public class FigNode {
			public int _marbles;
			public String _ename;
			
			public FigNode(Value _fig) {
				if(!_fig.get("marbles").isNull())
					this._marbles = _fig.get("marbles").asInt();
				if(!_fig.get("ename").isNull())
					this._ename = _fig.get("ename").asString();
			}
		}
		
		public class Fig_standsOn_0_fieldRel {
		
			public Fig_standsOn_0_fieldRel(Value _fig_standsOn_0_field) {
			}
		}
	}
	
	public class PacManOnFieldMask extends NeoMask {
		public PacManOnFieldMask setField(Long value) {
			nodeMask.put("field", value);
			return this;
		}
		public PacManOnFieldMask setFieldEname(String value) {
			attributeMask.put("field.ename", value);
			return this;
		}
		public PacManOnFieldMask setFig(Long value) {
			nodeMask.put("fig", value);
			return this;
		}
		public PacManOnFieldMask setFigMarbles(int value) {
			attributeMask.put("fig.marbles", value);
			return this;
		}
		public PacManOnFieldMask setFigEname(String value) {
			attributeMask.put("fig.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/ClassInhHier2DB/PacMan/src/PacMan.msl#//@entities.6
	public GhostOnFieldAccess getPattern_GhostOnField() {
		return new GhostOnFieldAccess();
	}
	
	public class GhostOnFieldAccess extends NeoPatternAccess<GhostOnFieldData, GhostOnFieldMask> {
		public final String _field = "field";
		public final String _fig = "fig";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(6);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<GhostOnFieldData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new GhostOnFieldData(d));
		}
		
		@Override
		public GhostOnFieldMask mask() {
			return new GhostOnFieldMask();
		}
	}
	
	public class GhostOnFieldData extends NeoData {
		public final FieldNode _field;
		public final FigNode _fig;
		public final Fig_standsOn_0_fieldRel _fig_standsOn_0_field;
		
		public GhostOnFieldData(Record data) {
			var _field = data.get("field");
			this._field = new FieldNode(_field);
			var _fig = data.get("fig");
			this._fig = new FigNode(_fig);
			var _fig_standsOn_0_field = data.get("fig_standsOn_0_field");
			this._fig_standsOn_0_field = new Fig_standsOn_0_fieldRel(_fig_standsOn_0_field);
		}
		
		
		public class FieldNode {
			public String _ename;
			
			public FieldNode(Value _field) {
				if(!_field.get("ename").isNull())
					this._ename = _field.get("ename").asString();
			}
		}
		
		public class FigNode {
			public String _ename;
			
			public FigNode(Value _fig) {
				if(!_fig.get("ename").isNull())
					this._ename = _fig.get("ename").asString();
			}
		}
		
		public class Fig_standsOn_0_fieldRel {
		
			public Fig_standsOn_0_fieldRel(Value _fig_standsOn_0_field) {
			}
		}
	}
	
	public class GhostOnFieldMask extends NeoMask {
		public GhostOnFieldMask setField(Long value) {
			nodeMask.put("field", value);
			return this;
		}
		public GhostOnFieldMask setFieldEname(String value) {
			attributeMask.put("field.ename", value);
			return this;
		}
		public GhostOnFieldMask setFig(Long value) {
			nodeMask.put("fig", value);
			return this;
		}
		public GhostOnFieldMask setFigEname(String value) {
			attributeMask.put("fig.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/ClassInhHier2DB/PacMan/src/PacMan.msl#//@entities.7
	public PacManAndGhostOnFieldsAccess getPattern_PacManAndGhostOnFields() {
		return new PacManAndGhostOnFieldsAccess();
	}
	
	public class PacManAndGhostOnFieldsAccess extends NeoPatternAccess<PacManAndGhostOnFieldsData, PacManAndGhostOnFieldsMask> {
		public final String _p = "p";
		public final String _f10 = "f10";
		public final String _f00 = "f00";
		public final String _g = "g";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(7);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<PacManAndGhostOnFieldsData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new PacManAndGhostOnFieldsData(d));
		}
		
		@Override
		public PacManAndGhostOnFieldsMask mask() {
			return new PacManAndGhostOnFieldsMask();
		}
	}
	
	public class PacManAndGhostOnFieldsData extends NeoData {
		public final PNode _p;
		public final P_standsOn_0_f00Rel _p_standsOn_0_f00;
		public final F10Node _f10;
		public final F00Node _f00;
		public final GNode _g;
		public final G_standsOn_0_f10Rel _g_standsOn_0_f10;
		
		public PacManAndGhostOnFieldsData(Record data) {
			var _p = data.get("p");
			this._p = new PNode(_p);
			var _p_standsOn_0_f00 = data.get("p_standsOn_0_f00");
			this._p_standsOn_0_f00 = new P_standsOn_0_f00Rel(_p_standsOn_0_f00);
			var _f10 = data.get("f10");
			this._f10 = new F10Node(_f10);
			var _f00 = data.get("f00");
			this._f00 = new F00Node(_f00);
			var _g = data.get("g");
			this._g = new GNode(_g);
			var _g_standsOn_0_f10 = data.get("g_standsOn_0_f10");
			this._g_standsOn_0_f10 = new G_standsOn_0_f10Rel(_g_standsOn_0_f10);
		}
		
		
		public class PNode {
			public int _marbles;
			public String _ename;
			
			public PNode(Value _p) {
				if(!_p.get("marbles").isNull())
					this._marbles = _p.get("marbles").asInt();
				if(!_p.get("ename").isNull())
					this._ename = _p.get("ename").asString();
			}
		}
		
		public class P_standsOn_0_f00Rel {
		
			public P_standsOn_0_f00Rel(Value _p_standsOn_0_f00) {
			}
		}
		public class F10Node {
			public String _ename;
			
			public F10Node(Value _f10) {
				if(!_f10.get("ename").isNull())
					this._ename = _f10.get("ename").asString();
			}
		}
		
		public class F00Node {
			public String _ename;
			
			public F00Node(Value _f00) {
				if(!_f00.get("ename").isNull())
					this._ename = _f00.get("ename").asString();
			}
		}
		
		public class GNode {
			public String _ename;
			
			public GNode(Value _g) {
				if(!_g.get("ename").isNull())
					this._ename = _g.get("ename").asString();
			}
		}
		
		public class G_standsOn_0_f10Rel {
		
			public G_standsOn_0_f10Rel(Value _g_standsOn_0_f10) {
			}
		}
	}
	
	public class PacManAndGhostOnFieldsMask extends NeoMask {
		public PacManAndGhostOnFieldsMask setP(Long value) {
			nodeMask.put("p", value);
			return this;
		}
		public PacManAndGhostOnFieldsMask setPMarbles(int value) {
			attributeMask.put("p.marbles", value);
			return this;
		}
		public PacManAndGhostOnFieldsMask setPEname(String value) {
			attributeMask.put("p.ename", value);
			return this;
		}
		public PacManAndGhostOnFieldsMask setF10(Long value) {
			nodeMask.put("f10", value);
			return this;
		}
		public PacManAndGhostOnFieldsMask setF10Ename(String value) {
			attributeMask.put("f10.ename", value);
			return this;
		}
		public PacManAndGhostOnFieldsMask setF00(Long value) {
			nodeMask.put("f00", value);
			return this;
		}
		public PacManAndGhostOnFieldsMask setF00Ename(String value) {
			attributeMask.put("f00.ename", value);
			return this;
		}
		public PacManAndGhostOnFieldsMask setG(Long value) {
			nodeMask.put("g", value);
			return this;
		}
		public PacManAndGhostOnFieldsMask setGEname(String value) {
			attributeMask.put("g.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/ClassInhHier2DB/PacMan/src/PacMan.msl#//@entities.8
	public PacManAndGhostOnNeighbouringFieldsAccess getPattern_PacManAndGhostOnNeighbouringFields() {
		return new PacManAndGhostOnNeighbouringFieldsAccess();
	}
	
	public class PacManAndGhostOnNeighbouringFieldsAccess extends NeoPatternAccess<PacManAndGhostOnNeighbouringFieldsData, PacManAndGhostOnNeighbouringFieldsMask> {
		public final String _p = "p";
		public final String _f10 = "f10";
		public final String _f00 = "f00";
		public final String _g = "g";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(8);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<PacManAndGhostOnNeighbouringFieldsData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new PacManAndGhostOnNeighbouringFieldsData(d));
		}
		
		@Override
		public PacManAndGhostOnNeighbouringFieldsMask mask() {
			return new PacManAndGhostOnNeighbouringFieldsMask();
		}
	}
	
	public class PacManAndGhostOnNeighbouringFieldsData extends NeoData {
		public final PNode _p;
		public final P_standsOn_0_f00Rel _p_standsOn_0_f00;
		public final F10Node _f10;
		public final F00Node _f00;
		public final F00_bottom_0_f10Rel _f00_bottom_0_f10;
		public final GNode _g;
		public final G_standsOn_0_f10Rel _g_standsOn_0_f10;
		
		public PacManAndGhostOnNeighbouringFieldsData(Record data) {
			var _p = data.get("p");
			this._p = new PNode(_p);
			var _p_standsOn_0_f00 = data.get("p_standsOn_0_f00");
			this._p_standsOn_0_f00 = new P_standsOn_0_f00Rel(_p_standsOn_0_f00);
			var _f10 = data.get("f10");
			this._f10 = new F10Node(_f10);
			var _f00 = data.get("f00");
			this._f00 = new F00Node(_f00);
			var _f00_bottom_0_f10 = data.get("f00_bottom_0_f10");
			this._f00_bottom_0_f10 = new F00_bottom_0_f10Rel(_f00_bottom_0_f10);
			var _g = data.get("g");
			this._g = new GNode(_g);
			var _g_standsOn_0_f10 = data.get("g_standsOn_0_f10");
			this._g_standsOn_0_f10 = new G_standsOn_0_f10Rel(_g_standsOn_0_f10);
		}
		
		
		public class PNode {
			public int _marbles;
			public String _ename;
			
			public PNode(Value _p) {
				if(!_p.get("marbles").isNull())
					this._marbles = _p.get("marbles").asInt();
				if(!_p.get("ename").isNull())
					this._ename = _p.get("ename").asString();
			}
		}
		
		public class P_standsOn_0_f00Rel {
		
			public P_standsOn_0_f00Rel(Value _p_standsOn_0_f00) {
			}
		}
		public class F10Node {
			public String _ename;
			
			public F10Node(Value _f10) {
				if(!_f10.get("ename").isNull())
					this._ename = _f10.get("ename").asString();
			}
		}
		
		public class F00Node {
			public String _ename;
			
			public F00Node(Value _f00) {
				if(!_f00.get("ename").isNull())
					this._ename = _f00.get("ename").asString();
			}
		}
		
		public class F00_bottom_0_f10Rel {
		
			public F00_bottom_0_f10Rel(Value _f00_bottom_0_f10) {
			}
		}
		public class GNode {
			public String _ename;
			
			public GNode(Value _g) {
				if(!_g.get("ename").isNull())
					this._ename = _g.get("ename").asString();
			}
		}
		
		public class G_standsOn_0_f10Rel {
		
			public G_standsOn_0_f10Rel(Value _g_standsOn_0_f10) {
			}
		}
	}
	
	public class PacManAndGhostOnNeighbouringFieldsMask extends NeoMask {
		public PacManAndGhostOnNeighbouringFieldsMask setP(Long value) {
			nodeMask.put("p", value);
			return this;
		}
		public PacManAndGhostOnNeighbouringFieldsMask setPMarbles(int value) {
			attributeMask.put("p.marbles", value);
			return this;
		}
		public PacManAndGhostOnNeighbouringFieldsMask setPEname(String value) {
			attributeMask.put("p.ename", value);
			return this;
		}
		public PacManAndGhostOnNeighbouringFieldsMask setF10(Long value) {
			nodeMask.put("f10", value);
			return this;
		}
		public PacManAndGhostOnNeighbouringFieldsMask setF10Ename(String value) {
			attributeMask.put("f10.ename", value);
			return this;
		}
		public PacManAndGhostOnNeighbouringFieldsMask setF00(Long value) {
			nodeMask.put("f00", value);
			return this;
		}
		public PacManAndGhostOnNeighbouringFieldsMask setF00Ename(String value) {
			attributeMask.put("f00.ename", value);
			return this;
		}
		public PacManAndGhostOnNeighbouringFieldsMask setG(Long value) {
			nodeMask.put("g", value);
			return this;
		}
		public PacManAndGhostOnNeighbouringFieldsMask setGEname(String value) {
			attributeMask.put("g.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/ClassInhHier2DB/PacMan/src/PacMan.msl#//@entities.9
	public RelatedFieldsAccess getPattern_RelatedFields() {
		return new RelatedFieldsAccess();
	}
	
	public class RelatedFieldsAccess extends NeoPatternAccess<RelatedFieldsData, RelatedFieldsMask> {
		public final String _f1 = "f1";
		public final String _f2 = "f2";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(9);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<RelatedFieldsData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new RelatedFieldsData(d));
		}
		
		@Override
		public RelatedFieldsMask mask() {
			return new RelatedFieldsMask();
		}
	}
	
	public class RelatedFieldsData extends NeoData {
		public final F1Node _f1;
		public final F2Node _f2;
		
		public RelatedFieldsData(Record data) {
			var _f1 = data.get("f1");
			this._f1 = new F1Node(_f1);
			var _f2 = data.get("f2");
			this._f2 = new F2Node(_f2);
		}
		
		
		public class F1Node {
			public String _ename;
			
			public F1Node(Value _f1) {
				if(!_f1.get("ename").isNull())
					this._ename = _f1.get("ename").asString();
			}
		}
		
		public class F2Node {
			public String _ename;
			
			public F2Node(Value _f2) {
				if(!_f2.get("ename").isNull())
					this._ename = _f2.get("ename").asString();
			}
		}
		
	}
	
	public class RelatedFieldsMask extends NeoMask {
		public RelatedFieldsMask setF1(Long value) {
			nodeMask.put("f1", value);
			return this;
		}
		public RelatedFieldsMask setF1Ename(String value) {
			attributeMask.put("f1.ename", value);
			return this;
		}
		public RelatedFieldsMask setF2(Long value) {
			nodeMask.put("f2", value);
			return this;
		}
		public RelatedFieldsMask setF2Ename(String value) {
			attributeMask.put("f2.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/ClassInhHier2DB/PacMan/src/PacMan.msl#//@entities.10
	public TwoPacManOnBoardAccess getPattern_TwoPacManOnBoard() {
		return new TwoPacManOnBoardAccess();
	}
	
	public class TwoPacManOnBoardAccess extends NeoPatternAccess<TwoPacManOnBoardData, TwoPacManOnBoardMask> {
		public final String _p = "p";
		public final String _p2 = "p2";
		public final String _f10 = "f10";
		public final String _f01 = "f01";
		public final String _f00 = "f00";
		public final String _g = "g";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(10);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<TwoPacManOnBoardData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new TwoPacManOnBoardData(d));
		}
		
		@Override
		public TwoPacManOnBoardMask mask() {
			return new TwoPacManOnBoardMask();
		}
	}
	
	public class TwoPacManOnBoardData extends NeoData {
		public final PNode _p;
		public final P_standsOn_0_f00Rel _p_standsOn_0_f00;
		public final P2Node _p2;
		public final P2_standsOn_0_f01Rel _p2_standsOn_0_f01;
		public final F10Node _f10;
		public final F01Node _f01;
		public final F00Node _f00;
		public final GNode _g;
		public final G_standsOn_0_f10Rel _g_standsOn_0_f10;
		
		public TwoPacManOnBoardData(Record data) {
			var _p = data.get("p");
			this._p = new PNode(_p);
			var _p_standsOn_0_f00 = data.get("p_standsOn_0_f00");
			this._p_standsOn_0_f00 = new P_standsOn_0_f00Rel(_p_standsOn_0_f00);
			var _p2 = data.get("p2");
			this._p2 = new P2Node(_p2);
			var _p2_standsOn_0_f01 = data.get("p2_standsOn_0_f01");
			this._p2_standsOn_0_f01 = new P2_standsOn_0_f01Rel(_p2_standsOn_0_f01);
			var _f10 = data.get("f10");
			this._f10 = new F10Node(_f10);
			var _f01 = data.get("f01");
			this._f01 = new F01Node(_f01);
			var _f00 = data.get("f00");
			this._f00 = new F00Node(_f00);
			var _g = data.get("g");
			this._g = new GNode(_g);
			var _g_standsOn_0_f10 = data.get("g_standsOn_0_f10");
			this._g_standsOn_0_f10 = new G_standsOn_0_f10Rel(_g_standsOn_0_f10);
		}
		
		
		public class PNode {
			public int _marbles;
			public String _ename;
			
			public PNode(Value _p) {
				if(!_p.get("marbles").isNull())
					this._marbles = _p.get("marbles").asInt();
				if(!_p.get("ename").isNull())
					this._ename = _p.get("ename").asString();
			}
		}
		
		public class P_standsOn_0_f00Rel {
		
			public P_standsOn_0_f00Rel(Value _p_standsOn_0_f00) {
			}
		}
		public class P2Node {
			public int _marbles;
			public String _ename;
			
			public P2Node(Value _p2) {
				if(!_p2.get("marbles").isNull())
					this._marbles = _p2.get("marbles").asInt();
				if(!_p2.get("ename").isNull())
					this._ename = _p2.get("ename").asString();
			}
		}
		
		public class P2_standsOn_0_f01Rel {
		
			public P2_standsOn_0_f01Rel(Value _p2_standsOn_0_f01) {
			}
		}
		public class F10Node {
			public String _ename;
			
			public F10Node(Value _f10) {
				if(!_f10.get("ename").isNull())
					this._ename = _f10.get("ename").asString();
			}
		}
		
		public class F01Node {
			public String _ename;
			
			public F01Node(Value _f01) {
				if(!_f01.get("ename").isNull())
					this._ename = _f01.get("ename").asString();
			}
		}
		
		public class F00Node {
			public String _ename;
			
			public F00Node(Value _f00) {
				if(!_f00.get("ename").isNull())
					this._ename = _f00.get("ename").asString();
			}
		}
		
		public class GNode {
			public String _ename;
			
			public GNode(Value _g) {
				if(!_g.get("ename").isNull())
					this._ename = _g.get("ename").asString();
			}
		}
		
		public class G_standsOn_0_f10Rel {
		
			public G_standsOn_0_f10Rel(Value _g_standsOn_0_f10) {
			}
		}
	}
	
	public class TwoPacManOnBoardMask extends NeoMask {
		public TwoPacManOnBoardMask setP(Long value) {
			nodeMask.put("p", value);
			return this;
		}
		public TwoPacManOnBoardMask setPMarbles(int value) {
			attributeMask.put("p.marbles", value);
			return this;
		}
		public TwoPacManOnBoardMask setPEname(String value) {
			attributeMask.put("p.ename", value);
			return this;
		}
		public TwoPacManOnBoardMask setP2(Long value) {
			nodeMask.put("p2", value);
			return this;
		}
		public TwoPacManOnBoardMask setP2Marbles(int value) {
			attributeMask.put("p2.marbles", value);
			return this;
		}
		public TwoPacManOnBoardMask setP2Ename(String value) {
			attributeMask.put("p2.ename", value);
			return this;
		}
		public TwoPacManOnBoardMask setF10(Long value) {
			nodeMask.put("f10", value);
			return this;
		}
		public TwoPacManOnBoardMask setF10Ename(String value) {
			attributeMask.put("f10.ename", value);
			return this;
		}
		public TwoPacManOnBoardMask setF01(Long value) {
			nodeMask.put("f01", value);
			return this;
		}
		public TwoPacManOnBoardMask setF01Ename(String value) {
			attributeMask.put("f01.ename", value);
			return this;
		}
		public TwoPacManOnBoardMask setF00(Long value) {
			nodeMask.put("f00", value);
			return this;
		}
		public TwoPacManOnBoardMask setF00Ename(String value) {
			attributeMask.put("f00.ename", value);
			return this;
		}
		public TwoPacManOnBoardMask setG(Long value) {
			nodeMask.put("g", value);
			return this;
		}
		public TwoPacManOnBoardMask setGEname(String value) {
			attributeMask.put("g.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/ClassInhHier2DB/PacMan/src/PacMan.msl#//@entities.11
	public CollectMarbleAccess getRule_CollectMarble() {
		return new CollectMarbleAccess();
	}
	
	public class CollectMarbleAccess extends NeoRuleCoAccess<CollectMarbleData, CollectMarbleCoData, CollectMarbleMask> {
		public final String _pacMan = "pacMan";
		public final String _marble = "marble";
		public final String _from = "from";
		public final String _to = "to";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(11);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<CollectMarbleData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CollectMarbleData(d));
		}
			
		@Override
		public Stream<CollectMarbleCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CollectMarbleCoData(d));
		}
		
		@Override
		public CollectMarbleMask mask() {
			return new CollectMarbleMask();
		}
	}
	
	public class CollectMarbleData extends NeoData {
		public final PacManNode _pacMan;
		public final PacMan_standsOn_0_fromRel _pacMan_standsOn_0_from;
		public final MarbleNode _marble;
		public final Marble_liesOn_0_toRel _marble_liesOn_0_to;
		public final FromNode _from;
		public final From_right_0_toRel _from_right_0_to;
		public final ToNode _to;
		
		public CollectMarbleData(Record data) {
			var _pacMan = data.get("pacMan");
			this._pacMan = new PacManNode(_pacMan);
			var _pacMan_standsOn_0_from = data.get("pacMan_standsOn_0_from");
			this._pacMan_standsOn_0_from = new PacMan_standsOn_0_fromRel(_pacMan_standsOn_0_from);
			var _marble = data.get("marble");
			this._marble = new MarbleNode(_marble);
			var _marble_liesOn_0_to = data.get("marble_liesOn_0_to");
			this._marble_liesOn_0_to = new Marble_liesOn_0_toRel(_marble_liesOn_0_to);
			var _from = data.get("from");
			this._from = new FromNode(_from);
			var _from_right_0_to = data.get("from_right_0_to");
			this._from_right_0_to = new From_right_0_toRel(_from_right_0_to);
			var _to = data.get("to");
			this._to = new ToNode(_to);
		}
		
		
		public class PacManNode {
			public int _marbles;
			public String _ename;
			
			public PacManNode(Value _pacMan) {
				if(!_pacMan.get("marbles").isNull())
					this._marbles = _pacMan.get("marbles").asInt();
				if(!_pacMan.get("ename").isNull())
					this._ename = _pacMan.get("ename").asString();
			}
		}
		
		public class PacMan_standsOn_0_fromRel {
		
			public PacMan_standsOn_0_fromRel(Value _pacMan_standsOn_0_from) {
			}
		}
		public class MarbleNode {
			public String _ename;
			
			public MarbleNode(Value _marble) {
				if(!_marble.get("ename").isNull())
					this._ename = _marble.get("ename").asString();
			}
		}
		
		public class Marble_liesOn_0_toRel {
		
			public Marble_liesOn_0_toRel(Value _marble_liesOn_0_to) {
			}
		}
		public class FromNode {
			public String _ename;
			
			public FromNode(Value _from) {
				if(!_from.get("ename").isNull())
					this._ename = _from.get("ename").asString();
			}
		}
		
		public class From_right_0_toRel {
		
			public From_right_0_toRel(Value _from_right_0_to) {
			}
		}
		public class ToNode {
			public String _ename;
			
			public ToNode(Value _to) {
				if(!_to.get("ename").isNull())
					this._ename = _to.get("ename").asString();
			}
		}
		
	}
	
	public class CollectMarbleCoData extends NeoData {
		public final PacManNode _pacMan;
		public final PacMan_standsOn_1_toRel _pacMan_standsOn_1_to;
		public final FromNode _from;
		public final From_right_0_toRel _from_right_0_to;
		public final ToNode _to;
		
		public CollectMarbleCoData(Record data) {
			var _pacMan = data.get("pacMan");
			this._pacMan = new PacManNode(_pacMan);
			var _pacMan_standsOn_1_to = data.get("pacMan_standsOn_1_to");
			this._pacMan_standsOn_1_to = new PacMan_standsOn_1_toRel(_pacMan_standsOn_1_to);
			var _from = data.get("from");
			this._from = new FromNode(_from);
			var _from_right_0_to = data.get("from_right_0_to");
			this._from_right_0_to = new From_right_0_toRel(_from_right_0_to);
			var _to = data.get("to");
			this._to = new ToNode(_to);
		}
		
		
		public class PacManNode {
			public int _marbles;
			public String _ename;
			
			public PacManNode(Value _pacMan) {
				if(!_pacMan.get("marbles").isNull())
					this._marbles = _pacMan.get("marbles").asInt();
				if(!_pacMan.get("ename").isNull())
					this._ename = _pacMan.get("ename").asString();
			}
		}
		
		public class PacMan_standsOn_1_toRel {
		
			public PacMan_standsOn_1_toRel(Value _pacMan_standsOn_1_to) {
			}
		}
		public class FromNode {
			public String _ename;
			
			public FromNode(Value _from) {
				if(!_from.get("ename").isNull())
					this._ename = _from.get("ename").asString();
			}
		}
		
		public class From_right_0_toRel {
		
			public From_right_0_toRel(Value _from_right_0_to) {
			}
		}
		public class ToNode {
			public String _ename;
			
			public ToNode(Value _to) {
				if(!_to.get("ename").isNull())
					this._ename = _to.get("ename").asString();
			}
		}
		
	}
	
	public class CollectMarbleMask extends NeoMask {
		public CollectMarbleMask setPacMan(Long value) {
			nodeMask.put("pacMan", value);
			return this;
		}
		public CollectMarbleMask setPacManMarbles(int value) {
			attributeMask.put("pacMan.marbles", value);
			return this;
		}
		public CollectMarbleMask setPacManEname(String value) {
			attributeMask.put("pacMan.ename", value);
			return this;
		}
		public CollectMarbleMask setMarble(Long value) {
			nodeMask.put("marble", value);
			return this;
		}
		public CollectMarbleMask setMarbleEname(String value) {
			attributeMask.put("marble.ename", value);
			return this;
		}
		public CollectMarbleMask setFrom(Long value) {
			nodeMask.put("from", value);
			return this;
		}
		public CollectMarbleMask setFromEname(String value) {
			attributeMask.put("from.ename", value);
			return this;
		}
		public CollectMarbleMask setTo(Long value) {
			nodeMask.put("to", value);
			return this;
		}
		public CollectMarbleMask setToEname(String value) {
			attributeMask.put("to.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/ClassInhHier2DB/PacMan/src/PacMan.msl#//@entities.12
	public Model getModel_TranslatedState(){
		return (Model) spec.getEntities().get(12);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/PacMan/src/PacMan.msl#//@entities.13
	public Model getModel_SimpleGameWithMarbles(){
		return (Model) spec.getEntities().get(13);
	}
}
