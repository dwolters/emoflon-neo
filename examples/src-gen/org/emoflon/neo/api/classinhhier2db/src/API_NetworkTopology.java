/** 
 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
 */
package org.emoflon.neo.api.classinhhier2db.src;

import org.emoflon.neo.cypher.common.*;
import org.emoflon.neo.cypher.constraints.*;
import org.emoflon.neo.cypher.factories.*;
import org.emoflon.neo.cypher.models.*;
import org.emoflon.neo.cypher.patterns.*;
import org.emoflon.neo.cypher.rules.*;
import org.emoflon.neo.engine.api.patterns.*;
import org.emoflon.neo.engine.api.constraints.*;
import org.emoflon.neo.engine.api.rules.*;
import org.emoflon.neo.emsl.eMSL.*;
import org.emoflon.neo.emsl.util.*;
import org.neo4j.driver.Value;
import org.neo4j.driver.Record;
import org.eclipse.emf.common.util.URI;
import org.emoflon.neo.api.classinhhier2db.API_Common;
import java.util.Collection;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;
import java.util.Optional;
import java.time.LocalDate;

@SuppressWarnings("unused")
public class API_NetworkTopology {
	private EMSL_Spec spec;
	private NeoCoreBuilder builder;

	/** Use this constructor for default values */
	public API_NetworkTopology(NeoCoreBuilder builder) {
		this(builder, API_Common.PLATFORM_RESOURCE_URI, API_Common.PLATFORM_PLUGIN_URI, API_Common.NEOCORE_URI_INSTALLED);
	}

	/** Use this constructor to configure values for loading EMSL files */
	public API_NetworkTopology(NeoCoreBuilder builder, String platformResourceURIRoot, String platformPluginURIRoot, String neocoreURI){
		this((EMSL_Spec) EMSLUtil.loadSpecification("platform:/resource/ClassInhHier2DB/NetworkTopology/src/NetworkTopology.msl", platformResourceURIRoot, platformPluginURIRoot, neocoreURI), builder);
	}

	public API_NetworkTopology(EMSL_Spec spec, NeoCoreBuilder builder) {
		this.spec = spec;
		this.builder = builder;
	}

	//:~> platform:/resource/ClassInhHier2DB/NetworkTopology/src/NetworkTopology.msl#//@entities.0
	public Metamodel getMetamodel_NetworkTopology(){
		return (Metamodel) spec.getEntities().get(0);
	}
	
	public static final String NetworkTopology__Node = "NetworkTopology__Node";
	public static final String NetworkTopology__TopNode = "NetworkTopology__TopNode";
	
	//:~> platform:/resource/ClassInhHier2DB/NetworkTopology/src/NetworkTopology.msl#//@entities.1
	public PairAccess getPattern_Pair() {
		return new PairAccess();
	}
	
	public class PairAccess extends NeoPatternAccess<PairData, PairMask> {
		public final String _a = "a";
		public final String _b = "b";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(1);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<PairData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new PairData(d));
		}
		
		@Override
		public PairMask mask() {
			return new PairMask();
		}
	}
	
	public class PairData extends NeoData {
		public PairData(Record data) {
			
		}
	}
	
	public class PairMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/NetworkTopology/src/NetworkTopology.msl#//@entities.2
	public TriangleAccess getPattern_Triangle() {
		return new TriangleAccess();
	}
	
	public class TriangleAccess extends NeoPatternAccess<TriangleData, TriangleMask> {
		public final String _t1 = "t1";
		public final String _t2 = "t2";
		public final String _t3 = "t3";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(2);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<TriangleData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new TriangleData(d));
		}
		
		@Override
		public TriangleMask mask() {
			return new TriangleMask();
		}
	}
	
	public class TriangleData extends NeoData {
		public TriangleData(Record data) {
			
		}
	}
	
	public class TriangleMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/NetworkTopology/src/NetworkTopology.msl#//@entities.3
	public RectangleAccess getPattern_Rectangle() {
		return new RectangleAccess();
	}
	
	public class RectangleAccess extends NeoPatternAccess<RectangleData, RectangleMask> {
		public final String _t4 = "t4";
		public final String _t1 = "t1";
		public final String _t2 = "t2";
		public final String _t3 = "t3";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(3);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<RectangleData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new RectangleData(d));
		}
		
		@Override
		public RectangleMask mask() {
			return new RectangleMask();
		}
	}
	
	public class RectangleData extends NeoData {
		public RectangleData(Record data) {
			
		}
	}
	
	public class RectangleMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/NetworkTopology/src/NetworkTopology.msl#//@entities.4
	public PyramidAccess getPattern_Pyramid() {
		return new PyramidAccess();
	}
	
	public class PyramidAccess extends NeoPatternAccess<PyramidData, PyramidMask> {
		public final String _t4 = "t4";
		public final String _t5 = "t5";
		public final String _t6 = "t6";
		public final String _t1 = "t1";
		public final String _t2 = "t2";
		public final String _t3 = "t3";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(4);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<PyramidData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new PyramidData(d));
		}
		
		@Override
		public PyramidMask mask() {
			return new PyramidMask();
		}
	}
	
	public class PyramidData extends NeoData {
		public PyramidData(Record data) {
			
		}
	}
	
	public class PyramidMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/NetworkTopology/src/NetworkTopology.msl#//@entities.5
	public Model getModel_ExampleTopology(){
		return (Model) spec.getEntities().get(5);
	}
}
