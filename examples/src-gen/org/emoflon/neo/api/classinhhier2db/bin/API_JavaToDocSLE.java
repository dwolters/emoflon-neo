/** 
 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
 */
package org.emoflon.neo.api.classinhhier2db.bin;

import org.emoflon.neo.cypher.common.*;
import org.emoflon.neo.cypher.constraints.*;
import org.emoflon.neo.cypher.factories.*;
import org.emoflon.neo.cypher.models.*;
import org.emoflon.neo.cypher.patterns.*;
import org.emoflon.neo.cypher.rules.*;
import org.emoflon.neo.engine.api.patterns.*;
import org.emoflon.neo.engine.api.constraints.*;
import org.emoflon.neo.engine.api.rules.*;
import org.emoflon.neo.emsl.eMSL.*;
import org.emoflon.neo.emsl.util.*;
import org.neo4j.driver.Value;
import org.neo4j.driver.Record;
import org.eclipse.emf.common.util.URI;
import org.emoflon.neo.api.classinhhier2db.API_Common;
import java.util.Collection;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;
import java.util.Optional;
import java.time.LocalDate;

@SuppressWarnings("unused")
public class API_JavaToDocSLE {
	private EMSL_Spec spec;
	private NeoCoreBuilder builder;

	/** Use this constructor for default values */
	public API_JavaToDocSLE(NeoCoreBuilder builder) {
		this(builder, API_Common.PLATFORM_RESOURCE_URI, API_Common.PLATFORM_PLUGIN_URI, API_Common.NEOCORE_URI_INSTALLED);
	}

	/** Use this constructor to configure values for loading EMSL files */
	public API_JavaToDocSLE(NeoCoreBuilder builder, String platformResourceURIRoot, String platformPluginURIRoot, String neocoreURI){
		this((EMSL_Spec) EMSLUtil.loadSpecification("platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl", platformResourceURIRoot, platformPluginURIRoot, neocoreURI), builder);
	}

	public API_JavaToDocSLE(EMSL_Spec spec, NeoCoreBuilder builder) {
		this.spec = spec;
		this.builder = builder;
	}

	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.0
	public void exportMetamodelsForJavaToDocSLE() throws FlattenerException {
		{
			var api = new org.emoflon.neo.api.javatodocsle.metamodels.API_SimpleJavaSLE(builder, API_Common.PLATFORM_RESOURCE_URI, API_Common.PLATFORM_PLUGIN_URI, API_Common.NEOCORE_URI_INSTALLED);
			builder.exportEMSLEntityToNeo4j(api.getMetamodel_SimpleJavaSLE());
		}
		{
			var api = new org.emoflon.neo.api.javatodocsle.metamodels.API_SimpleDocSLE(builder, API_Common.PLATFORM_RESOURCE_URI, API_Common.PLATFORM_PLUGIN_URI, API_Common.NEOCORE_URI_INSTALLED);
			builder.exportEMSLEntityToNeo4j(api.getMetamodel_SimpleDocSLE());
		}
	}
	
	public Collection<TripleRule> getTripleRulesOfJavaToDocSLE(){
		var rules = new HashSet<TripleRule>();
		var rs = spec.eResource().getResourceSet();
		{
			var uri = "platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.1";
			rules.add((TripleRule) rs.getEObject(URI.createURI(uri), true));
		}
		{
			var uri = "platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.2";
			rules.add((TripleRule) rs.getEObject(URI.createURI(uri), true));
		}
		{
			var uri = "platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.3";
			rules.add((TripleRule) rs.getEObject(URI.createURI(uri), true));
		}
		{
			var uri = "platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.4";
			rules.add((TripleRule) rs.getEObject(URI.createURI(uri), true));
		}
		{
			var uri = "platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.5";
			rules.add((TripleRule) rs.getEObject(URI.createURI(uri), true));
		}
		{
			var uri = "platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.6";
			rules.add((TripleRule) rs.getEObject(URI.createURI(uri), true));
		}
		{
			var uri = "platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.7";
			rules.add((TripleRule) rs.getEObject(URI.createURI(uri), true));
		}
		{
			var uri = "platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.8";
			rules.add((TripleRule) rs.getEObject(URI.createURI(uri), true));
		}
		return rules;
	}
	
	public Collection<IConstraint> getConstraintsOfJavaToDocSLE(){
		var constraints = new HashSet<IConstraint>();
		var rs = spec.eResource().getResourceSet();
		{
			var uri = "platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.10";
			var c = (Constraint) rs.getEObject(URI.createURI(uri), true);
			constraints.add(NeoConstraintFactory.createNeoConstraint(c, builder));
		}
		{
			var uri = "platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.12";
			var c = (Constraint) rs.getEObject(URI.createURI(uri), true);
			constraints.add(NeoConstraintFactory.createNeoConstraint(c, builder));
		}
		{
			var uri = "platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.14";
			var c = (Constraint) rs.getEObject(URI.createURI(uri), true);
			constraints.add(NeoConstraintFactory.createNeoConstraint(c, builder));
		}
		{
			var uri = "platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.17";
			var c = (Constraint) rs.getEObject(URI.createURI(uri), true);
			constraints.add(NeoConstraintFactory.createNeoConstraint(c, builder));
		}
		{
			var uri = "platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.20";
			var c = (Constraint) rs.getEObject(URI.createURI(uri), true);
			constraints.add(NeoConstraintFactory.createNeoConstraint(c, builder));
		}
		return constraints;
	}
	
	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.1
	public static final String JavaToDocSLE__ClazzToDocRule = "ClazzToDocRule";
	public static final String JavaToDocSLE__ClazzToDocRule__c = "c";
	public static final String JavaToDocSLE__ClazzToDocRule__d = "d";
	
	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.2
	public static final String JavaToDocSLE__SubClazzToSubDocRule = "SubClazzToSubDocRule";
	public static final String JavaToDocSLE__SubClazzToSubDocRule__c = "c";
	public static final String JavaToDocSLE__SubClazzToSubDocRule__sc = "sc";
	public static final String JavaToDocSLE__SubClazzToSubDocRule__d = "d";
	public static final String JavaToDocSLE__SubClazzToSubDocRule__sd = "sd";
	
	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.3
	public static final String JavaToDocSLE__MethodToEntryRule = "MethodToEntryRule";
	public static final String JavaToDocSLE__MethodToEntryRule__c = "c";
	public static final String JavaToDocSLE__MethodToEntryRule__m = "m";
	public static final String JavaToDocSLE__MethodToEntryRule__d = "d";
	public static final String JavaToDocSLE__MethodToEntryRule__e = "e";
	
	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.4
	public static final String JavaToDocSLE__AddParameterRule = "AddParameterRule";
	public static final String JavaToDocSLE__AddParameterRule__m = "m";
	public static final String JavaToDocSLE__AddParameterRule__p = "p";
	public static final String JavaToDocSLE__AddParameterRule__e = "e";
	
	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.5
	public static final String JavaToDocSLE__FieldToEntryRule = "FieldToEntryRule";
	public static final String JavaToDocSLE__FieldToEntryRule__c = "c";
	public static final String JavaToDocSLE__FieldToEntryRule__f = "f";
	public static final String JavaToDocSLE__FieldToEntryRule__d = "d";
	public static final String JavaToDocSLE__FieldToEntryRule__e = "e";
	
	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.6
	public static final String JavaToDocSLE__AddGlossaryRule = "AddGlossaryRule";
	public static final String JavaToDocSLE__AddGlossaryRule__g = "g";
	
	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.7
	public static final String JavaToDocSLE__LinkGlossaryEntryRule = "LinkGlossaryEntryRule";
	public static final String JavaToDocSLE__LinkGlossaryEntryRule__e = "e";
	public static final String JavaToDocSLE__LinkGlossaryEntryRule__ge = "ge";
	
	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.8
	public static final String JavaToDocSLE__AddGlossaryEntryRule = "AddGlossaryEntryRule";
	public static final String JavaToDocSLE__AddGlossaryEntryRule__g = "g";
	public static final String JavaToDocSLE__AddGlossaryEntryRule__ge = "ge";
	
	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.9
	public TwoGlossariesAccess getPattern_TwoGlossaries() {
		return new TwoGlossariesAccess();
	}
	
	public class TwoGlossariesAccess extends NeoPatternAccess<TwoGlossariesData, TwoGlossariesMask> {
		public final String _g1 = "g1";
		public final String _g2 = "g2";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(9);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<TwoGlossariesData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new TwoGlossariesData(d));
		}
		
		@Override
		public TwoGlossariesMask mask() {
			return new TwoGlossariesMask();
		}
	}
	
	public class TwoGlossariesData extends NeoData {
		public TwoGlossariesData(Record data) {
			
		}
	}
	
	public class TwoGlossariesMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.10
	public IConstraint getConstraint_NoTwoGlossaries() {
		var c = (Constraint) spec.getEntities().get(10);
		return NeoConstraintFactory.createNeoConstraint(c, builder);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.11
	public DoubleGlossaryLinkAccess getPattern_DoubleGlossaryLink() {
		return new DoubleGlossaryLinkAccess();
	}
	
	public class DoubleGlossaryLinkAccess extends NeoPatternAccess<DoubleGlossaryLinkData, DoubleGlossaryLinkMask> {
		public final String _ge = "ge";
		public final String _e = "e";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(11);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<DoubleGlossaryLinkData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new DoubleGlossaryLinkData(d));
		}
		
		@Override
		public DoubleGlossaryLinkMask mask() {
			return new DoubleGlossaryLinkMask();
		}
	}
	
	public class DoubleGlossaryLinkData extends NeoData {
		public DoubleGlossaryLinkData(Record data) {
			
		}
	}
	
	public class DoubleGlossaryLinkMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.12
	public IConstraint getConstraint_NoDoubleGlossaryLink() {
		var c = (Constraint) spec.getEntities().get(12);
		return NeoConstraintFactory.createNeoConstraint(c, builder);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.13
	public TripleInheritanceAccess getPattern_TripleInheritance() {
		return new TripleInheritanceAccess();
	}
	
	public class TripleInheritanceAccess extends NeoPatternAccess<TripleInheritanceData, TripleInheritanceMask> {
		public final String _c1 = "c1";
		public final String _c2 = "c2";
		public final String _c3 = "c3";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(13);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<TripleInheritanceData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new TripleInheritanceData(d));
		}
		
		@Override
		public TripleInheritanceMask mask() {
			return new TripleInheritanceMask();
		}
	}
	
	public class TripleInheritanceData extends NeoData {
		public TripleInheritanceData(Record data) {
			
		}
	}
	
	public class TripleInheritanceMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.14
	public IConstraint getConstraint_NoTripleInheritance() {
		var c = (Constraint) spec.getEntities().get(14);
		return NeoConstraintFactory.createNeoConstraint(c, builder);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.15
	public ADocAccess getPattern_ADoc() {
		return new ADocAccess();
	}
	
	public class ADocAccess extends NeoPatternAccess<ADocData, ADocMask> {
		public final String _d = "d";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(15);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<ADocData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new ADocData(d));
		}
		
		@Override
		public ADocMask mask() {
			return new ADocMask();
		}
	}
	
	public class ADocData extends NeoData {
		public ADocData(Record data) {
			
		}
	}
	
	public class ADocMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.16
	public DocHasEntryAccess getPattern_DocHasEntry() {
		return new DocHasEntryAccess();
	}
	
	public class DocHasEntryAccess extends NeoPatternAccess<DocHasEntryData, DocHasEntryMask> {
		public final String _d = "d";
		public final String _e = "e";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(16);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<DocHasEntryData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new DocHasEntryData(d));
		}
		
		@Override
		public DocHasEntryMask mask() {
			return new DocHasEntryMask();
		}
	}
	
	public class DocHasEntryData extends NeoData {
		public DocHasEntryData(Record data) {
			
		}
	}
	
	public class DocHasEntryMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.17
	public IConstraint getConstraint_NoEmptyDoc() {
		var c = (Constraint) spec.getEntities().get(17);
		return NeoConstraintFactory.createNeoConstraint(c, builder);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.18
	public EntriesWithSameHrefAccess getPattern_EntriesWithSameHref() {
		return new EntriesWithSameHrefAccess();
	}
	
	public class EntriesWithSameHrefAccess extends NeoPatternAccess<EntriesWithSameHrefData, EntriesWithSameHrefMask> {
		public final String _d = "d";
		public final String _e1 = "e1";
		public final String _e2 = "e2";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(18);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<EntriesWithSameHrefData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new EntriesWithSameHrefData(d));
		}
		
		@Override
		public EntriesWithSameHrefMask mask() {
			return new EntriesWithSameHrefMask();
		}
	}
	
	public class EntriesWithSameHrefData extends NeoData {
		public EntriesWithSameHrefData(Record data) {
			
		}
	}
	
	public class EntriesWithSameHrefMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.19
	public EntriesWithSameGlossaryEntryAccess getPattern_EntriesWithSameGlossaryEntry() {
		return new EntriesWithSameGlossaryEntryAccess();
	}
	
	public class EntriesWithSameGlossaryEntryAccess extends NeoPatternAccess<EntriesWithSameGlossaryEntryData, EntriesWithSameGlossaryEntryMask> {
		public final String _d = "d";
		public final String _e1 = "e1";
		public final String _e2 = "e2";
		public final String _ge = "ge";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(19);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<EntriesWithSameGlossaryEntryData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new EntriesWithSameGlossaryEntryData(d));
		}
		
		@Override
		public EntriesWithSameGlossaryEntryMask mask() {
			return new EntriesWithSameGlossaryEntryMask();
		}
	}
	
	public class EntriesWithSameGlossaryEntryData extends NeoData {
		public EntriesWithSameGlossaryEntryData(Record data) {
			
		}
	}
	
	public class EntriesWithSameGlossaryEntryMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/JavaToDocSLE/bin/JavaToDocSLE.msl#//@entities.20
	public IConstraint getConstraint_SameHrefSameGlossaryEntry() {
		var c = (Constraint) spec.getEntities().get(20);
		return NeoConstraintFactory.createNeoConstraint(c, builder);
	}
}
