/** 
 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
 */
package org.emoflon.neo.api.classinhhier2db.bin.spec;

import org.emoflon.neo.cypher.common.*;
import org.emoflon.neo.cypher.constraints.*;
import org.emoflon.neo.cypher.factories.*;
import org.emoflon.neo.cypher.models.*;
import org.emoflon.neo.cypher.patterns.*;
import org.emoflon.neo.cypher.rules.*;
import org.emoflon.neo.engine.api.patterns.*;
import org.emoflon.neo.engine.api.constraints.*;
import org.emoflon.neo.engine.api.rules.*;
import org.emoflon.neo.emsl.eMSL.*;
import org.emoflon.neo.emsl.util.*;
import org.neo4j.driver.Value;
import org.neo4j.driver.Record;
import org.eclipse.emf.common.util.URI;
import org.emoflon.neo.api.classinhhier2db.API_Common;
import java.util.Collection;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;
import java.util.Optional;
import java.time.LocalDate;

@SuppressWarnings("unused")
public class API_GameOfLifeBuilder {
	private EMSL_Spec spec;
	private NeoCoreBuilder builder;

	/** Use this constructor for default values */
	public API_GameOfLifeBuilder(NeoCoreBuilder builder) {
		this(builder, API_Common.PLATFORM_RESOURCE_URI, API_Common.PLATFORM_PLUGIN_URI, API_Common.NEOCORE_URI_INSTALLED);
	}

	/** Use this constructor to configure values for loading EMSL files */
	public API_GameOfLifeBuilder(NeoCoreBuilder builder, String platformResourceURIRoot, String platformPluginURIRoot, String neocoreURI){
		this((EMSL_Spec) EMSLUtil.loadSpecification("platform:/resource/ClassInhHier2DB/GameOfLife/bin/spec/GameOfLifeBuilder.msl", platformResourceURIRoot, platformPluginURIRoot, neocoreURI), builder);
	}

	public API_GameOfLifeBuilder(EMSL_Spec spec, NeoCoreBuilder builder) {
		this.spec = spec;
		this.builder = builder;
	}

	//:~> platform:/resource/ClassInhHier2DB/GameOfLife/bin/spec/GameOfLifeBuilder.msl#//@entities.0
	public CreateTopLeftCornerAccess getRule_CreateTopLeftCorner() {
		return new CreateTopLeftCornerAccess();
	}
	
	public class CreateTopLeftCornerAccess extends NeoRuleCoAccess<CreateTopLeftCornerData, CreateTopLeftCornerCoData, CreateTopLeftCornerMask> {
		public final String _cell = "cell";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(0);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<CreateTopLeftCornerData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateTopLeftCornerData(d));
		}
			
		@Override
		public Stream<CreateTopLeftCornerCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateTopLeftCornerCoData(d));
		}
		
		@Override
		public CreateTopLeftCornerMask mask() {
			return new CreateTopLeftCornerMask();
		}
	}
	
	public class CreateTopLeftCornerData extends NeoData {
		
		public CreateTopLeftCornerData(Record data) {
		}
		
		
	}
	
	public class CreateTopLeftCornerCoData extends NeoData {
		public final CellNode _cell;
		
		public CreateTopLeftCornerCoData(Record data) {
			var _cell = data.get("cell");
			this._cell = new CellNode(_cell);
		}
		
		
		public class CellNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public CellNode(Value _cell) {
				if(!_cell.get("row").isNull())
					this._row = _cell.get("row").asInt();
				if(!_cell.get("col").isNull())
					this._col = _cell.get("col").asInt();
				if(!_cell.get("alive").isNull())
					this._alive = _cell.get("alive").asBoolean();
				if(!_cell.get("ename").isNull())
					this._ename = _cell.get("ename").asString();
			}
		}
		
	}
	
	public class CreateTopLeftCornerMask extends NeoMask {
		public CreateTopLeftCornerMask setCell(Long value) {
			nodeMask.put("cell", value);
			return this;
		}
		public CreateTopLeftCornerMask setCellRow(int value) {
			attributeMask.put("cell.row", value);
			return this;
		}
		public CreateTopLeftCornerMask setCellCol(int value) {
			attributeMask.put("cell.col", value);
			return this;
		}
		public CreateTopLeftCornerMask setCellAlive(boolean value) {
			attributeMask.put("cell.alive", value);
			return this;
		}
		public CreateTopLeftCornerMask setCellEname(String value) {
			attributeMask.put("cell.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/ClassInhHier2DB/GameOfLife/bin/spec/GameOfLifeBuilder.msl#//@entities.1
	public CreateCellsInFirstRowAccess getRule_CreateCellsInFirstRow() {
		return new CreateCellsInFirstRowAccess();
	}
	
	public class CreateCellsInFirstRowAccess extends NeoRuleCoAccess<CreateCellsInFirstRowData, CreateCellsInFirstRowCoData, CreateCellsInFirstRowMask> {
		public final String _left = "left";
		public final String _cell = "cell";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(1);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<CreateCellsInFirstRowData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateCellsInFirstRowData(d));
		}
			
		@Override
		public Stream<CreateCellsInFirstRowCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateCellsInFirstRowCoData(d));
		}
		
		@Override
		public CreateCellsInFirstRowMask mask() {
			return new CreateCellsInFirstRowMask();
		}
	}
	
	public class CreateCellsInFirstRowData extends NeoData {
		public final LeftNode _left;
		
		public CreateCellsInFirstRowData(Record data) {
			var _left = data.get("left");
			this._left = new LeftNode(_left);
		}
		
		
		public class LeftNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public LeftNode(Value _left) {
				if(!_left.get("row").isNull())
					this._row = _left.get("row").asInt();
				if(!_left.get("col").isNull())
					this._col = _left.get("col").asInt();
				if(!_left.get("alive").isNull())
					this._alive = _left.get("alive").asBoolean();
				if(!_left.get("ename").isNull())
					this._ename = _left.get("ename").asString();
			}
		}
		
	}
	
	public class CreateCellsInFirstRowCoData extends NeoData {
		public final LeftNode _left;
		public final Left_neighbours_0_cellRel _left_neighbours_0_cell;
		public final CellNode _cell;
		public final Cell_neighbours_0_leftRel _cell_neighbours_0_left;
		
		public CreateCellsInFirstRowCoData(Record data) {
			var _left = data.get("left");
			this._left = new LeftNode(_left);
			var _left_neighbours_0_cell = data.get("left_neighbours_0_cell");
			this._left_neighbours_0_cell = new Left_neighbours_0_cellRel(_left_neighbours_0_cell);
			var _cell = data.get("cell");
			this._cell = new CellNode(_cell);
			var _cell_neighbours_0_left = data.get("cell_neighbours_0_left");
			this._cell_neighbours_0_left = new Cell_neighbours_0_leftRel(_cell_neighbours_0_left);
		}
		
		
		public class LeftNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public LeftNode(Value _left) {
				if(!_left.get("row").isNull())
					this._row = _left.get("row").asInt();
				if(!_left.get("col").isNull())
					this._col = _left.get("col").asInt();
				if(!_left.get("alive").isNull())
					this._alive = _left.get("alive").asBoolean();
				if(!_left.get("ename").isNull())
					this._ename = _left.get("ename").asString();
			}
		}
		
		public class Left_neighbours_0_cellRel {
		
			public Left_neighbours_0_cellRel(Value _left_neighbours_0_cell) {
			}
		}
		public class CellNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public CellNode(Value _cell) {
				if(!_cell.get("row").isNull())
					this._row = _cell.get("row").asInt();
				if(!_cell.get("col").isNull())
					this._col = _cell.get("col").asInt();
				if(!_cell.get("alive").isNull())
					this._alive = _cell.get("alive").asBoolean();
				if(!_cell.get("ename").isNull())
					this._ename = _cell.get("ename").asString();
			}
		}
		
		public class Cell_neighbours_0_leftRel {
		
			public Cell_neighbours_0_leftRel(Value _cell_neighbours_0_left) {
			}
		}
	}
	
	public class CreateCellsInFirstRowMask extends NeoMask {
		public CreateCellsInFirstRowMask setLeft(Long value) {
			nodeMask.put("left", value);
			return this;
		}
		public CreateCellsInFirstRowMask setLeftRow(int value) {
			attributeMask.put("left.row", value);
			return this;
		}
		public CreateCellsInFirstRowMask setLeftCol(int value) {
			attributeMask.put("left.col", value);
			return this;
		}
		public CreateCellsInFirstRowMask setLeftAlive(boolean value) {
			attributeMask.put("left.alive", value);
			return this;
		}
		public CreateCellsInFirstRowMask setLeftEname(String value) {
			attributeMask.put("left.ename", value);
			return this;
		}
		public CreateCellsInFirstRowMask setCell(Long value) {
			nodeMask.put("cell", value);
			return this;
		}
		public CreateCellsInFirstRowMask setCellRow(int value) {
			attributeMask.put("cell.row", value);
			return this;
		}
		public CreateCellsInFirstRowMask setCellCol(int value) {
			attributeMask.put("cell.col", value);
			return this;
		}
		public CreateCellsInFirstRowMask setCellAlive(boolean value) {
			attributeMask.put("cell.alive", value);
			return this;
		}
		public CreateCellsInFirstRowMask setCellEname(String value) {
			attributeMask.put("cell.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/ClassInhHier2DB/GameOfLife/bin/spec/GameOfLifeBuilder.msl#//@entities.2
	public AlreadyHasRightNeighbourAccess getPattern_AlreadyHasRightNeighbour() {
		return new AlreadyHasRightNeighbourAccess();
	}
	
	public class AlreadyHasRightNeighbourAccess extends NeoPatternAccess<AlreadyHasRightNeighbourData, AlreadyHasRightNeighbourMask> {
		public final String _left = "left";
		public final String _otherCell = "otherCell";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(2);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<AlreadyHasRightNeighbourData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new AlreadyHasRightNeighbourData(d));
		}
		
		@Override
		public AlreadyHasRightNeighbourMask mask() {
			return new AlreadyHasRightNeighbourMask();
		}
	}
	
	public class AlreadyHasRightNeighbourData extends NeoData {
		public final LeftNode _left;
		public final Left_neighbours_0_otherCellRel _left_neighbours_0_otherCell;
		public final OtherCellNode _otherCell;
		
		public AlreadyHasRightNeighbourData(Record data) {
			var _left = data.get("left");
			this._left = new LeftNode(_left);
			var _left_neighbours_0_otherCell = data.get("left_neighbours_0_otherCell");
			this._left_neighbours_0_otherCell = new Left_neighbours_0_otherCellRel(_left_neighbours_0_otherCell);
			var _otherCell = data.get("otherCell");
			this._otherCell = new OtherCellNode(_otherCell);
		}
		
		
		public class LeftNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public LeftNode(Value _left) {
				if(!_left.get("row").isNull())
					this._row = _left.get("row").asInt();
				if(!_left.get("col").isNull())
					this._col = _left.get("col").asInt();
				if(!_left.get("alive").isNull())
					this._alive = _left.get("alive").asBoolean();
				if(!_left.get("ename").isNull())
					this._ename = _left.get("ename").asString();
			}
		}
		
		public class Left_neighbours_0_otherCellRel {
		
			public Left_neighbours_0_otherCellRel(Value _left_neighbours_0_otherCell) {
			}
		}
		public class OtherCellNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public OtherCellNode(Value _otherCell) {
				if(!_otherCell.get("row").isNull())
					this._row = _otherCell.get("row").asInt();
				if(!_otherCell.get("col").isNull())
					this._col = _otherCell.get("col").asInt();
				if(!_otherCell.get("alive").isNull())
					this._alive = _otherCell.get("alive").asBoolean();
				if(!_otherCell.get("ename").isNull())
					this._ename = _otherCell.get("ename").asString();
			}
		}
		
	}
	
	public class AlreadyHasRightNeighbourMask extends NeoMask {
		public AlreadyHasRightNeighbourMask setLeft(Long value) {
			nodeMask.put("left", value);
			return this;
		}
		public AlreadyHasRightNeighbourMask setLeftRow(int value) {
			attributeMask.put("left.row", value);
			return this;
		}
		public AlreadyHasRightNeighbourMask setLeftCol(int value) {
			attributeMask.put("left.col", value);
			return this;
		}
		public AlreadyHasRightNeighbourMask setLeftAlive(boolean value) {
			attributeMask.put("left.alive", value);
			return this;
		}
		public AlreadyHasRightNeighbourMask setLeftEname(String value) {
			attributeMask.put("left.ename", value);
			return this;
		}
		public AlreadyHasRightNeighbourMask setOtherCell(Long value) {
			nodeMask.put("otherCell", value);
			return this;
		}
		public AlreadyHasRightNeighbourMask setOtherCellRow(int value) {
			attributeMask.put("otherCell.row", value);
			return this;
		}
		public AlreadyHasRightNeighbourMask setOtherCellCol(int value) {
			attributeMask.put("otherCell.col", value);
			return this;
		}
		public AlreadyHasRightNeighbourMask setOtherCellAlive(boolean value) {
			attributeMask.put("otherCell.alive", value);
			return this;
		}
		public AlreadyHasRightNeighbourMask setOtherCellEname(String value) {
			attributeMask.put("otherCell.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/ClassInhHier2DB/GameOfLife/bin/spec/GameOfLifeBuilder.msl#//@entities.3
	public CreateCellsInFirstColAccess getRule_CreateCellsInFirstCol() {
		return new CreateCellsInFirstColAccess();
	}
	
	public class CreateCellsInFirstColAccess extends NeoRuleCoAccess<CreateCellsInFirstColData, CreateCellsInFirstColCoData, CreateCellsInFirstColMask> {
		public final String _top = "top";
		public final String _cell = "cell";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(3);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<CreateCellsInFirstColData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateCellsInFirstColData(d));
		}
			
		@Override
		public Stream<CreateCellsInFirstColCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateCellsInFirstColCoData(d));
		}
		
		@Override
		public CreateCellsInFirstColMask mask() {
			return new CreateCellsInFirstColMask();
		}
	}
	
	public class CreateCellsInFirstColData extends NeoData {
		public final TopNode _top;
		
		public CreateCellsInFirstColData(Record data) {
			var _top = data.get("top");
			this._top = new TopNode(_top);
		}
		
		
		public class TopNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public TopNode(Value _top) {
				if(!_top.get("row").isNull())
					this._row = _top.get("row").asInt();
				if(!_top.get("col").isNull())
					this._col = _top.get("col").asInt();
				if(!_top.get("alive").isNull())
					this._alive = _top.get("alive").asBoolean();
				if(!_top.get("ename").isNull())
					this._ename = _top.get("ename").asString();
			}
		}
		
	}
	
	public class CreateCellsInFirstColCoData extends NeoData {
		public final TopNode _top;
		public final Top_neighbours_0_cellRel _top_neighbours_0_cell;
		public final CellNode _cell;
		public final Cell_neighbours_0_topRel _cell_neighbours_0_top;
		
		public CreateCellsInFirstColCoData(Record data) {
			var _top = data.get("top");
			this._top = new TopNode(_top);
			var _top_neighbours_0_cell = data.get("top_neighbours_0_cell");
			this._top_neighbours_0_cell = new Top_neighbours_0_cellRel(_top_neighbours_0_cell);
			var _cell = data.get("cell");
			this._cell = new CellNode(_cell);
			var _cell_neighbours_0_top = data.get("cell_neighbours_0_top");
			this._cell_neighbours_0_top = new Cell_neighbours_0_topRel(_cell_neighbours_0_top);
		}
		
		
		public class TopNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public TopNode(Value _top) {
				if(!_top.get("row").isNull())
					this._row = _top.get("row").asInt();
				if(!_top.get("col").isNull())
					this._col = _top.get("col").asInt();
				if(!_top.get("alive").isNull())
					this._alive = _top.get("alive").asBoolean();
				if(!_top.get("ename").isNull())
					this._ename = _top.get("ename").asString();
			}
		}
		
		public class Top_neighbours_0_cellRel {
		
			public Top_neighbours_0_cellRel(Value _top_neighbours_0_cell) {
			}
		}
		public class CellNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public CellNode(Value _cell) {
				if(!_cell.get("row").isNull())
					this._row = _cell.get("row").asInt();
				if(!_cell.get("col").isNull())
					this._col = _cell.get("col").asInt();
				if(!_cell.get("alive").isNull())
					this._alive = _cell.get("alive").asBoolean();
				if(!_cell.get("ename").isNull())
					this._ename = _cell.get("ename").asString();
			}
		}
		
		public class Cell_neighbours_0_topRel {
		
			public Cell_neighbours_0_topRel(Value _cell_neighbours_0_top) {
			}
		}
	}
	
	public class CreateCellsInFirstColMask extends NeoMask {
		public CreateCellsInFirstColMask setTop(Long value) {
			nodeMask.put("top", value);
			return this;
		}
		public CreateCellsInFirstColMask setTopRow(int value) {
			attributeMask.put("top.row", value);
			return this;
		}
		public CreateCellsInFirstColMask setTopCol(int value) {
			attributeMask.put("top.col", value);
			return this;
		}
		public CreateCellsInFirstColMask setTopAlive(boolean value) {
			attributeMask.put("top.alive", value);
			return this;
		}
		public CreateCellsInFirstColMask setTopEname(String value) {
			attributeMask.put("top.ename", value);
			return this;
		}
		public CreateCellsInFirstColMask setCell(Long value) {
			nodeMask.put("cell", value);
			return this;
		}
		public CreateCellsInFirstColMask setCellRow(int value) {
			attributeMask.put("cell.row", value);
			return this;
		}
		public CreateCellsInFirstColMask setCellCol(int value) {
			attributeMask.put("cell.col", value);
			return this;
		}
		public CreateCellsInFirstColMask setCellAlive(boolean value) {
			attributeMask.put("cell.alive", value);
			return this;
		}
		public CreateCellsInFirstColMask setCellEname(String value) {
			attributeMask.put("cell.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/ClassInhHier2DB/GameOfLife/bin/spec/GameOfLifeBuilder.msl#//@entities.4
	public AlreadyHasBottomNeighbourAccess getPattern_AlreadyHasBottomNeighbour() {
		return new AlreadyHasBottomNeighbourAccess();
	}
	
	public class AlreadyHasBottomNeighbourAccess extends NeoPatternAccess<AlreadyHasBottomNeighbourData, AlreadyHasBottomNeighbourMask> {
		public final String _top = "top";
		public final String _otherCell = "otherCell";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(4);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<AlreadyHasBottomNeighbourData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new AlreadyHasBottomNeighbourData(d));
		}
		
		@Override
		public AlreadyHasBottomNeighbourMask mask() {
			return new AlreadyHasBottomNeighbourMask();
		}
	}
	
	public class AlreadyHasBottomNeighbourData extends NeoData {
		public final TopNode _top;
		public final Top_neighbours_0_otherCellRel _top_neighbours_0_otherCell;
		public final OtherCellNode _otherCell;
		
		public AlreadyHasBottomNeighbourData(Record data) {
			var _top = data.get("top");
			this._top = new TopNode(_top);
			var _top_neighbours_0_otherCell = data.get("top_neighbours_0_otherCell");
			this._top_neighbours_0_otherCell = new Top_neighbours_0_otherCellRel(_top_neighbours_0_otherCell);
			var _otherCell = data.get("otherCell");
			this._otherCell = new OtherCellNode(_otherCell);
		}
		
		
		public class TopNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public TopNode(Value _top) {
				if(!_top.get("row").isNull())
					this._row = _top.get("row").asInt();
				if(!_top.get("col").isNull())
					this._col = _top.get("col").asInt();
				if(!_top.get("alive").isNull())
					this._alive = _top.get("alive").asBoolean();
				if(!_top.get("ename").isNull())
					this._ename = _top.get("ename").asString();
			}
		}
		
		public class Top_neighbours_0_otherCellRel {
		
			public Top_neighbours_0_otherCellRel(Value _top_neighbours_0_otherCell) {
			}
		}
		public class OtherCellNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public OtherCellNode(Value _otherCell) {
				if(!_otherCell.get("row").isNull())
					this._row = _otherCell.get("row").asInt();
				if(!_otherCell.get("col").isNull())
					this._col = _otherCell.get("col").asInt();
				if(!_otherCell.get("alive").isNull())
					this._alive = _otherCell.get("alive").asBoolean();
				if(!_otherCell.get("ename").isNull())
					this._ename = _otherCell.get("ename").asString();
			}
		}
		
	}
	
	public class AlreadyHasBottomNeighbourMask extends NeoMask {
		public AlreadyHasBottomNeighbourMask setTop(Long value) {
			nodeMask.put("top", value);
			return this;
		}
		public AlreadyHasBottomNeighbourMask setTopRow(int value) {
			attributeMask.put("top.row", value);
			return this;
		}
		public AlreadyHasBottomNeighbourMask setTopCol(int value) {
			attributeMask.put("top.col", value);
			return this;
		}
		public AlreadyHasBottomNeighbourMask setTopAlive(boolean value) {
			attributeMask.put("top.alive", value);
			return this;
		}
		public AlreadyHasBottomNeighbourMask setTopEname(String value) {
			attributeMask.put("top.ename", value);
			return this;
		}
		public AlreadyHasBottomNeighbourMask setOtherCell(Long value) {
			nodeMask.put("otherCell", value);
			return this;
		}
		public AlreadyHasBottomNeighbourMask setOtherCellRow(int value) {
			attributeMask.put("otherCell.row", value);
			return this;
		}
		public AlreadyHasBottomNeighbourMask setOtherCellCol(int value) {
			attributeMask.put("otherCell.col", value);
			return this;
		}
		public AlreadyHasBottomNeighbourMask setOtherCellAlive(boolean value) {
			attributeMask.put("otherCell.alive", value);
			return this;
		}
		public AlreadyHasBottomNeighbourMask setOtherCellEname(String value) {
			attributeMask.put("otherCell.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/ClassInhHier2DB/GameOfLife/bin/spec/GameOfLifeBuilder.msl#//@entities.5
	public CreateAllOtherCellsAccess getRule_CreateAllOtherCells() {
		return new CreateAllOtherCellsAccess();
	}
	
	public class CreateAllOtherCellsAccess extends NeoRuleCoAccess<CreateAllOtherCellsData, CreateAllOtherCellsCoData, CreateAllOtherCellsMask> {
		public final String _left = "left";
		public final String _top = "top";
		public final String _topLeft = "topLeft";
		public final String _newCell = "newCell";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(5);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<CreateAllOtherCellsData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateAllOtherCellsData(d));
		}
			
		@Override
		public Stream<CreateAllOtherCellsCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateAllOtherCellsCoData(d));
		}
		
		@Override
		public CreateAllOtherCellsMask mask() {
			return new CreateAllOtherCellsMask();
		}
	}
	
	public class CreateAllOtherCellsData extends NeoData {
		public final LeftNode _left;
		public final Left_neighbours_0_topLeftRel _left_neighbours_0_topLeft;
		public final TopNode _top;
		public final Top_neighbours_0_topLeftRel _top_neighbours_0_topLeft;
		public final TopLeftNode _topLeft;
		public final TopLeft_neighbours_0_topRel _topLeft_neighbours_0_top;
		public final TopLeft_neighbours_1_leftRel _topLeft_neighbours_1_left;
		
		public CreateAllOtherCellsData(Record data) {
			var _left = data.get("left");
			this._left = new LeftNode(_left);
			var _left_neighbours_0_topLeft = data.get("left_neighbours_0_topLeft");
			this._left_neighbours_0_topLeft = new Left_neighbours_0_topLeftRel(_left_neighbours_0_topLeft);
			var _top = data.get("top");
			this._top = new TopNode(_top);
			var _top_neighbours_0_topLeft = data.get("top_neighbours_0_topLeft");
			this._top_neighbours_0_topLeft = new Top_neighbours_0_topLeftRel(_top_neighbours_0_topLeft);
			var _topLeft = data.get("topLeft");
			this._topLeft = new TopLeftNode(_topLeft);
			var _topLeft_neighbours_0_top = data.get("topLeft_neighbours_0_top");
			this._topLeft_neighbours_0_top = new TopLeft_neighbours_0_topRel(_topLeft_neighbours_0_top);
			var _topLeft_neighbours_1_left = data.get("topLeft_neighbours_1_left");
			this._topLeft_neighbours_1_left = new TopLeft_neighbours_1_leftRel(_topLeft_neighbours_1_left);
		}
		
		
		public class LeftNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public LeftNode(Value _left) {
				if(!_left.get("row").isNull())
					this._row = _left.get("row").asInt();
				if(!_left.get("col").isNull())
					this._col = _left.get("col").asInt();
				if(!_left.get("alive").isNull())
					this._alive = _left.get("alive").asBoolean();
				if(!_left.get("ename").isNull())
					this._ename = _left.get("ename").asString();
			}
		}
		
		public class Left_neighbours_0_topLeftRel {
		
			public Left_neighbours_0_topLeftRel(Value _left_neighbours_0_topLeft) {
			}
		}
		public class TopNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public TopNode(Value _top) {
				if(!_top.get("row").isNull())
					this._row = _top.get("row").asInt();
				if(!_top.get("col").isNull())
					this._col = _top.get("col").asInt();
				if(!_top.get("alive").isNull())
					this._alive = _top.get("alive").asBoolean();
				if(!_top.get("ename").isNull())
					this._ename = _top.get("ename").asString();
			}
		}
		
		public class Top_neighbours_0_topLeftRel {
		
			public Top_neighbours_0_topLeftRel(Value _top_neighbours_0_topLeft) {
			}
		}
		public class TopLeftNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public TopLeftNode(Value _topLeft) {
				if(!_topLeft.get("row").isNull())
					this._row = _topLeft.get("row").asInt();
				if(!_topLeft.get("col").isNull())
					this._col = _topLeft.get("col").asInt();
				if(!_topLeft.get("alive").isNull())
					this._alive = _topLeft.get("alive").asBoolean();
				if(!_topLeft.get("ename").isNull())
					this._ename = _topLeft.get("ename").asString();
			}
		}
		
		public class TopLeft_neighbours_0_topRel {
		
			public TopLeft_neighbours_0_topRel(Value _topLeft_neighbours_0_top) {
			}
		}
		public class TopLeft_neighbours_1_leftRel {
		
			public TopLeft_neighbours_1_leftRel(Value _topLeft_neighbours_1_left) {
			}
		}
	}
	
	public class CreateAllOtherCellsCoData extends NeoData {
		public final LeftNode _left;
		public final Left_neighbours_0_topLeftRel _left_neighbours_0_topLeft;
		public final Left_neighbours_1_newCellRel _left_neighbours_1_newCell;
		public final TopNode _top;
		public final Top_neighbours_0_topLeftRel _top_neighbours_0_topLeft;
		public final Top_neighbours_1_newCellRel _top_neighbours_1_newCell;
		public final TopLeftNode _topLeft;
		public final TopLeft_neighbours_0_topRel _topLeft_neighbours_0_top;
		public final TopLeft_neighbours_1_leftRel _topLeft_neighbours_1_left;
		public final TopLeft_neighbours_2_newCellRel _topLeft_neighbours_2_newCell;
		public final NewCellNode _newCell;
		public final NewCell_neighbours_0_topRel _newCell_neighbours_0_top;
		public final NewCell_neighbours_1_leftRel _newCell_neighbours_1_left;
		public final NewCell_neighbours_2_topLeftRel _newCell_neighbours_2_topLeft;
		
		public CreateAllOtherCellsCoData(Record data) {
			var _left = data.get("left");
			this._left = new LeftNode(_left);
			var _left_neighbours_0_topLeft = data.get("left_neighbours_0_topLeft");
			this._left_neighbours_0_topLeft = new Left_neighbours_0_topLeftRel(_left_neighbours_0_topLeft);
			var _left_neighbours_1_newCell = data.get("left_neighbours_1_newCell");
			this._left_neighbours_1_newCell = new Left_neighbours_1_newCellRel(_left_neighbours_1_newCell);
			var _top = data.get("top");
			this._top = new TopNode(_top);
			var _top_neighbours_0_topLeft = data.get("top_neighbours_0_topLeft");
			this._top_neighbours_0_topLeft = new Top_neighbours_0_topLeftRel(_top_neighbours_0_topLeft);
			var _top_neighbours_1_newCell = data.get("top_neighbours_1_newCell");
			this._top_neighbours_1_newCell = new Top_neighbours_1_newCellRel(_top_neighbours_1_newCell);
			var _topLeft = data.get("topLeft");
			this._topLeft = new TopLeftNode(_topLeft);
			var _topLeft_neighbours_0_top = data.get("topLeft_neighbours_0_top");
			this._topLeft_neighbours_0_top = new TopLeft_neighbours_0_topRel(_topLeft_neighbours_0_top);
			var _topLeft_neighbours_1_left = data.get("topLeft_neighbours_1_left");
			this._topLeft_neighbours_1_left = new TopLeft_neighbours_1_leftRel(_topLeft_neighbours_1_left);
			var _topLeft_neighbours_2_newCell = data.get("topLeft_neighbours_2_newCell");
			this._topLeft_neighbours_2_newCell = new TopLeft_neighbours_2_newCellRel(_topLeft_neighbours_2_newCell);
			var _newCell = data.get("newCell");
			this._newCell = new NewCellNode(_newCell);
			var _newCell_neighbours_0_top = data.get("newCell_neighbours_0_top");
			this._newCell_neighbours_0_top = new NewCell_neighbours_0_topRel(_newCell_neighbours_0_top);
			var _newCell_neighbours_1_left = data.get("newCell_neighbours_1_left");
			this._newCell_neighbours_1_left = new NewCell_neighbours_1_leftRel(_newCell_neighbours_1_left);
			var _newCell_neighbours_2_topLeft = data.get("newCell_neighbours_2_topLeft");
			this._newCell_neighbours_2_topLeft = new NewCell_neighbours_2_topLeftRel(_newCell_neighbours_2_topLeft);
		}
		
		
		public class LeftNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public LeftNode(Value _left) {
				if(!_left.get("row").isNull())
					this._row = _left.get("row").asInt();
				if(!_left.get("col").isNull())
					this._col = _left.get("col").asInt();
				if(!_left.get("alive").isNull())
					this._alive = _left.get("alive").asBoolean();
				if(!_left.get("ename").isNull())
					this._ename = _left.get("ename").asString();
			}
		}
		
		public class Left_neighbours_0_topLeftRel {
		
			public Left_neighbours_0_topLeftRel(Value _left_neighbours_0_topLeft) {
			}
		}
		public class Left_neighbours_1_newCellRel {
		
			public Left_neighbours_1_newCellRel(Value _left_neighbours_1_newCell) {
			}
		}
		public class TopNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public TopNode(Value _top) {
				if(!_top.get("row").isNull())
					this._row = _top.get("row").asInt();
				if(!_top.get("col").isNull())
					this._col = _top.get("col").asInt();
				if(!_top.get("alive").isNull())
					this._alive = _top.get("alive").asBoolean();
				if(!_top.get("ename").isNull())
					this._ename = _top.get("ename").asString();
			}
		}
		
		public class Top_neighbours_0_topLeftRel {
		
			public Top_neighbours_0_topLeftRel(Value _top_neighbours_0_topLeft) {
			}
		}
		public class Top_neighbours_1_newCellRel {
		
			public Top_neighbours_1_newCellRel(Value _top_neighbours_1_newCell) {
			}
		}
		public class TopLeftNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public TopLeftNode(Value _topLeft) {
				if(!_topLeft.get("row").isNull())
					this._row = _topLeft.get("row").asInt();
				if(!_topLeft.get("col").isNull())
					this._col = _topLeft.get("col").asInt();
				if(!_topLeft.get("alive").isNull())
					this._alive = _topLeft.get("alive").asBoolean();
				if(!_topLeft.get("ename").isNull())
					this._ename = _topLeft.get("ename").asString();
			}
		}
		
		public class TopLeft_neighbours_0_topRel {
		
			public TopLeft_neighbours_0_topRel(Value _topLeft_neighbours_0_top) {
			}
		}
		public class TopLeft_neighbours_1_leftRel {
		
			public TopLeft_neighbours_1_leftRel(Value _topLeft_neighbours_1_left) {
			}
		}
		public class TopLeft_neighbours_2_newCellRel {
		
			public TopLeft_neighbours_2_newCellRel(Value _topLeft_neighbours_2_newCell) {
			}
		}
		public class NewCellNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public NewCellNode(Value _newCell) {
				if(!_newCell.get("row").isNull())
					this._row = _newCell.get("row").asInt();
				if(!_newCell.get("col").isNull())
					this._col = _newCell.get("col").asInt();
				if(!_newCell.get("alive").isNull())
					this._alive = _newCell.get("alive").asBoolean();
				if(!_newCell.get("ename").isNull())
					this._ename = _newCell.get("ename").asString();
			}
		}
		
		public class NewCell_neighbours_0_topRel {
		
			public NewCell_neighbours_0_topRel(Value _newCell_neighbours_0_top) {
			}
		}
		public class NewCell_neighbours_1_leftRel {
		
			public NewCell_neighbours_1_leftRel(Value _newCell_neighbours_1_left) {
			}
		}
		public class NewCell_neighbours_2_topLeftRel {
		
			public NewCell_neighbours_2_topLeftRel(Value _newCell_neighbours_2_topLeft) {
			}
		}
	}
	
	public class CreateAllOtherCellsMask extends NeoMask {
		public CreateAllOtherCellsMask setLeft(Long value) {
			nodeMask.put("left", value);
			return this;
		}
		public CreateAllOtherCellsMask setLeftRow(int value) {
			attributeMask.put("left.row", value);
			return this;
		}
		public CreateAllOtherCellsMask setLeftCol(int value) {
			attributeMask.put("left.col", value);
			return this;
		}
		public CreateAllOtherCellsMask setLeftAlive(boolean value) {
			attributeMask.put("left.alive", value);
			return this;
		}
		public CreateAllOtherCellsMask setLeftEname(String value) {
			attributeMask.put("left.ename", value);
			return this;
		}
		public CreateAllOtherCellsMask setTop(Long value) {
			nodeMask.put("top", value);
			return this;
		}
		public CreateAllOtherCellsMask setTopRow(int value) {
			attributeMask.put("top.row", value);
			return this;
		}
		public CreateAllOtherCellsMask setTopCol(int value) {
			attributeMask.put("top.col", value);
			return this;
		}
		public CreateAllOtherCellsMask setTopAlive(boolean value) {
			attributeMask.put("top.alive", value);
			return this;
		}
		public CreateAllOtherCellsMask setTopEname(String value) {
			attributeMask.put("top.ename", value);
			return this;
		}
		public CreateAllOtherCellsMask setTopLeft(Long value) {
			nodeMask.put("topLeft", value);
			return this;
		}
		public CreateAllOtherCellsMask setTopLeftRow(int value) {
			attributeMask.put("topLeft.row", value);
			return this;
		}
		public CreateAllOtherCellsMask setTopLeftCol(int value) {
			attributeMask.put("topLeft.col", value);
			return this;
		}
		public CreateAllOtherCellsMask setTopLeftAlive(boolean value) {
			attributeMask.put("topLeft.alive", value);
			return this;
		}
		public CreateAllOtherCellsMask setTopLeftEname(String value) {
			attributeMask.put("topLeft.ename", value);
			return this;
		}
		public CreateAllOtherCellsMask setNewCell(Long value) {
			nodeMask.put("newCell", value);
			return this;
		}
		public CreateAllOtherCellsMask setNewCellRow(int value) {
			attributeMask.put("newCell.row", value);
			return this;
		}
		public CreateAllOtherCellsMask setNewCellCol(int value) {
			attributeMask.put("newCell.col", value);
			return this;
		}
		public CreateAllOtherCellsMask setNewCellAlive(boolean value) {
			attributeMask.put("newCell.alive", value);
			return this;
		}
		public CreateAllOtherCellsMask setNewCellEname(String value) {
			attributeMask.put("newCell.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/ClassInhHier2DB/GameOfLife/bin/spec/GameOfLifeBuilder.msl#//@entities.6
	public OtherCellAccess getPattern_OtherCell() {
		return new OtherCellAccess();
	}
	
	public class OtherCellAccess extends NeoPatternAccess<OtherCellData, OtherCellMask> {
		public final String _left = "left";
		public final String _top = "top";
		public final String _topLeft = "topLeft";
		public final String _otherCell = "otherCell";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(6);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<OtherCellData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new OtherCellData(d));
		}
		
		@Override
		public OtherCellMask mask() {
			return new OtherCellMask();
		}
	}
	
	public class OtherCellData extends NeoData {
		public final LeftNode _left;
		public final TopNode _top;
		public final TopLeftNode _topLeft;
		public final OtherCellNode _otherCell;
		public final OtherCell_neighbours_0_topRel _otherCell_neighbours_0_top;
		public final OtherCell_neighbours_1_leftRel _otherCell_neighbours_1_left;
		public final OtherCell_neighbours_2_topLeftRel _otherCell_neighbours_2_topLeft;
		
		public OtherCellData(Record data) {
			var _left = data.get("left");
			this._left = new LeftNode(_left);
			var _top = data.get("top");
			this._top = new TopNode(_top);
			var _topLeft = data.get("topLeft");
			this._topLeft = new TopLeftNode(_topLeft);
			var _otherCell = data.get("otherCell");
			this._otherCell = new OtherCellNode(_otherCell);
			var _otherCell_neighbours_0_top = data.get("otherCell_neighbours_0_top");
			this._otherCell_neighbours_0_top = new OtherCell_neighbours_0_topRel(_otherCell_neighbours_0_top);
			var _otherCell_neighbours_1_left = data.get("otherCell_neighbours_1_left");
			this._otherCell_neighbours_1_left = new OtherCell_neighbours_1_leftRel(_otherCell_neighbours_1_left);
			var _otherCell_neighbours_2_topLeft = data.get("otherCell_neighbours_2_topLeft");
			this._otherCell_neighbours_2_topLeft = new OtherCell_neighbours_2_topLeftRel(_otherCell_neighbours_2_topLeft);
		}
		
		
		public class LeftNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public LeftNode(Value _left) {
				if(!_left.get("row").isNull())
					this._row = _left.get("row").asInt();
				if(!_left.get("col").isNull())
					this._col = _left.get("col").asInt();
				if(!_left.get("alive").isNull())
					this._alive = _left.get("alive").asBoolean();
				if(!_left.get("ename").isNull())
					this._ename = _left.get("ename").asString();
			}
		}
		
		public class TopNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public TopNode(Value _top) {
				if(!_top.get("row").isNull())
					this._row = _top.get("row").asInt();
				if(!_top.get("col").isNull())
					this._col = _top.get("col").asInt();
				if(!_top.get("alive").isNull())
					this._alive = _top.get("alive").asBoolean();
				if(!_top.get("ename").isNull())
					this._ename = _top.get("ename").asString();
			}
		}
		
		public class TopLeftNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public TopLeftNode(Value _topLeft) {
				if(!_topLeft.get("row").isNull())
					this._row = _topLeft.get("row").asInt();
				if(!_topLeft.get("col").isNull())
					this._col = _topLeft.get("col").asInt();
				if(!_topLeft.get("alive").isNull())
					this._alive = _topLeft.get("alive").asBoolean();
				if(!_topLeft.get("ename").isNull())
					this._ename = _topLeft.get("ename").asString();
			}
		}
		
		public class OtherCellNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public OtherCellNode(Value _otherCell) {
				if(!_otherCell.get("row").isNull())
					this._row = _otherCell.get("row").asInt();
				if(!_otherCell.get("col").isNull())
					this._col = _otherCell.get("col").asInt();
				if(!_otherCell.get("alive").isNull())
					this._alive = _otherCell.get("alive").asBoolean();
				if(!_otherCell.get("ename").isNull())
					this._ename = _otherCell.get("ename").asString();
			}
		}
		
		public class OtherCell_neighbours_0_topRel {
		
			public OtherCell_neighbours_0_topRel(Value _otherCell_neighbours_0_top) {
			}
		}
		public class OtherCell_neighbours_1_leftRel {
		
			public OtherCell_neighbours_1_leftRel(Value _otherCell_neighbours_1_left) {
			}
		}
		public class OtherCell_neighbours_2_topLeftRel {
		
			public OtherCell_neighbours_2_topLeftRel(Value _otherCell_neighbours_2_topLeft) {
			}
		}
	}
	
	public class OtherCellMask extends NeoMask {
		public OtherCellMask setLeft(Long value) {
			nodeMask.put("left", value);
			return this;
		}
		public OtherCellMask setLeftRow(int value) {
			attributeMask.put("left.row", value);
			return this;
		}
		public OtherCellMask setLeftCol(int value) {
			attributeMask.put("left.col", value);
			return this;
		}
		public OtherCellMask setLeftAlive(boolean value) {
			attributeMask.put("left.alive", value);
			return this;
		}
		public OtherCellMask setLeftEname(String value) {
			attributeMask.put("left.ename", value);
			return this;
		}
		public OtherCellMask setTop(Long value) {
			nodeMask.put("top", value);
			return this;
		}
		public OtherCellMask setTopRow(int value) {
			attributeMask.put("top.row", value);
			return this;
		}
		public OtherCellMask setTopCol(int value) {
			attributeMask.put("top.col", value);
			return this;
		}
		public OtherCellMask setTopAlive(boolean value) {
			attributeMask.put("top.alive", value);
			return this;
		}
		public OtherCellMask setTopEname(String value) {
			attributeMask.put("top.ename", value);
			return this;
		}
		public OtherCellMask setTopLeft(Long value) {
			nodeMask.put("topLeft", value);
			return this;
		}
		public OtherCellMask setTopLeftRow(int value) {
			attributeMask.put("topLeft.row", value);
			return this;
		}
		public OtherCellMask setTopLeftCol(int value) {
			attributeMask.put("topLeft.col", value);
			return this;
		}
		public OtherCellMask setTopLeftAlive(boolean value) {
			attributeMask.put("topLeft.alive", value);
			return this;
		}
		public OtherCellMask setTopLeftEname(String value) {
			attributeMask.put("topLeft.ename", value);
			return this;
		}
		public OtherCellMask setOtherCell(Long value) {
			nodeMask.put("otherCell", value);
			return this;
		}
		public OtherCellMask setOtherCellRow(int value) {
			attributeMask.put("otherCell.row", value);
			return this;
		}
		public OtherCellMask setOtherCellCol(int value) {
			attributeMask.put("otherCell.col", value);
			return this;
		}
		public OtherCellMask setOtherCellAlive(boolean value) {
			attributeMask.put("otherCell.alive", value);
			return this;
		}
		public OtherCellMask setOtherCellEname(String value) {
			attributeMask.put("otherCell.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/ClassInhHier2DB/GameOfLife/bin/spec/GameOfLifeBuilder.msl#//@entities.7
	public CreateDiagonalsAccess getRule_CreateDiagonals() {
		return new CreateDiagonalsAccess();
	}
	
	public class CreateDiagonalsAccess extends NeoRuleCoAccess<CreateDiagonalsData, CreateDiagonalsCoData, CreateDiagonalsMask> {
		public final String _upRight = "upRight";
		public final String _downLeft = "downLeft";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(7);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<CreateDiagonalsData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateDiagonalsData(d));
		}
			
		@Override
		public Stream<CreateDiagonalsCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateDiagonalsCoData(d));
		}
		
		@Override
		public CreateDiagonalsMask mask() {
			return new CreateDiagonalsMask();
		}
	}
	
	public class CreateDiagonalsData extends NeoData {
		public final UpRightNode _upRight;
		public final DownLeftNode _downLeft;
		
		public CreateDiagonalsData(Record data) {
			var _upRight = data.get("upRight");
			this._upRight = new UpRightNode(_upRight);
			var _downLeft = data.get("downLeft");
			this._downLeft = new DownLeftNode(_downLeft);
		}
		
		
		public class UpRightNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public UpRightNode(Value _upRight) {
				if(!_upRight.get("row").isNull())
					this._row = _upRight.get("row").asInt();
				if(!_upRight.get("col").isNull())
					this._col = _upRight.get("col").asInt();
				if(!_upRight.get("alive").isNull())
					this._alive = _upRight.get("alive").asBoolean();
				if(!_upRight.get("ename").isNull())
					this._ename = _upRight.get("ename").asString();
			}
		}
		
		public class DownLeftNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public DownLeftNode(Value _downLeft) {
				if(!_downLeft.get("row").isNull())
					this._row = _downLeft.get("row").asInt();
				if(!_downLeft.get("col").isNull())
					this._col = _downLeft.get("col").asInt();
				if(!_downLeft.get("alive").isNull())
					this._alive = _downLeft.get("alive").asBoolean();
				if(!_downLeft.get("ename").isNull())
					this._ename = _downLeft.get("ename").asString();
			}
		}
		
	}
	
	public class CreateDiagonalsCoData extends NeoData {
		public final UpRightNode _upRight;
		public final UpRight_neighbours_0_downLeftRel _upRight_neighbours_0_downLeft;
		public final DownLeftNode _downLeft;
		public final DownLeft_neighbours_0_upRightRel _downLeft_neighbours_0_upRight;
		
		public CreateDiagonalsCoData(Record data) {
			var _upRight = data.get("upRight");
			this._upRight = new UpRightNode(_upRight);
			var _upRight_neighbours_0_downLeft = data.get("upRight_neighbours_0_downLeft");
			this._upRight_neighbours_0_downLeft = new UpRight_neighbours_0_downLeftRel(_upRight_neighbours_0_downLeft);
			var _downLeft = data.get("downLeft");
			this._downLeft = new DownLeftNode(_downLeft);
			var _downLeft_neighbours_0_upRight = data.get("downLeft_neighbours_0_upRight");
			this._downLeft_neighbours_0_upRight = new DownLeft_neighbours_0_upRightRel(_downLeft_neighbours_0_upRight);
		}
		
		
		public class UpRightNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public UpRightNode(Value _upRight) {
				if(!_upRight.get("row").isNull())
					this._row = _upRight.get("row").asInt();
				if(!_upRight.get("col").isNull())
					this._col = _upRight.get("col").asInt();
				if(!_upRight.get("alive").isNull())
					this._alive = _upRight.get("alive").asBoolean();
				if(!_upRight.get("ename").isNull())
					this._ename = _upRight.get("ename").asString();
			}
		}
		
		public class UpRight_neighbours_0_downLeftRel {
		
			public UpRight_neighbours_0_downLeftRel(Value _upRight_neighbours_0_downLeft) {
			}
		}
		public class DownLeftNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public DownLeftNode(Value _downLeft) {
				if(!_downLeft.get("row").isNull())
					this._row = _downLeft.get("row").asInt();
				if(!_downLeft.get("col").isNull())
					this._col = _downLeft.get("col").asInt();
				if(!_downLeft.get("alive").isNull())
					this._alive = _downLeft.get("alive").asBoolean();
				if(!_downLeft.get("ename").isNull())
					this._ename = _downLeft.get("ename").asString();
			}
		}
		
		public class DownLeft_neighbours_0_upRightRel {
		
			public DownLeft_neighbours_0_upRightRel(Value _downLeft_neighbours_0_upRight) {
			}
		}
	}
	
	public class CreateDiagonalsMask extends NeoMask {
		public CreateDiagonalsMask setUpRight(Long value) {
			nodeMask.put("upRight", value);
			return this;
		}
		public CreateDiagonalsMask setUpRightRow(int value) {
			attributeMask.put("upRight.row", value);
			return this;
		}
		public CreateDiagonalsMask setUpRightCol(int value) {
			attributeMask.put("upRight.col", value);
			return this;
		}
		public CreateDiagonalsMask setUpRightAlive(boolean value) {
			attributeMask.put("upRight.alive", value);
			return this;
		}
		public CreateDiagonalsMask setUpRightEname(String value) {
			attributeMask.put("upRight.ename", value);
			return this;
		}
		public CreateDiagonalsMask setDownLeft(Long value) {
			nodeMask.put("downLeft", value);
			return this;
		}
		public CreateDiagonalsMask setDownLeftRow(int value) {
			attributeMask.put("downLeft.row", value);
			return this;
		}
		public CreateDiagonalsMask setDownLeftCol(int value) {
			attributeMask.put("downLeft.col", value);
			return this;
		}
		public CreateDiagonalsMask setDownLeftAlive(boolean value) {
			attributeMask.put("downLeft.alive", value);
			return this;
		}
		public CreateDiagonalsMask setDownLeftEname(String value) {
			attributeMask.put("downLeft.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/ClassInhHier2DB/GameOfLife/bin/spec/GameOfLifeBuilder.msl#//@entities.8
	public AlreadyConnectedAccess getPattern_AlreadyConnected() {
		return new AlreadyConnectedAccess();
	}
	
	public class AlreadyConnectedAccess extends NeoPatternAccess<AlreadyConnectedData, AlreadyConnectedMask> {
		public final String _upRight = "upRight";
		public final String _downLeft = "downLeft";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(8);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<AlreadyConnectedData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new AlreadyConnectedData(d));
		}
		
		@Override
		public AlreadyConnectedMask mask() {
			return new AlreadyConnectedMask();
		}
	}
	
	public class AlreadyConnectedData extends NeoData {
		public final UpRightNode _upRight;
		public final UpRight_neighbours_0_downLeftRel _upRight_neighbours_0_downLeft;
		public final DownLeftNode _downLeft;
		public final DownLeft_neighbours_0_upRightRel _downLeft_neighbours_0_upRight;
		
		public AlreadyConnectedData(Record data) {
			var _upRight = data.get("upRight");
			this._upRight = new UpRightNode(_upRight);
			var _upRight_neighbours_0_downLeft = data.get("upRight_neighbours_0_downLeft");
			this._upRight_neighbours_0_downLeft = new UpRight_neighbours_0_downLeftRel(_upRight_neighbours_0_downLeft);
			var _downLeft = data.get("downLeft");
			this._downLeft = new DownLeftNode(_downLeft);
			var _downLeft_neighbours_0_upRight = data.get("downLeft_neighbours_0_upRight");
			this._downLeft_neighbours_0_upRight = new DownLeft_neighbours_0_upRightRel(_downLeft_neighbours_0_upRight);
		}
		
		
		public class UpRightNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public UpRightNode(Value _upRight) {
				if(!_upRight.get("row").isNull())
					this._row = _upRight.get("row").asInt();
				if(!_upRight.get("col").isNull())
					this._col = _upRight.get("col").asInt();
				if(!_upRight.get("alive").isNull())
					this._alive = _upRight.get("alive").asBoolean();
				if(!_upRight.get("ename").isNull())
					this._ename = _upRight.get("ename").asString();
			}
		}
		
		public class UpRight_neighbours_0_downLeftRel {
		
			public UpRight_neighbours_0_downLeftRel(Value _upRight_neighbours_0_downLeft) {
			}
		}
		public class DownLeftNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public DownLeftNode(Value _downLeft) {
				if(!_downLeft.get("row").isNull())
					this._row = _downLeft.get("row").asInt();
				if(!_downLeft.get("col").isNull())
					this._col = _downLeft.get("col").asInt();
				if(!_downLeft.get("alive").isNull())
					this._alive = _downLeft.get("alive").asBoolean();
				if(!_downLeft.get("ename").isNull())
					this._ename = _downLeft.get("ename").asString();
			}
		}
		
		public class DownLeft_neighbours_0_upRightRel {
		
			public DownLeft_neighbours_0_upRightRel(Value _downLeft_neighbours_0_upRight) {
			}
		}
	}
	
	public class AlreadyConnectedMask extends NeoMask {
		public AlreadyConnectedMask setUpRight(Long value) {
			nodeMask.put("upRight", value);
			return this;
		}
		public AlreadyConnectedMask setUpRightRow(int value) {
			attributeMask.put("upRight.row", value);
			return this;
		}
		public AlreadyConnectedMask setUpRightCol(int value) {
			attributeMask.put("upRight.col", value);
			return this;
		}
		public AlreadyConnectedMask setUpRightAlive(boolean value) {
			attributeMask.put("upRight.alive", value);
			return this;
		}
		public AlreadyConnectedMask setUpRightEname(String value) {
			attributeMask.put("upRight.ename", value);
			return this;
		}
		public AlreadyConnectedMask setDownLeft(Long value) {
			nodeMask.put("downLeft", value);
			return this;
		}
		public AlreadyConnectedMask setDownLeftRow(int value) {
			attributeMask.put("downLeft.row", value);
			return this;
		}
		public AlreadyConnectedMask setDownLeftCol(int value) {
			attributeMask.put("downLeft.col", value);
			return this;
		}
		public AlreadyConnectedMask setDownLeftAlive(boolean value) {
			attributeMask.put("downLeft.alive", value);
			return this;
		}
		public AlreadyConnectedMask setDownLeftEname(String value) {
			attributeMask.put("downLeft.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/ClassInhHier2DB/GameOfLife/bin/spec/GameOfLifeBuilder.msl#//@entities.9
	public ALiveCellAccess getPattern_ALiveCell() {
		return new ALiveCellAccess();
	}
	
	public class ALiveCellAccess extends NeoPatternAccess<ALiveCellData, ALiveCellMask> {
		public final String _cell = "cell";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(9);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<ALiveCellData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new ALiveCellData(d));
		}
		
		@Override
		public ALiveCellMask mask() {
			return new ALiveCellMask();
		}
	}
	
	public class ALiveCellData extends NeoData {
		public final CellNode _cell;
		
		public ALiveCellData(Record data) {
			var _cell = data.get("cell");
			this._cell = new CellNode(_cell);
		}
		
		
		public class CellNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public CellNode(Value _cell) {
				if(!_cell.get("row").isNull())
					this._row = _cell.get("row").asInt();
				if(!_cell.get("col").isNull())
					this._col = _cell.get("col").asInt();
				if(!_cell.get("alive").isNull())
					this._alive = _cell.get("alive").asBoolean();
				if(!_cell.get("ename").isNull())
					this._ename = _cell.get("ename").asString();
			}
		}
		
	}
	
	public class ALiveCellMask extends NeoMask {
		public ALiveCellMask setCell(Long value) {
			nodeMask.put("cell", value);
			return this;
		}
		public ALiveCellMask setCellRow(int value) {
			attributeMask.put("cell.row", value);
			return this;
		}
		public ALiveCellMask setCellCol(int value) {
			attributeMask.put("cell.col", value);
			return this;
		}
		public ALiveCellMask setCellAlive(boolean value) {
			attributeMask.put("cell.alive", value);
			return this;
		}
		public ALiveCellMask setCellEname(String value) {
			attributeMask.put("cell.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/ClassInhHier2DB/GameOfLife/bin/spec/GameOfLifeBuilder.msl#//@entities.10
	public MakeCellAliveAccess getRule_MakeCellAlive() {
		return new MakeCellAliveAccess();
	}
	
	public class MakeCellAliveAccess extends NeoRuleCoAccess<MakeCellAliveData, MakeCellAliveCoData, MakeCellAliveMask> {
		public final String _cell = "cell";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(10);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MakeCellAliveData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MakeCellAliveData(d));
		}
			
		@Override
		public Stream<MakeCellAliveCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MakeCellAliveCoData(d));
		}
		
		@Override
		public MakeCellAliveMask mask() {
			return new MakeCellAliveMask();
		}
	}
	
	public class MakeCellAliveData extends NeoData {
		public final CellNode _cell;
		
		public MakeCellAliveData(Record data) {
			var _cell = data.get("cell");
			this._cell = new CellNode(_cell);
		}
		
		
		public class CellNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public CellNode(Value _cell) {
				if(!_cell.get("row").isNull())
					this._row = _cell.get("row").asInt();
				if(!_cell.get("col").isNull())
					this._col = _cell.get("col").asInt();
				if(!_cell.get("alive").isNull())
					this._alive = _cell.get("alive").asBoolean();
				if(!_cell.get("ename").isNull())
					this._ename = _cell.get("ename").asString();
			}
		}
		
	}
	
	public class MakeCellAliveCoData extends NeoData {
		public final CellNode _cell;
		
		public MakeCellAliveCoData(Record data) {
			var _cell = data.get("cell");
			this._cell = new CellNode(_cell);
		}
		
		
		public class CellNode {
			public int _row;
			public int _col;
			public boolean _alive;
			public String _ename;
			
			public CellNode(Value _cell) {
				if(!_cell.get("row").isNull())
					this._row = _cell.get("row").asInt();
				if(!_cell.get("col").isNull())
					this._col = _cell.get("col").asInt();
				if(!_cell.get("alive").isNull())
					this._alive = _cell.get("alive").asBoolean();
				if(!_cell.get("ename").isNull())
					this._ename = _cell.get("ename").asString();
			}
		}
		
	}
	
	public class MakeCellAliveMask extends NeoMask {
		public MakeCellAliveMask setCell(Long value) {
			nodeMask.put("cell", value);
			return this;
		}
		public MakeCellAliveMask setCellRow(int value) {
			attributeMask.put("cell.row", value);
			return this;
		}
		public MakeCellAliveMask setCellCol(int value) {
			attributeMask.put("cell.col", value);
			return this;
		}
		public MakeCellAliveMask setCellAlive(boolean value) {
			attributeMask.put("cell.alive", value);
			return this;
		}
		public MakeCellAliveMask setCellEname(String value) {
			attributeMask.put("cell.ename", value);
			return this;
		}
	}
}
