/** 
 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
 */
package org.emoflon.neo.api.classinhhier2db.bin.org.emoflon.neo.example.javatodoc.performance;

import org.emoflon.neo.cypher.common.*;
import org.emoflon.neo.cypher.constraints.*;
import org.emoflon.neo.cypher.factories.*;
import org.emoflon.neo.cypher.models.*;
import org.emoflon.neo.cypher.patterns.*;
import org.emoflon.neo.cypher.rules.*;
import org.emoflon.neo.engine.api.patterns.*;
import org.emoflon.neo.engine.api.constraints.*;
import org.emoflon.neo.engine.api.rules.*;
import org.emoflon.neo.emsl.eMSL.*;
import org.emoflon.neo.emsl.util.*;
import org.neo4j.driver.Value;
import org.neo4j.driver.Record;
import org.eclipse.emf.common.util.URI;
import org.emoflon.neo.api.classinhhier2db.API_Common;
import java.util.Collection;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;
import java.util.Optional;
import java.time.LocalDate;

@SuppressWarnings("unused")
public class API_ConflictGenerator {
	private EMSL_Spec spec;
	private NeoCoreBuilder builder;

	/** Use this constructor for default values */
	public API_ConflictGenerator(NeoCoreBuilder builder) {
		this(builder, API_Common.PLATFORM_RESOURCE_URI, API_Common.PLATFORM_PLUGIN_URI, API_Common.NEOCORE_URI_INSTALLED);
	}

	/** Use this constructor to configure values for loading EMSL files */
	public API_ConflictGenerator(NeoCoreBuilder builder, String platformResourceURIRoot, String platformPluginURIRoot, String neocoreURI){
		this((EMSL_Spec) EMSLUtil.loadSpecification("platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/javatodoc/performance/ConflictGenerator.msl", platformResourceURIRoot, platformPluginURIRoot, neocoreURI), builder);
	}

	public API_ConflictGenerator(EMSL_Spec spec, NeoCoreBuilder builder) {
		this.spec = spec;
		this.builder = builder;
	}

	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/javatodoc/performance/ConflictGenerator.msl#//@entities.0
	public MoveMoveConflictAccess getRule_MoveMoveConflict() {
		return new MoveMoveConflictAccess();
	}
	
	public class MoveMoveConflictAccess extends NeoRuleCoAccess<MoveMoveConflictData, MoveMoveConflictCoData, MoveMoveConflictMask> {
		public final String _clazz = "clazz";
		public final String _otherClazz = "otherClazz";
		public final String _subClazz = "subClazz";
		public final String _doc = "doc";
		public final String _otherDoc = "otherDoc";
		public final String _subDoc = "subDoc";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(0);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MoveMoveConflictData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveMoveConflictData(d));
		}
			
		@Override
		public Stream<MoveMoveConflictCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveMoveConflictCoData(d));
		}
		
		@Override
		public MoveMoveConflictMask mask() {
			return new MoveMoveConflictMask();
		}
	}
	
	public class MoveMoveConflictData extends NeoData {
		public MoveMoveConflictData(Record data) {
		
		}
	}
	
	public class MoveMoveConflictCoData extends NeoData {
		public MoveMoveConflictCoData(Record data) {
		
		}
	}
	
	public class MoveMoveConflictMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/javatodoc/performance/ConflictGenerator.msl#//@entities.1
	public CreateDeleteConflictAccess getRule_CreateDeleteConflict() {
		return new CreateDeleteConflictAccess();
	}
	
	public class CreateDeleteConflictAccess extends NeoRuleCoAccess<CreateDeleteConflictData, CreateDeleteConflictCoData, CreateDeleteConflictMask> {
		public final String _clazz = "clazz";
		public final String _subClazz = "subClazz";
		public final String _method = "method";
		public final String _doc = "doc";
		public final String _subDoc = "subDoc";
		public final String _entry = "entry";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(1);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<CreateDeleteConflictData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateDeleteConflictData(d));
		}
			
		@Override
		public Stream<CreateDeleteConflictCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateDeleteConflictCoData(d));
		}
		
		@Override
		public CreateDeleteConflictMask mask() {
			return new CreateDeleteConflictMask();
		}
	}
	
	public class CreateDeleteConflictData extends NeoData {
		public CreateDeleteConflictData(Record data) {
		
		}
	}
	
	public class CreateDeleteConflictCoData extends NeoData {
		public CreateDeleteConflictCoData(Record data) {
		
		}
	}
	
	public class CreateDeleteConflictMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/javatodoc/performance/ConflictGenerator.msl#//@entities.2
	public MoveDeleteConflictAccess getRule_MoveDeleteConflict() {
		return new MoveDeleteConflictAccess();
	}
	
	public class MoveDeleteConflictAccess extends NeoRuleCoAccess<MoveDeleteConflictData, MoveDeleteConflictCoData, MoveDeleteConflictMask> {
		public final String _clazz = "clazz";
		public final String _otherClazz = "otherClazz";
		public final String _subClazz = "subClazz";
		public final String _doc = "doc";
		public final String _subDoc = "subDoc";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(2);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MoveDeleteConflictData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveDeleteConflictData(d));
		}
			
		@Override
		public Stream<MoveDeleteConflictCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveDeleteConflictCoData(d));
		}
		
		@Override
		public MoveDeleteConflictMask mask() {
			return new MoveDeleteConflictMask();
		}
	}
	
	public class MoveDeleteConflictData extends NeoData {
		public MoveDeleteConflictData(Record data) {
		
		}
	}
	
	public class MoveDeleteConflictCoData extends NeoData {
		public MoveDeleteConflictCoData(Record data) {
		
		}
	}
	
	public class MoveDeleteConflictMask extends NeoMask {
	}
}
