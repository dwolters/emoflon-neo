/** 
 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
 */
package org.emoflon.neo.api.classinhhier2db.bin;

import org.emoflon.neo.cypher.common.*;
import org.emoflon.neo.cypher.constraints.*;
import org.emoflon.neo.cypher.factories.*;
import org.emoflon.neo.cypher.models.*;
import org.emoflon.neo.cypher.patterns.*;
import org.emoflon.neo.cypher.rules.*;
import org.emoflon.neo.engine.api.patterns.*;
import org.emoflon.neo.engine.api.constraints.*;
import org.emoflon.neo.engine.api.rules.*;
import org.emoflon.neo.emsl.eMSL.*;
import org.emoflon.neo.emsl.util.*;
import org.neo4j.driver.Value;
import org.neo4j.driver.Record;
import org.eclipse.emf.common.util.URI;
import org.emoflon.neo.api.classinhhier2db.API_Common;
import java.util.Collection;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;
import java.util.Optional;
import java.time.LocalDate;

@SuppressWarnings("unused")
public class API_ChessPatterns {
	private EMSL_Spec spec;
	private NeoCoreBuilder builder;

	/** Use this constructor for default values */
	public API_ChessPatterns(NeoCoreBuilder builder) {
		this(builder, API_Common.PLATFORM_RESOURCE_URI, API_Common.PLATFORM_PLUGIN_URI, API_Common.NEOCORE_URI_INSTALLED);
	}

	/** Use this constructor to configure values for loading EMSL files */
	public API_ChessPatterns(NeoCoreBuilder builder, String platformResourceURIRoot, String platformPluginURIRoot, String neocoreURI){
		this((EMSL_Spec) EMSLUtil.loadSpecification("platform:/resource/ClassInhHier2DB/Chess/bin/ChessPatterns.msl", platformResourceURIRoot, platformPluginURIRoot, neocoreURI), builder);
	}

	public API_ChessPatterns(EMSL_Spec spec, NeoCoreBuilder builder) {
		this.spec = spec;
		this.builder = builder;
	}

	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/ChessPatterns.msl#//@entities.0
	public FourByFourFieldAccess getPattern_FourByFourField() {
		return new FourByFourFieldAccess();
	}
	
	public class FourByFourFieldAccess extends NeoPatternAccess<FourByFourFieldData, FourByFourFieldMask> {
		public final String _f00 = "f00";
		public final String _f01 = "f01";
		public final String _f02 = "f02";
		public final String _f03 = "f03";
		public final String _f10 = "f10";
		public final String _f11 = "f11";
		public final String _f12 = "f12";
		public final String _f13 = "f13";
		public final String _f20 = "f20";
		public final String _f21 = "f21";
		public final String _f22 = "f22";
		public final String _f23 = "f23";
		public final String _f30 = "f30";
		public final String _f31 = "f31";
		public final String _f32 = "f32";
		public final String _f33 = "f33";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(0);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<FourByFourFieldData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new FourByFourFieldData(d));
		}
		
		@Override
		public FourByFourFieldMask mask() {
			return new FourByFourFieldMask();
		}
	}
	
	public class FourByFourFieldData extends NeoData {
		public FourByFourFieldData(Record data) {
			
		}
	}
	
	public class FourByFourFieldMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/ChessPatterns.msl#//@entities.1
	public CompleteBoardAccess getPattern_CompleteBoard() {
		return new CompleteBoardAccess();
	}
	
	public class CompleteBoardAccess extends NeoPatternAccess<CompleteBoardData, CompleteBoardMask> {
		public final String _f50 = "f50";
		public final String _f52 = "f52";
		public final String _f51 = "f51";
		public final String _f10 = "f10";
		public final String _f54 = "f54";
		public final String _f53 = "f53";
		public final String _f12 = "f12";
		public final String _f56 = "f56";
		public final String _f11 = "f11";
		public final String _f55 = "f55";
		public final String _f14 = "f14";
		public final String _f13 = "f13";
		public final String _f57 = "f57";
		public final String _f16 = "f16";
		public final String _f15 = "f15";
		public final String _f17 = "f17";
		public final String _f61 = "f61";
		public final String _f60 = "f60";
		public final String _f63 = "f63";
		public final String _f62 = "f62";
		public final String _f21 = "f21";
		public final String _f65 = "f65";
		public final String _f20 = "f20";
		public final String _f64 = "f64";
		public final String _f23 = "f23";
		public final String _f67 = "f67";
		public final String _f22 = "f22";
		public final String _f66 = "f66";
		public final String _f25 = "f25";
		public final String _f24 = "f24";
		public final String _f27 = "f27";
		public final String _f26 = "f26";
		public final String _f70 = "f70";
		public final String _f72 = "f72";
		public final String _f71 = "f71";
		public final String _f30 = "f30";
		public final String _f74 = "f74";
		public final String _f73 = "f73";
		public final String _f32 = "f32";
		public final String _f76 = "f76";
		public final String _f31 = "f31";
		public final String _f75 = "f75";
		public final String _f34 = "f34";
		public final String _f33 = "f33";
		public final String _f77 = "f77";
		public final String _f36 = "f36";
		public final String _f35 = "f35";
		public final String _f37 = "f37";
		public final String _f41 = "f41";
		public final String _f40 = "f40";
		public final String _f43 = "f43";
		public final String _f42 = "f42";
		public final String _f01 = "f01";
		public final String _f45 = "f45";
		public final String _f00 = "f00";
		public final String _f44 = "f44";
		public final String _f03 = "f03";
		public final String _f47 = "f47";
		public final String _f02 = "f02";
		public final String _f46 = "f46";
		public final String _f05 = "f05";
		public final String _f04 = "f04";
		public final String _f07 = "f07";
		public final String _f06 = "f06";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(1);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<CompleteBoardData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CompleteBoardData(d));
		}
		
		@Override
		public CompleteBoardMask mask() {
			return new CompleteBoardMask();
		}
	}
	
	public class CompleteBoardData extends NeoData {
		public CompleteBoardData(Record data) {
			
		}
	}
	
	public class CompleteBoardMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/ChessPatterns.msl#//@entities.2
	public PawnOnFieldAccess getPattern_PawnOnField() {
		return new PawnOnFieldAccess();
	}
	
	public class PawnOnFieldAccess extends NeoPatternAccess<PawnOnFieldData, PawnOnFieldMask> {
		public final String _p = "p";
		public final String _f = "f";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(2);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<PawnOnFieldData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new PawnOnFieldData(d));
		}
		
		@Override
		public PawnOnFieldMask mask() {
			return new PawnOnFieldMask();
		}
	}
	
	public class PawnOnFieldData extends NeoData {
		public PawnOnFieldData(Record data) {
			
		}
	}
	
	public class PawnOnFieldMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/ChessPatterns.msl#//@entities.3
	public WhitePawnAccess getPattern_WhitePawn() {
		return new WhitePawnAccess();
	}
	
	public class WhitePawnAccess extends NeoPatternAccess<WhitePawnData, WhitePawnMask> {
		public final String _p = "p";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(3);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<WhitePawnData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new WhitePawnData(d));
		}
		
		@Override
		public WhitePawnMask mask() {
			return new WhitePawnMask();
		}
	}
	
	public class WhitePawnData extends NeoData {
		public WhitePawnData(Record data) {
			
		}
	}
	
	public class WhitePawnMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/ChessPatterns.msl#//@entities.4
	public BlackPawnAccess getPattern_BlackPawn() {
		return new BlackPawnAccess();
	}
	
	public class BlackPawnAccess extends NeoPatternAccess<BlackPawnData, BlackPawnMask> {
		public final String _p = "p";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(4);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<BlackPawnData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new BlackPawnData(d));
		}
		
		@Override
		public BlackPawnMask mask() {
			return new BlackPawnMask();
		}
	}
	
	public class BlackPawnData extends NeoData {
		public BlackPawnData(Record data) {
			
		}
	}
	
	public class BlackPawnMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/ChessPatterns.msl#//@entities.5
	public WhitePawnOnFieldAccess getPattern_WhitePawnOnField() {
		return new WhitePawnOnFieldAccess();
	}
	
	public class WhitePawnOnFieldAccess extends NeoPatternAccess<WhitePawnOnFieldData, WhitePawnOnFieldMask> {
		public final String _p = "p";
		public final String _f = "f";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(5);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<WhitePawnOnFieldData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new WhitePawnOnFieldData(d));
		}
		
		@Override
		public WhitePawnOnFieldMask mask() {
			return new WhitePawnOnFieldMask();
		}
	}
	
	public class WhitePawnOnFieldData extends NeoData {
		public WhitePawnOnFieldData(Record data) {
			
		}
	}
	
	public class WhitePawnOnFieldMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/ChessPatterns.msl#//@entities.6
	public BlackPawnOnFieldAccess getPattern_BlackPawnOnField() {
		return new BlackPawnOnFieldAccess();
	}
	
	public class BlackPawnOnFieldAccess extends NeoPatternAccess<BlackPawnOnFieldData, BlackPawnOnFieldMask> {
		public final String _p = "p";
		public final String _f = "f";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(6);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<BlackPawnOnFieldData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new BlackPawnOnFieldData(d));
		}
		
		@Override
		public BlackPawnOnFieldMask mask() {
			return new BlackPawnOnFieldMask();
		}
	}
	
	public class BlackPawnOnFieldData extends NeoData {
		public BlackPawnOnFieldData(Record data) {
			
		}
	}
	
	public class BlackPawnOnFieldMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/ChessPatterns.msl#//@entities.7
	public FiguresOnFieldsAccess getPattern_FiguresOnFields() {
		return new FiguresOnFieldsAccess();
	}
	
	public class FiguresOnFieldsAccess extends NeoPatternAccess<FiguresOnFieldsData, FiguresOnFieldsMask> {
		public final String _p0 = "p0";
		public final String _r2 = "r2";
		public final String _p1 = "p1";
		public final String _p2 = "p2";
		public final String _p3 = "p3";
		public final String _f10 = "f10";
		public final String _p4 = "p4";
		public final String _p5 = "p5";
		public final String _f12 = "f12";
		public final String _p6 = "p6";
		public final String _f11 = "f11";
		public final String _p7 = "p7";
		public final String _f14 = "f14";
		public final String _f13 = "f13";
		public final String _f16 = "f16";
		public final String _f15 = "f15";
		public final String _f17 = "f17";
		public final String _b1 = "b1";
		public final String _b2 = "b2";
		public final String _k1 = "k1";
		public final String _f01 = "f01";
		public final String _k2 = "k2";
		public final String _f00 = "f00";
		public final String _f03 = "f03";
		public final String _f02 = "f02";
		public final String _f05 = "f05";
		public final String _k = "k";
		public final String _f04 = "f04";
		public final String _f07 = "f07";
		public final String _f06 = "f06";
		public final String _q = "q";
		public final String _r1 = "r1";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(7);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<FiguresOnFieldsData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new FiguresOnFieldsData(d));
		}
		
		@Override
		public FiguresOnFieldsMask mask() {
			return new FiguresOnFieldsMask();
		}
	}
	
	public class FiguresOnFieldsData extends NeoData {
		public FiguresOnFieldsData(Record data) {
			
		}
	}
	
	public class FiguresOnFieldsMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/ChessPatterns.msl#//@entities.8
	public StartConfigurationLinesAccess getPattern_StartConfigurationLines() {
		return new StartConfigurationLinesAccess();
	}
	
	public class StartConfigurationLinesAccess extends NeoPatternAccess<StartConfigurationLinesData, StartConfigurationLinesMask> {
		public final String _p0 = "p0";
		public final String _r2 = "r2";
		public final String _p1 = "p1";
		public final String _p2 = "p2";
		public final String _p3 = "p3";
		public final String _f10 = "f10";
		public final String _p4 = "p4";
		public final String _p5 = "p5";
		public final String _f12 = "f12";
		public final String _p6 = "p6";
		public final String _f11 = "f11";
		public final String _p7 = "p7";
		public final String _f14 = "f14";
		public final String _f13 = "f13";
		public final String _f16 = "f16";
		public final String _f15 = "f15";
		public final String _f17 = "f17";
		public final String _b1 = "b1";
		public final String _b2 = "b2";
		public final String _k1 = "k1";
		public final String _f01 = "f01";
		public final String _k2 = "k2";
		public final String _f00 = "f00";
		public final String _f03 = "f03";
		public final String _f02 = "f02";
		public final String _f05 = "f05";
		public final String _k = "k";
		public final String _f04 = "f04";
		public final String _f07 = "f07";
		public final String _f06 = "f06";
		public final String _q = "q";
		public final String _r1 = "r1";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(8);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<StartConfigurationLinesData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new StartConfigurationLinesData(d));
		}
		
		@Override
		public StartConfigurationLinesMask mask() {
			return new StartConfigurationLinesMask();
		}
	}
	
	public class StartConfigurationLinesData extends NeoData {
		public StartConfigurationLinesData(Record data) {
			
		}
	}
	
	public class StartConfigurationLinesMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/ChessPatterns.msl#//@entities.9
	public WhiteStartConfigurationAccess getPattern_WhiteStartConfiguration() {
		return new WhiteStartConfigurationAccess();
	}
	
	public class WhiteStartConfigurationAccess extends NeoPatternAccess<WhiteStartConfigurationData, WhiteStartConfigurationMask> {
		public final String _p0 = "p0";
		public final String _r2 = "r2";
		public final String _p1 = "p1";
		public final String _p2 = "p2";
		public final String _p3 = "p3";
		public final String _p4 = "p4";
		public final String _f10 = "f10";
		public final String _p5 = "p5";
		public final String _p6 = "p6";
		public final String _f12 = "f12";
		public final String _p7 = "p7";
		public final String _f11 = "f11";
		public final String _f14 = "f14";
		public final String _f13 = "f13";
		public final String _f16 = "f16";
		public final String _f15 = "f15";
		public final String _f17 = "f17";
		public final String _b1 = "b1";
		public final String _b2 = "b2";
		public final String _k1 = "k1";
		public final String _f01 = "f01";
		public final String _k2 = "k2";
		public final String _f00 = "f00";
		public final String _f03 = "f03";
		public final String _f02 = "f02";
		public final String _f05 = "f05";
		public final String _k = "k";
		public final String _f04 = "f04";
		public final String _f07 = "f07";
		public final String _f06 = "f06";
		public final String _q = "q";
		public final String _r1 = "r1";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(9);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<WhiteStartConfigurationData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new WhiteStartConfigurationData(d));
		}
		
		@Override
		public WhiteStartConfigurationMask mask() {
			return new WhiteStartConfigurationMask();
		}
	}
	
	public class WhiteStartConfigurationData extends NeoData {
		public WhiteStartConfigurationData(Record data) {
			
		}
	}
	
	public class WhiteStartConfigurationMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/ChessPatterns.msl#//@entities.10
	public BlackStartConfigurationAccess getPattern_BlackStartConfiguration() {
		return new BlackStartConfigurationAccess();
	}
	
	public class BlackStartConfigurationAccess extends NeoPatternAccess<BlackStartConfigurationData, BlackStartConfigurationMask> {
		public final String _p0 = "p0";
		public final String _r2 = "r2";
		public final String _p1 = "p1";
		public final String _p2 = "p2";
		public final String _p3 = "p3";
		public final String _p4 = "p4";
		public final String _f10 = "f10";
		public final String _p5 = "p5";
		public final String _p6 = "p6";
		public final String _f12 = "f12";
		public final String _p7 = "p7";
		public final String _f11 = "f11";
		public final String _f14 = "f14";
		public final String _f13 = "f13";
		public final String _f16 = "f16";
		public final String _f15 = "f15";
		public final String _f17 = "f17";
		public final String _b1 = "b1";
		public final String _b2 = "b2";
		public final String _k1 = "k1";
		public final String _f01 = "f01";
		public final String _k2 = "k2";
		public final String _f00 = "f00";
		public final String _f03 = "f03";
		public final String _f02 = "f02";
		public final String _f05 = "f05";
		public final String _k = "k";
		public final String _f04 = "f04";
		public final String _f07 = "f07";
		public final String _f06 = "f06";
		public final String _q = "q";
		public final String _r1 = "r1";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(10);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<BlackStartConfigurationData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new BlackStartConfigurationData(d));
		}
		
		@Override
		public BlackStartConfigurationMask mask() {
			return new BlackStartConfigurationMask();
		}
	}
	
	public class BlackStartConfigurationData extends NeoData {
		public BlackStartConfigurationData(Record data) {
			
		}
	}
	
	public class BlackStartConfigurationMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/ChessPatterns.msl#//@entities.11
	public StartingBoardAccess getPattern_StartingBoard() {
		return new StartingBoardAccess();
	}
	
	public class StartingBoardAccess extends NeoPatternAccess<StartingBoardData, StartingBoardMask> {
		public final String _f50 = "f50";
		public final String _r2 = "r2";
		public final String _f52 = "f52";
		public final String _f51 = "f51";
		public final String _f10 = "f10";
		public final String _f54 = "f54";
		public final String _f53 = "f53";
		public final String _f12 = "f12";
		public final String _f56 = "f56";
		public final String _f11 = "f11";
		public final String _f55 = "f55";
		public final String _f14 = "f14";
		public final String _f13 = "f13";
		public final String _f57 = "f57";
		public final String _f16 = "f16";
		public final String _f15 = "f15";
		public final String _f17 = "f17";
		public final String _b1 = "b1";
		public final String _b2 = "b2";
		public final String _k1w = "k1w";
		public final String _p7w = "p7w";
		public final String _p3w = "p3w";
		public final String _f61 = "f61";
		public final String _f60 = "f60";
		public final String _f63 = "f63";
		public final String _f62 = "f62";
		public final String _f21 = "f21";
		public final String _f65 = "f65";
		public final String _f20 = "f20";
		public final String _f64 = "f64";
		public final String _f23 = "f23";
		public final String _f67 = "f67";
		public final String _k1 = "k1";
		public final String _qw = "qw";
		public final String _f22 = "f22";
		public final String _f66 = "f66";
		public final String _k2 = "k2";
		public final String _f25 = "f25";
		public final String _f24 = "f24";
		public final String _f27 = "f27";
		public final String _f26 = "f26";
		public final String _k2w = "k2w";
		public final String _p4w = "p4w";
		public final String _p0w = "p0w";
		public final String _f70 = "f70";
		public final String _f72 = "f72";
		public final String _p0 = "p0";
		public final String _f71 = "f71";
		public final String _p1 = "p1";
		public final String _f30 = "f30";
		public final String _f74 = "f74";
		public final String _p2 = "p2";
		public final String _f73 = "f73";
		public final String _p3 = "p3";
		public final String _f32 = "f32";
		public final String _f76 = "f76";
		public final String _p4 = "p4";
		public final String _f31 = "f31";
		public final String _f75 = "f75";
		public final String _p5 = "p5";
		public final String _f34 = "f34";
		public final String _p6 = "p6";
		public final String _f33 = "f33";
		public final String _f77 = "f77";
		public final String _p7 = "p7";
		public final String _f36 = "f36";
		public final String _f35 = "f35";
		public final String _b1w = "b1w";
		public final String _f37 = "f37";
		public final String _p5w = "p5w";
		public final String _p1w = "p1w";
		public final String _r1w = "r1w";
		public final String _f41 = "f41";
		public final String _f40 = "f40";
		public final String _f43 = "f43";
		public final String _f42 = "f42";
		public final String _f01 = "f01";
		public final String _f45 = "f45";
		public final String _b2w = "b2w";
		public final String _f00 = "f00";
		public final String _f44 = "f44";
		public final String _f03 = "f03";
		public final String _f47 = "f47";
		public final String _f02 = "f02";
		public final String _f46 = "f46";
		public final String _f05 = "f05";
		public final String _f04 = "f04";
		public final String _k = "k";
		public final String _f07 = "f07";
		public final String _kw = "kw";
		public final String _f06 = "f06";
		public final String _p6w = "p6w";
		public final String _q = "q";
		public final String _p2w = "p2w";
		public final String _r2w = "r2w";
		public final String _r1 = "r1";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(11);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<StartingBoardData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new StartingBoardData(d));
		}
		
		@Override
		public StartingBoardMask mask() {
			return new StartingBoardMask();
		}
	}
	
	public class StartingBoardData extends NeoData {
		public StartingBoardData(Record data) {
			
		}
	}
	
	public class StartingBoardMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/ChessPatterns.msl#//@entities.12
	public AllPawnsOnBoardAccess getPattern_AllPawnsOnBoard() {
		return new AllPawnsOnBoardAccess();
	}
	
	public class AllPawnsOnBoardAccess extends NeoPatternAccess<AllPawnsOnBoardData, AllPawnsOnBoardMask> {
		public final String _p0 = "p0";
		public final String _p1 = "p1";
		public final String _p2 = "p2";
		public final String _p3 = "p3";
		public final String _f10 = "f10";
		public final String _p4 = "p4";
		public final String _p5 = "p5";
		public final String _f12 = "f12";
		public final String _p6 = "p6";
		public final String _p7 = "p7";
		public final String _f11 = "f11";
		public final String _f14 = "f14";
		public final String _pw0 = "pw0";
		public final String _f13 = "f13";
		public final String _f16 = "f16";
		public final String _pw2 = "pw2";
		public final String _f15 = "f15";
		public final String _pw1 = "pw1";
		public final String _pw4 = "pw4";
		public final String _f17 = "f17";
		public final String _pw3 = "pw3";
		public final String _pw6 = "pw6";
		public final String _pw5 = "pw5";
		public final String _pw7 = "pw7";
		public final String _f61 = "f61";
		public final String _f60 = "f60";
		public final String _f63 = "f63";
		public final String _f62 = "f62";
		public final String _f65 = "f65";
		public final String _f64 = "f64";
		public final String _f67 = "f67";
		public final String _f66 = "f66";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(12);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<AllPawnsOnBoardData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new AllPawnsOnBoardData(d));
		}
		
		@Override
		public AllPawnsOnBoardMask mask() {
			return new AllPawnsOnBoardMask();
		}
	}
	
	public class AllPawnsOnBoardData extends NeoData {
		public AllPawnsOnBoardData(Record data) {
			
		}
	}
	
	public class AllPawnsOnBoardMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/ChessPatterns.msl#//@entities.13
	public CaroKannDefenseAccess getPattern_CaroKannDefense() {
		return new CaroKannDefenseAccess();
	}
	
	public class CaroKannDefenseAccess extends NeoPatternAccess<CaroKannDefenseData, CaroKannDefenseMask> {
		public final String _p0 = "p0";
		public final String _p1 = "p1";
		public final String _p2 = "p2";
		public final String _p3 = "p3";
		public final String _f10 = "f10";
		public final String _p4 = "p4";
		public final String _p5 = "p5";
		public final String _f12 = "f12";
		public final String _p6 = "p6";
		public final String _p7 = "p7";
		public final String _f11 = "f11";
		public final String _f14 = "f14";
		public final String _pw0 = "pw0";
		public final String _f13 = "f13";
		public final String _f16 = "f16";
		public final String _pw2 = "pw2";
		public final String _f15 = "f15";
		public final String _pw1 = "pw1";
		public final String _pw4 = "pw4";
		public final String _tmp1 = "tmp1";
		public final String _f17 = "f17";
		public final String _pw3 = "pw3";
		public final String _tmp2 = "tmp2";
		public final String _pw6 = "pw6";
		public final String _pw5 = "pw5";
		public final String _pw7 = "pw7";
		public final String _f61 = "f61";
		public final String _f60 = "f60";
		public final String _f63 = "f63";
		public final String _f62 = "f62";
		public final String _f65 = "f65";
		public final String _f64 = "f64";
		public final String _f67 = "f67";
		public final String _f66 = "f66";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(13);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<CaroKannDefenseData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CaroKannDefenseData(d));
		}
		
		@Override
		public CaroKannDefenseMask mask() {
			return new CaroKannDefenseMask();
		}
	}
	
	public class CaroKannDefenseData extends NeoData {
		public CaroKannDefenseData(Record data) {
			
		}
	}
	
	public class CaroKannDefenseMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/ChessPatterns.msl#//@entities.14
	public KingsGambitAccess getPattern_KingsGambit() {
		return new KingsGambitAccess();
	}
	
	public class KingsGambitAccess extends NeoPatternAccess<KingsGambitData, KingsGambitMask> {
		public final String _p0 = "p0";
		public final String _p1 = "p1";
		public final String _p2 = "p2";
		public final String _p3 = "p3";
		public final String _f10 = "f10";
		public final String _p4 = "p4";
		public final String _p5 = "p5";
		public final String _f12 = "f12";
		public final String _p6 = "p6";
		public final String _p7 = "p7";
		public final String _f11 = "f11";
		public final String _f14 = "f14";
		public final String _pw0 = "pw0";
		public final String _f13 = "f13";
		public final String _f16 = "f16";
		public final String _pw2 = "pw2";
		public final String _f15 = "f15";
		public final String _pw1 = "pw1";
		public final String _pw4 = "pw4";
		public final String _tmp1 = "tmp1";
		public final String _f17 = "f17";
		public final String _pw3 = "pw3";
		public final String _tmp2 = "tmp2";
		public final String _pw6 = "pw6";
		public final String _pw5 = "pw5";
		public final String _pw7 = "pw7";
		public final String _f61 = "f61";
		public final String _f60 = "f60";
		public final String _f63 = "f63";
		public final String _f62 = "f62";
		public final String _f65 = "f65";
		public final String _f64 = "f64";
		public final String _f67 = "f67";
		public final String _f66 = "f66";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(14);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<KingsGambitData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new KingsGambitData(d));
		}
		
		@Override
		public KingsGambitMask mask() {
			return new KingsGambitMask();
		}
	}
	
	public class KingsGambitData extends NeoData {
		public KingsGambitData(Record data) {
			
		}
	}
	
	public class KingsGambitMask extends NeoMask {
	}
}
