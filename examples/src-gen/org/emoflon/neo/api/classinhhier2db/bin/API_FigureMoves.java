/** 
 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
 */
package org.emoflon.neo.api.classinhhier2db.bin;

import org.emoflon.neo.cypher.common.*;
import org.emoflon.neo.cypher.constraints.*;
import org.emoflon.neo.cypher.factories.*;
import org.emoflon.neo.cypher.models.*;
import org.emoflon.neo.cypher.patterns.*;
import org.emoflon.neo.cypher.rules.*;
import org.emoflon.neo.engine.api.patterns.*;
import org.emoflon.neo.engine.api.constraints.*;
import org.emoflon.neo.engine.api.rules.*;
import org.emoflon.neo.emsl.eMSL.*;
import org.emoflon.neo.emsl.util.*;
import org.neo4j.driver.Value;
import org.neo4j.driver.Record;
import org.eclipse.emf.common.util.URI;
import org.emoflon.neo.api.classinhhier2db.API_Common;
import java.util.Collection;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;
import java.util.Optional;
import java.time.LocalDate;

@SuppressWarnings("unused")
public class API_FigureMoves {
	private EMSL_Spec spec;
	private NeoCoreBuilder builder;

	/** Use this constructor for default values */
	public API_FigureMoves(NeoCoreBuilder builder) {
		this(builder, API_Common.PLATFORM_RESOURCE_URI, API_Common.PLATFORM_PLUGIN_URI, API_Common.NEOCORE_URI_INSTALLED);
	}

	/** Use this constructor to configure values for loading EMSL files */
	public API_FigureMoves(NeoCoreBuilder builder, String platformResourceURIRoot, String platformPluginURIRoot, String neocoreURI){
		this((EMSL_Spec) EMSLUtil.loadSpecification("platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl", platformResourceURIRoot, platformPluginURIRoot, neocoreURI), builder);
	}

	public API_FigureMoves(EMSL_Spec spec, NeoCoreBuilder builder) {
		this.spec = spec;
		this.builder = builder;
	}

	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.0
	public ByOwnColourOccupiedFieldAccess getPattern_ByOwnColourOccupiedField() {
		return new ByOwnColourOccupiedFieldAccess();
	}
	
	public class ByOwnColourOccupiedFieldAccess extends NeoPatternAccess<ByOwnColourOccupiedFieldData, ByOwnColourOccupiedFieldMask> {
		public final String _blockingFig = "blockingFig";
		public final String _fig = "fig";
		public final String _to = "to";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(0);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<ByOwnColourOccupiedFieldData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new ByOwnColourOccupiedFieldData(d));
		}
		
		@Override
		public ByOwnColourOccupiedFieldMask mask() {
			return new ByOwnColourOccupiedFieldMask();
		}
	}
	
	public class ByOwnColourOccupiedFieldData extends NeoData {
		public ByOwnColourOccupiedFieldData(Record data) {
			
		}
	}
	
	public class ByOwnColourOccupiedFieldMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.1
	public BottomLeftReferenceAccess getPattern_BottomLeftReference() {
		return new BottomLeftReferenceAccess();
	}
	
	public class BottomLeftReferenceAccess extends NeoPatternAccess<BottomLeftReferenceData, BottomLeftReferenceMask> {
		public final String _f = "f";
		public final String _f2 = "f2";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(1);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<BottomLeftReferenceData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new BottomLeftReferenceData(d));
		}
		
		@Override
		public BottomLeftReferenceMask mask() {
			return new BottomLeftReferenceMask();
		}
	}
	
	public class BottomLeftReferenceData extends NeoData {
		public BottomLeftReferenceData(Record data) {
			
		}
	}
	
	public class BottomLeftReferenceMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.2
	public BottomRightReferenceAccess getPattern_BottomRightReference() {
		return new BottomRightReferenceAccess();
	}
	
	public class BottomRightReferenceAccess extends NeoPatternAccess<BottomRightReferenceData, BottomRightReferenceMask> {
		public final String _f = "f";
		public final String _f2 = "f2";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(2);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<BottomRightReferenceData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new BottomRightReferenceData(d));
		}
		
		@Override
		public BottomRightReferenceMask mask() {
			return new BottomRightReferenceMask();
		}
	}
	
	public class BottomRightReferenceData extends NeoData {
		public BottomRightReferenceData(Record data) {
			
		}
	}
	
	public class BottomRightReferenceMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.3
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.4
	public RemoveStandsOnEdgeAccess getRule_RemoveStandsOnEdge() {
		return new RemoveStandsOnEdgeAccess();
	}
	
	public class RemoveStandsOnEdgeAccess extends NeoRuleCoAccess<RemoveStandsOnEdgeData, RemoveStandsOnEdgeCoData, RemoveStandsOnEdgeMask> {
		public final String _fig = "fig";
		public final String _f = "f";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(4);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<RemoveStandsOnEdgeData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new RemoveStandsOnEdgeData(d));
		}
			
		@Override
		public Stream<RemoveStandsOnEdgeCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new RemoveStandsOnEdgeCoData(d));
		}
		
		@Override
		public RemoveStandsOnEdgeMask mask() {
			return new RemoveStandsOnEdgeMask();
		}
	}
	
	public class RemoveStandsOnEdgeData extends NeoData {
		public RemoveStandsOnEdgeData(Record data) {
		
		}
	}
	
	public class RemoveStandsOnEdgeCoData extends NeoData {
		public RemoveStandsOnEdgeCoData(Record data) {
		
		}
	}
	
	public class RemoveStandsOnEdgeMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.5
	public AddStandsOnEdgeAccess getRule_AddStandsOnEdge() {
		return new AddStandsOnEdgeAccess();
	}
	
	public class AddStandsOnEdgeAccess extends NeoRuleCoAccess<AddStandsOnEdgeData, AddStandsOnEdgeCoData, AddStandsOnEdgeMask> {
		public final String _fig = "fig";
		public final String _f = "f";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(5);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<AddStandsOnEdgeData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new AddStandsOnEdgeData(d));
		}
			
		@Override
		public Stream<AddStandsOnEdgeCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new AddStandsOnEdgeCoData(d));
		}
		
		@Override
		public AddStandsOnEdgeMask mask() {
			return new AddStandsOnEdgeMask();
		}
	}
	
	public class AddStandsOnEdgeData extends NeoData {
		public AddStandsOnEdgeData(Record data) {
		
		}
	}
	
	public class AddStandsOnEdgeCoData extends NeoData {
		public AddStandsOnEdgeCoData(Record data) {
		
		}
	}
	
	public class AddStandsOnEdgeMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.6
	public MoveFigureByRefinementAccess getRule_MoveFigureByRefinement() {
		return new MoveFigureByRefinementAccess();
	}
	
	public class MoveFigureByRefinementAccess extends NeoRuleCoAccess<MoveFigureByRefinementData, MoveFigureByRefinementCoData, MoveFigureByRefinementMask> {
		public final String _fig = "fig";
		public final String _from = "from";
		public final String _to = "to";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(6);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MoveFigureByRefinementData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveFigureByRefinementData(d));
		}
			
		@Override
		public Stream<MoveFigureByRefinementCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveFigureByRefinementCoData(d));
		}
		
		@Override
		public MoveFigureByRefinementMask mask() {
			return new MoveFigureByRefinementMask();
		}
	}
	
	public class MoveFigureByRefinementData extends NeoData {
		public MoveFigureByRefinementData(Record data) {
		
		}
	}
	
	public class MoveFigureByRefinementCoData extends NeoData {
		public MoveFigureByRefinementCoData(Record data) {
		
		}
	}
	
	public class MoveFigureByRefinementMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.7
	public MovePawnByRefinementAccess getRule_MovePawnByRefinement() {
		return new MovePawnByRefinementAccess();
	}
	
	public class MovePawnByRefinementAccess extends NeoRuleCoAccess<MovePawnByRefinementData, MovePawnByRefinementCoData, MovePawnByRefinementMask> {
		public final String _fig = "fig";
		public final String _from = "from";
		public final String _to = "to";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(7);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MovePawnByRefinementData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MovePawnByRefinementData(d));
		}
			
		@Override
		public Stream<MovePawnByRefinementCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MovePawnByRefinementCoData(d));
		}
		
		@Override
		public MovePawnByRefinementMask mask() {
			return new MovePawnByRefinementMask();
		}
	}
	
	public class MovePawnByRefinementData extends NeoData {
		public MovePawnByRefinementData(Record data) {
		
		}
	}
	
	public class MovePawnByRefinementCoData extends NeoData {
		public MovePawnByRefinementCoData(Record data) {
		
		}
	}
	
	public class MovePawnByRefinementMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.8
	public MovePawnAccess getRule_MovePawn() {
		return new MovePawnAccess();
	}
	
	public class MovePawnAccess extends NeoRuleCoAccess<MovePawnData, MovePawnCoData, MovePawnMask> {
		public final String _fig = "fig";
		public final String _from = "from";
		public final String _to = "to";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(8);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MovePawnData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MovePawnData(d));
		}
			
		@Override
		public Stream<MovePawnCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MovePawnCoData(d));
		}
		
		@Override
		public MovePawnMask mask() {
			return new MovePawnMask();
		}
	}
	
	public class MovePawnData extends NeoData {
		public MovePawnData(Record data) {
		
		}
	}
	
	public class MovePawnCoData extends NeoData {
		public MovePawnCoData(Record data) {
		
		}
	}
	
	public class MovePawnMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.9
	public MoveWhitePawnAccess getRule_MoveWhitePawn() {
		return new MoveWhitePawnAccess();
	}
	
	public class MoveWhitePawnAccess extends NeoRuleCoAccess<MoveWhitePawnData, MoveWhitePawnCoData, MoveWhitePawnMask> {
		public final String _fig = "fig";
		public final String _from = "from";
		public final String _to = "to";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(9);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MoveWhitePawnData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveWhitePawnData(d));
		}
			
		@Override
		public Stream<MoveWhitePawnCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveWhitePawnCoData(d));
		}
		
		@Override
		public MoveWhitePawnMask mask() {
			return new MoveWhitePawnMask();
		}
	}
	
	public class MoveWhitePawnData extends NeoData {
		public MoveWhitePawnData(Record data) {
		
		}
	}
	
	public class MoveWhitePawnCoData extends NeoData {
		public MoveWhitePawnCoData(Record data) {
		
		}
	}
	
	public class MoveWhitePawnMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.10
	public MoveBlackPawnAccess getRule_MoveBlackPawn() {
		return new MoveBlackPawnAccess();
	}
	
	public class MoveBlackPawnAccess extends NeoRuleCoAccess<MoveBlackPawnData, MoveBlackPawnCoData, MoveBlackPawnMask> {
		public final String _fig = "fig";
		public final String _from = "from";
		public final String _to = "to";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(10);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MoveBlackPawnData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveBlackPawnData(d));
		}
			
		@Override
		public Stream<MoveBlackPawnCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveBlackPawnCoData(d));
		}
		
		@Override
		public MoveBlackPawnMask mask() {
			return new MoveBlackPawnMask();
		}
	}
	
	public class MoveBlackPawnData extends NeoData {
		public MoveBlackPawnData(Record data) {
		
		}
	}
	
	public class MoveBlackPawnCoData extends NeoData {
		public MoveBlackPawnCoData(Record data) {
		
		}
	}
	
	public class MoveBlackPawnMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.11
	public AlreadyMovedAccess getPattern_AlreadyMoved() {
		return new AlreadyMovedAccess();
	}
	
	public class AlreadyMovedAccess extends NeoPatternAccess<AlreadyMovedData, AlreadyMovedMask> {
		public final String _fig = "fig";
		public final String _base = "base";
		public final String _startField = "startField";
		public final String _moved = "moved";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(11);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<AlreadyMovedData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new AlreadyMovedData(d));
		}
		
		@Override
		public AlreadyMovedMask mask() {
			return new AlreadyMovedMask();
		}
	}
	
	public class AlreadyMovedData extends NeoData {
		public AlreadyMovedData(Record data) {
			
		}
	}
	
	public class AlreadyMovedMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.12
	public MoveRookAccess getRule_MoveRook() {
		return new MoveRookAccess();
	}
	
	public class MoveRookAccess extends NeoRuleCoAccess<MoveRookData, MoveRookCoData, MoveRookMask> {
		public final String _fig = "fig";
		public final String _from = "from";
		public final String _to = "to";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(12);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MoveRookData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveRookData(d));
		}
			
		@Override
		public Stream<MoveRookCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveRookCoData(d));
		}
		
		@Override
		public MoveRookMask mask() {
			return new MoveRookMask();
		}
	}
	
	public class MoveRookData extends NeoData {
		public MoveRookData(Record data) {
		
		}
	}
	
	public class MoveRookCoData extends NeoData {
		public MoveRookCoData(Record data) {
		
		}
	}
	
	public class MoveRookMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.13
	public MoveRookUpAccess getRule_MoveRookUp() {
		return new MoveRookUpAccess();
	}
	
	public class MoveRookUpAccess extends NeoRuleCoAccess<MoveRookUpData, MoveRookUpCoData, MoveRookUpMask> {
		public final String _fig = "fig";
		public final String _from = "from";
		public final String _to = "to";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(13);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MoveRookUpData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveRookUpData(d));
		}
			
		@Override
		public Stream<MoveRookUpCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveRookUpCoData(d));
		}
		
		@Override
		public MoveRookUpMask mask() {
			return new MoveRookUpMask();
		}
	}
	
	public class MoveRookUpData extends NeoData {
		public MoveRookUpData(Record data) {
		
		}
	}
	
	public class MoveRookUpCoData extends NeoData {
		public MoveRookUpCoData(Record data) {
		
		}
	}
	
	public class MoveRookUpMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.14
	public MoveRookRightAccess getRule_MoveRookRight() {
		return new MoveRookRightAccess();
	}
	
	public class MoveRookRightAccess extends NeoRuleCoAccess<MoveRookRightData, MoveRookRightCoData, MoveRookRightMask> {
		public final String _fig = "fig";
		public final String _from = "from";
		public final String _to = "to";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(14);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MoveRookRightData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveRookRightData(d));
		}
			
		@Override
		public Stream<MoveRookRightCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveRookRightCoData(d));
		}
		
		@Override
		public MoveRookRightMask mask() {
			return new MoveRookRightMask();
		}
	}
	
	public class MoveRookRightData extends NeoData {
		public MoveRookRightData(Record data) {
		
		}
	}
	
	public class MoveRookRightCoData extends NeoData {
		public MoveRookRightCoData(Record data) {
		
		}
	}
	
	public class MoveRookRightMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.15
	public MoveRookDownAccess getRule_MoveRookDown() {
		return new MoveRookDownAccess();
	}
	
	public class MoveRookDownAccess extends NeoRuleCoAccess<MoveRookDownData, MoveRookDownCoData, MoveRookDownMask> {
		public final String _fig = "fig";
		public final String _from = "from";
		public final String _to = "to";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(15);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MoveRookDownData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveRookDownData(d));
		}
			
		@Override
		public Stream<MoveRookDownCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveRookDownCoData(d));
		}
		
		@Override
		public MoveRookDownMask mask() {
			return new MoveRookDownMask();
		}
	}
	
	public class MoveRookDownData extends NeoData {
		public MoveRookDownData(Record data) {
		
		}
	}
	
	public class MoveRookDownCoData extends NeoData {
		public MoveRookDownCoData(Record data) {
		
		}
	}
	
	public class MoveRookDownMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.16
	public MoveRookLeftAccess getRule_MoveRookLeft() {
		return new MoveRookLeftAccess();
	}
	
	public class MoveRookLeftAccess extends NeoRuleCoAccess<MoveRookLeftData, MoveRookLeftCoData, MoveRookLeftMask> {
		public final String _fig = "fig";
		public final String _from = "from";
		public final String _to = "to";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(16);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MoveRookLeftData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveRookLeftData(d));
		}
			
		@Override
		public Stream<MoveRookLeftCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveRookLeftCoData(d));
		}
		
		@Override
		public MoveRookLeftMask mask() {
			return new MoveRookLeftMask();
		}
	}
	
	public class MoveRookLeftData extends NeoData {
		public MoveRookLeftData(Record data) {
		
		}
	}
	
	public class MoveRookLeftCoData extends NeoData {
		public MoveRookLeftCoData(Record data) {
		
		}
	}
	
	public class MoveRookLeftMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.17
	public MoveBishopAccess getRule_MoveBishop() {
		return new MoveBishopAccess();
	}
	
	public class MoveBishopAccess extends NeoRuleCoAccess<MoveBishopData, MoveBishopCoData, MoveBishopMask> {
		public final String _fig = "fig";
		public final String _from = "from";
		public final String _to = "to";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(17);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MoveBishopData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveBishopData(d));
		}
			
		@Override
		public Stream<MoveBishopCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveBishopCoData(d));
		}
		
		@Override
		public MoveBishopMask mask() {
			return new MoveBishopMask();
		}
	}
	
	public class MoveBishopData extends NeoData {
		public MoveBishopData(Record data) {
		
		}
	}
	
	public class MoveBishopCoData extends NeoData {
		public MoveBishopCoData(Record data) {
		
		}
	}
	
	public class MoveBishopMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.18
	public MoveBishopUpLeftAccess getRule_MoveBishopUpLeft() {
		return new MoveBishopUpLeftAccess();
	}
	
	public class MoveBishopUpLeftAccess extends NeoRuleCoAccess<MoveBishopUpLeftData, MoveBishopUpLeftCoData, MoveBishopUpLeftMask> {
		public final String _fig = "fig";
		public final String _from = "from";
		public final String _to = "to";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(18);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MoveBishopUpLeftData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveBishopUpLeftData(d));
		}
			
		@Override
		public Stream<MoveBishopUpLeftCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveBishopUpLeftCoData(d));
		}
		
		@Override
		public MoveBishopUpLeftMask mask() {
			return new MoveBishopUpLeftMask();
		}
	}
	
	public class MoveBishopUpLeftData extends NeoData {
		public MoveBishopUpLeftData(Record data) {
		
		}
	}
	
	public class MoveBishopUpLeftCoData extends NeoData {
		public MoveBishopUpLeftCoData(Record data) {
		
		}
	}
	
	public class MoveBishopUpLeftMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.19
	public MoveBishopUpRightAccess getRule_MoveBishopUpRight() {
		return new MoveBishopUpRightAccess();
	}
	
	public class MoveBishopUpRightAccess extends NeoRuleCoAccess<MoveBishopUpRightData, MoveBishopUpRightCoData, MoveBishopUpRightMask> {
		public final String _fig = "fig";
		public final String _from = "from";
		public final String _to = "to";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(19);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MoveBishopUpRightData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveBishopUpRightData(d));
		}
			
		@Override
		public Stream<MoveBishopUpRightCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveBishopUpRightCoData(d));
		}
		
		@Override
		public MoveBishopUpRightMask mask() {
			return new MoveBishopUpRightMask();
		}
	}
	
	public class MoveBishopUpRightData extends NeoData {
		public MoveBishopUpRightData(Record data) {
		
		}
	}
	
	public class MoveBishopUpRightCoData extends NeoData {
		public MoveBishopUpRightCoData(Record data) {
		
		}
	}
	
	public class MoveBishopUpRightMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.20
	public MoveBishopDownLeftAccess getRule_MoveBishopDownLeft() {
		return new MoveBishopDownLeftAccess();
	}
	
	public class MoveBishopDownLeftAccess extends NeoRuleCoAccess<MoveBishopDownLeftData, MoveBishopDownLeftCoData, MoveBishopDownLeftMask> {
		public final String _fig = "fig";
		public final String _from = "from";
		public final String _to = "to";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(20);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MoveBishopDownLeftData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveBishopDownLeftData(d));
		}
			
		@Override
		public Stream<MoveBishopDownLeftCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveBishopDownLeftCoData(d));
		}
		
		@Override
		public MoveBishopDownLeftMask mask() {
			return new MoveBishopDownLeftMask();
		}
	}
	
	public class MoveBishopDownLeftData extends NeoData {
		public MoveBishopDownLeftData(Record data) {
		
		}
	}
	
	public class MoveBishopDownLeftCoData extends NeoData {
		public MoveBishopDownLeftCoData(Record data) {
		
		}
	}
	
	public class MoveBishopDownLeftMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/Chess/bin/FigureMoves.msl#//@entities.21
	public MoveBishopDownRightAccess getRule_MoveBishopDownRight() {
		return new MoveBishopDownRightAccess();
	}
	
	public class MoveBishopDownRightAccess extends NeoRuleCoAccess<MoveBishopDownRightData, MoveBishopDownRightCoData, MoveBishopDownRightMask> {
		public final String _fig = "fig";
		public final String _from = "from";
		public final String _to = "to";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(21);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MoveBishopDownRightData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveBishopDownRightData(d));
		}
			
		@Override
		public Stream<MoveBishopDownRightCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveBishopDownRightCoData(d));
		}
		
		@Override
		public MoveBishopDownRightMask mask() {
			return new MoveBishopDownRightMask();
		}
	}
	
	public class MoveBishopDownRightData extends NeoData {
		public MoveBishopDownRightData(Record data) {
		
		}
	}
	
	public class MoveBishopDownRightCoData extends NeoData {
		public MoveBishopDownRightCoData(Record data) {
		
		}
	}
	
	public class MoveBishopDownRightMask extends NeoMask {
	}
}
