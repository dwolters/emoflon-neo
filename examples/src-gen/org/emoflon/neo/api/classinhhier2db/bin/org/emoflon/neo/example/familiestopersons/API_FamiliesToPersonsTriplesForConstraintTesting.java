/** 
 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
 */
package org.emoflon.neo.api.classinhhier2db.bin.org.emoflon.neo.example.familiestopersons;

import org.emoflon.neo.cypher.common.*;
import org.emoflon.neo.cypher.constraints.*;
import org.emoflon.neo.cypher.factories.*;
import org.emoflon.neo.cypher.models.*;
import org.emoflon.neo.cypher.patterns.*;
import org.emoflon.neo.cypher.rules.*;
import org.emoflon.neo.engine.api.patterns.*;
import org.emoflon.neo.engine.api.constraints.*;
import org.emoflon.neo.engine.api.rules.*;
import org.emoflon.neo.emsl.eMSL.*;
import org.emoflon.neo.emsl.util.*;
import org.neo4j.driver.Value;
import org.neo4j.driver.Record;
import org.eclipse.emf.common.util.URI;
import org.emoflon.neo.api.classinhhier2db.API_Common;
import java.util.Collection;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;
import java.util.Optional;
import java.time.LocalDate;

@SuppressWarnings("unused")
public class API_FamiliesToPersonsTriplesForConstraintTesting {
	private EMSL_Spec spec;
	private NeoCoreBuilder builder;

	/** Use this constructor for default values */
	public API_FamiliesToPersonsTriplesForConstraintTesting(NeoCoreBuilder builder) {
		this(builder, API_Common.PLATFORM_RESOURCE_URI, API_Common.PLATFORM_PLUGIN_URI, API_Common.NEOCORE_URI_INSTALLED);
	}

	/** Use this constructor to configure values for loading EMSL files */
	public API_FamiliesToPersonsTriplesForConstraintTesting(NeoCoreBuilder builder, String platformResourceURIRoot, String platformPluginURIRoot, String neocoreURI){
		this((EMSL_Spec) EMSLUtil.loadSpecification("platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/familiestopersons/FamiliesToPersonsTriplesForConstraintTesting.msl", platformResourceURIRoot, platformPluginURIRoot, neocoreURI), builder);
	}

	public API_FamiliesToPersonsTriplesForConstraintTesting(EMSL_Spec spec, NeoCoreBuilder builder) {
		this.spec = spec;
		this.builder = builder;
	}

	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/familiestopersons/FamiliesToPersonsTriplesForConstraintTesting.msl#//@entities.0
	public Model getModel_ConsistentSource1(){
		return (Model) spec.getEntities().get(0);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/familiestopersons/FamiliesToPersonsTriplesForConstraintTesting.msl#//@entities.1
	public Model getModel_ConsistentTarget1(){
		return (Model) spec.getEntities().get(1);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/familiestopersons/FamiliesToPersonsTriplesForConstraintTesting.msl#//@entities.2
	public ConsistentTriple1Access getRule_ConsistentTriple1() {
		return new ConsistentTriple1Access();
	}
	
	public class ConsistentTriple1Access extends NeoRuleCoAccess<ConsistentTriple1Data, ConsistentTriple1CoData, ConsistentTriple1Mask> {
		public final String _pr = "pr";
		public final String _fr = "fr";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(2);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<ConsistentTriple1Data> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new ConsistentTriple1Data(d));
		}
			
		@Override
		public Stream<ConsistentTriple1CoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new ConsistentTriple1CoData(d));
		}
		
		@Override
		public ConsistentTriple1Mask mask() {
			return new ConsistentTriple1Mask();
		}
	}
	
	public class ConsistentTriple1Data extends NeoData {
		public ConsistentTriple1Data(Record data) {
		
		}
	}
	
	public class ConsistentTriple1CoData extends NeoData {
		public ConsistentTriple1CoData(Record data) {
		
		}
	}
	
	public class ConsistentTriple1Mask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/familiestopersons/FamiliesToPersonsTriplesForConstraintTesting.msl#//@entities.3
	public Model getModel_InConsistentSource1(){
		return (Model) spec.getEntities().get(3);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/familiestopersons/FamiliesToPersonsTriplesForConstraintTesting.msl#//@entities.4
	public Model getModel_InConsistentTarget1(){
		return (Model) spec.getEntities().get(4);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/familiestopersons/FamiliesToPersonsTriplesForConstraintTesting.msl#//@entities.5
	public InConsistentTriple1Access getRule_InConsistentTriple1() {
		return new InConsistentTriple1Access();
	}
	
	public class InConsistentTriple1Access extends NeoRuleCoAccess<InConsistentTriple1Data, InConsistentTriple1CoData, InConsistentTriple1Mask> {
		public final String _pr = "pr";
		public final String _p1 = "p1";
		public final String _fr = "fr";
		public final String _fm1 = "fm1";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(5);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<InConsistentTriple1Data> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new InConsistentTriple1Data(d));
		}
			
		@Override
		public Stream<InConsistentTriple1CoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new InConsistentTriple1CoData(d));
		}
		
		@Override
		public InConsistentTriple1Mask mask() {
			return new InConsistentTriple1Mask();
		}
	}
	
	public class InConsistentTriple1Data extends NeoData {
		public InConsistentTriple1Data(Record data) {
		
		}
	}
	
	public class InConsistentTriple1CoData extends NeoData {
		public InConsistentTriple1CoData(Record data) {
		
		}
	}
	
	public class InConsistentTriple1Mask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/familiestopersons/FamiliesToPersonsTriplesForConstraintTesting.msl#//@entities.6
	public Model getModel_ConsistentSource2(){
		return (Model) spec.getEntities().get(6);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/familiestopersons/FamiliesToPersonsTriplesForConstraintTesting.msl#//@entities.7
	public Model getModel_ConsistentTarget2(){
		return (Model) spec.getEntities().get(7);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/familiestopersons/FamiliesToPersonsTriplesForConstraintTesting.msl#//@entities.8
	public ConsistentTriple2Access getRule_ConsistentTriple2() {
		return new ConsistentTriple2Access();
	}
	
	public class ConsistentTriple2Access extends NeoRuleCoAccess<ConsistentTriple2Data, ConsistentTriple2CoData, ConsistentTriple2Mask> {
		public final String _p1 = "p1";
		public final String _pr = "pr";
		public final String _p2 = "p2";
		public final String _p3 = "p3";
		public final String _fm2 = "fm2";
		public final String _fm1 = "fm1";
		public final String _fr = "fr";
		public final String _fm3 = "fm3";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(8);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<ConsistentTriple2Data> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new ConsistentTriple2Data(d));
		}
			
		@Override
		public Stream<ConsistentTriple2CoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new ConsistentTriple2CoData(d));
		}
		
		@Override
		public ConsistentTriple2Mask mask() {
			return new ConsistentTriple2Mask();
		}
	}
	
	public class ConsistentTriple2Data extends NeoData {
		public ConsistentTriple2Data(Record data) {
		
		}
	}
	
	public class ConsistentTriple2CoData extends NeoData {
		public ConsistentTriple2CoData(Record data) {
		
		}
	}
	
	public class ConsistentTriple2Mask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/familiestopersons/FamiliesToPersonsTriplesForConstraintTesting.msl#//@entities.9
	public Model getModel_InConsistentSource2(){
		return (Model) spec.getEntities().get(9);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/familiestopersons/FamiliesToPersonsTriplesForConstraintTesting.msl#//@entities.10
	public Model getModel_InConsistentTarget2(){
		return (Model) spec.getEntities().get(10);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/familiestopersons/FamiliesToPersonsTriplesForConstraintTesting.msl#//@entities.11
	public InConsistentTriple2Access getRule_InConsistentTriple2() {
		return new InConsistentTriple2Access();
	}
	
	public class InConsistentTriple2Access extends NeoRuleCoAccess<InConsistentTriple2Data, InConsistentTriple2CoData, InConsistentTriple2Mask> {
		public final String _p1 = "p1";
		public final String _pr = "pr";
		public final String _p2 = "p2";
		public final String _fm2 = "fm2";
		public final String _fm1 = "fm1";
		public final String _fr = "fr";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(11);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<InConsistentTriple2Data> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new InConsistentTriple2Data(d));
		}
			
		@Override
		public Stream<InConsistentTriple2CoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new InConsistentTriple2CoData(d));
		}
		
		@Override
		public InConsistentTriple2Mask mask() {
			return new InConsistentTriple2Mask();
		}
	}
	
	public class InConsistentTriple2Data extends NeoData {
		public InConsistentTriple2Data(Record data) {
		
		}
	}
	
	public class InConsistentTriple2CoData extends NeoData {
		public InConsistentTriple2CoData(Record data) {
		
		}
	}
	
	public class InConsistentTriple2Mask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/familiestopersons/FamiliesToPersonsTriplesForConstraintTesting.msl#//@entities.12
	public Model getModel_InConsistentSource3(){
		return (Model) spec.getEntities().get(12);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/familiestopersons/FamiliesToPersonsTriplesForConstraintTesting.msl#//@entities.13
	public Model getModel_InConsistentTarget3(){
		return (Model) spec.getEntities().get(13);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/familiestopersons/FamiliesToPersonsTriplesForConstraintTesting.msl#//@entities.14
	public InConsistentTriple3Access getRule_InConsistentTriple3() {
		return new InConsistentTriple3Access();
	}
	
	public class InConsistentTriple3Access extends NeoRuleCoAccess<InConsistentTriple3Data, InConsistentTriple3CoData, InConsistentTriple3Mask> {
		public final String _fr = "fr";
		public final String _fm1 = "fm1";
		public final String _fm2 = "fm2";
		public final String _pr = "pr";
		public final String _p1 = "p1";
		public final String _p2 = "p2";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(14);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<InConsistentTriple3Data> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new InConsistentTriple3Data(d));
		}
			
		@Override
		public Stream<InConsistentTriple3CoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new InConsistentTriple3CoData(d));
		}
		
		@Override
		public InConsistentTriple3Mask mask() {
			return new InConsistentTriple3Mask();
		}
	}
	
	public class InConsistentTriple3Data extends NeoData {
		public InConsistentTriple3Data(Record data) {
		
		}
	}
	
	public class InConsistentTriple3CoData extends NeoData {
		public InConsistentTriple3CoData(Record data) {
		
		}
	}
	
	public class InConsistentTriple3Mask extends NeoMask {
	}
}
