/** 
 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
 */
package org.emoflon.neo.api.classinhhier2db.bin.org.emoflon.neo.example.typing;

import org.emoflon.neo.cypher.common.*;
import org.emoflon.neo.cypher.constraints.*;
import org.emoflon.neo.cypher.factories.*;
import org.emoflon.neo.cypher.models.*;
import org.emoflon.neo.cypher.patterns.*;
import org.emoflon.neo.cypher.rules.*;
import org.emoflon.neo.engine.api.patterns.*;
import org.emoflon.neo.engine.api.constraints.*;
import org.emoflon.neo.engine.api.rules.*;
import org.emoflon.neo.emsl.eMSL.*;
import org.emoflon.neo.emsl.util.*;
import org.neo4j.driver.Value;
import org.neo4j.driver.Record;
import org.eclipse.emf.common.util.URI;
import org.emoflon.neo.api.classinhhier2db.API_Common;
import java.util.Collection;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;
import java.util.Optional;
import java.time.LocalDate;

@SuppressWarnings("unused")
public class API_TypingTest {
	private EMSL_Spec spec;
	private NeoCoreBuilder builder;

	/** Use this constructor for default values */
	public API_TypingTest(NeoCoreBuilder builder) {
		this(builder, API_Common.PLATFORM_RESOURCE_URI, API_Common.PLATFORM_PLUGIN_URI, API_Common.NEOCORE_URI_INSTALLED);
	}

	/** Use this constructor to configure values for loading EMSL files */
	public API_TypingTest(NeoCoreBuilder builder, String platformResourceURIRoot, String platformPluginURIRoot, String neocoreURI){
		this((EMSL_Spec) EMSLUtil.loadSpecification("platform:/resource/ClassInhHier2DB/TestSuiteGT/bin/org/emoflon/neo/example/typing/TypingTest.msl", platformResourceURIRoot, platformPluginURIRoot, neocoreURI), builder);
	}

	public API_TypingTest(EMSL_Spec spec, NeoCoreBuilder builder) {
		this.spec = spec;
		this.builder = builder;
	}

	//:~> platform:/resource/ClassInhHier2DB/TestSuiteGT/bin/org/emoflon/neo/example/typing/TypingTest.msl#//@entities.0
	public Metamodel getMetamodel_T1(){
		return (Metamodel) spec.getEntities().get(0);
	}
	
	public static final String T1__T = "T1__T";
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteGT/bin/org/emoflon/neo/example/typing/TypingTest.msl#//@entities.1
	public Metamodel getMetamodel_T2(){
		return (Metamodel) spec.getEntities().get(1);
	}
	
	public static final String T2__T = "T2__T";
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteGT/bin/org/emoflon/neo/example/typing/TypingTest.msl#//@entities.2
	public Metamodel getMetamodel_T3(){
		return (Metamodel) spec.getEntities().get(2);
	}
	
	public static final String T3__T = "T3__T";
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteGT/bin/org/emoflon/neo/example/typing/TypingTest.msl#//@entities.3
	public Metamodel getMetamodel_T4(){
		return (Metamodel) spec.getEntities().get(3);
	}
	
	public static final String T4__T = "T4__T";
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteGT/bin/org/emoflon/neo/example/typing/TypingTest.msl#//@entities.4
	public Metamodel getMetamodel_T5(){
		return (Metamodel) spec.getEntities().get(4);
	}
	
	public static final String T5__T = "T5__T";
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteGT/bin/org/emoflon/neo/example/typing/TypingTest.msl#//@entities.5
	public CreateTsAccess getRule_CreateTs() {
		return new CreateTsAccess();
	}
	
	public class CreateTsAccess extends NeoRuleCoAccess<CreateTsData, CreateTsCoData, CreateTsMask> {
		public final String _t1 = "t1";
		public final String _t2 = "t2";
		public final String _t3 = "t3";
		public final String _t4 = "t4";
		public final String _t5 = "t5";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(5);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<CreateTsData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateTsData(d));
		}
			
		@Override
		public Stream<CreateTsCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateTsCoData(d));
		}
		
		@Override
		public CreateTsMask mask() {
			return new CreateTsMask();
		}
	}
	
	public class CreateTsData extends NeoData {
		public CreateTsData(Record data) {
		
		}
	}
	
	public class CreateTsCoData extends NeoData {
		public CreateTsCoData(Record data) {
		
		}
	}
	
	public class CreateTsMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteGT/bin/org/emoflon/neo/example/typing/TypingTest.msl#//@entities.6
	public MatchT1Access getPattern_MatchT1() {
		return new MatchT1Access();
	}
	
	public class MatchT1Access extends NeoPatternAccess<MatchT1Data, MatchT1Mask> {
		public final String _t1 = "t1";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(6);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<MatchT1Data> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MatchT1Data(d));
		}
		
		@Override
		public MatchT1Mask mask() {
			return new MatchT1Mask();
		}
	}
	
	public class MatchT1Data extends NeoData {
		public MatchT1Data(Record data) {
			
		}
	}
	
	public class MatchT1Mask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteGT/bin/org/emoflon/neo/example/typing/TypingTest.msl#//@entities.7
	public EveryObjectAccess getPattern_EveryObject() {
		return new EveryObjectAccess();
	}
	
	public class EveryObjectAccess extends NeoPatternAccess<EveryObjectData, EveryObjectMask> {
		public final String _o = "o";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(7);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<EveryObjectData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new EveryObjectData(d));
		}
		
		@Override
		public EveryObjectMask mask() {
			return new EveryObjectMask();
		}
	}
	
	public class EveryObjectData extends NeoData {
		public EveryObjectData(Record data) {
			
		}
	}
	
	public class EveryObjectMask extends NeoMask {
	}
}
