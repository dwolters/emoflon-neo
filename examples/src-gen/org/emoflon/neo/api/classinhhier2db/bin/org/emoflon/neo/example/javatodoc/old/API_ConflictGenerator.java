/** 
 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
 */
package org.emoflon.neo.api.classinhhier2db.bin.org.emoflon.neo.example.javatodoc.old;

import org.emoflon.neo.cypher.common.*;
import org.emoflon.neo.cypher.constraints.*;
import org.emoflon.neo.cypher.factories.*;
import org.emoflon.neo.cypher.models.*;
import org.emoflon.neo.cypher.patterns.*;
import org.emoflon.neo.cypher.rules.*;
import org.emoflon.neo.engine.api.patterns.*;
import org.emoflon.neo.engine.api.constraints.*;
import org.emoflon.neo.engine.api.rules.*;
import org.emoflon.neo.emsl.eMSL.*;
import org.emoflon.neo.emsl.util.*;
import org.neo4j.driver.Value;
import org.neo4j.driver.Record;
import org.eclipse.emf.common.util.URI;
import org.emoflon.neo.api.classinhhier2db.API_Common;
import java.util.Collection;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;
import java.util.Optional;
import java.time.LocalDate;

@SuppressWarnings("unused")
public class API_ConflictGenerator {
	private EMSL_Spec spec;
	private NeoCoreBuilder builder;

	/** Use this constructor for default values */
	public API_ConflictGenerator(NeoCoreBuilder builder) {
		this(builder, API_Common.PLATFORM_RESOURCE_URI, API_Common.PLATFORM_PLUGIN_URI, API_Common.NEOCORE_URI_INSTALLED);
	}

	/** Use this constructor to configure values for loading EMSL files */
	public API_ConflictGenerator(NeoCoreBuilder builder, String platformResourceURIRoot, String platformPluginURIRoot, String neocoreURI){
		this((EMSL_Spec) EMSLUtil.loadSpecification("platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/javatodoc/old/ConflictGenerator.msl", platformResourceURIRoot, platformPluginURIRoot, neocoreURI), builder);
	}

	public API_ConflictGenerator(EMSL_Spec spec, NeoCoreBuilder builder) {
		this.spec = spec;
		this.builder = builder;
	}

	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/javatodoc/old/ConflictGenerator.msl#//@entities.0
	public SubSubOppositeConflictAccess getRule_SubSubOppositeConflict() {
		return new SubSubOppositeConflictAccess();
	}
	
	public class SubSubOppositeConflictAccess extends NeoRuleCoAccess<SubSubOppositeConflictData, SubSubOppositeConflictCoData, SubSubOppositeConflictMask> {
		public final String _package = "package";
		public final String _subPackage = "subPackage";
		public final String _folder = "folder";
		public final String _subFolder = "subFolder";
		public final String _doc = "doc";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(0);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<SubSubOppositeConflictData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new SubSubOppositeConflictData(d));
		}
			
		@Override
		public Stream<SubSubOppositeConflictCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new SubSubOppositeConflictCoData(d));
		}
		
		@Override
		public SubSubOppositeConflictMask mask() {
			return new SubSubOppositeConflictMask();
		}
	}
	
	public class SubSubOppositeConflictData extends NeoData {
		public SubSubOppositeConflictData(Record data) {
		
		}
	}
	
	public class SubSubOppositeConflictCoData extends NeoData {
		public SubSubOppositeConflictCoData(Record data) {
		
		}
	}
	
	public class SubSubOppositeConflictMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/javatodoc/old/ConflictGenerator.msl#//@entities.1
	public IConstraint getConstraint_SubSubOppositeConflictNAC() {
		var c = (Constraint) spec.getEntities().get(1);
		return NeoConstraintFactory.createNeoConstraint(c, builder);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/javatodoc/old/ConflictGenerator.msl#//@entities.2
	public IConstraint getConstraint_PackageSubOfSubPackageNAC() {
		var c = (Constraint) spec.getEntities().get(2);
		return NeoConstraintFactory.createNeoConstraint(c, builder);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/javatodoc/old/ConflictGenerator.msl#//@entities.3
	public IConstraint getConstraint_SubPackageSubOfPackageNAC() {
		var c = (Constraint) spec.getEntities().get(3);
		return NeoConstraintFactory.createNeoConstraint(c, builder);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/javatodoc/old/ConflictGenerator.msl#//@entities.4
	public IConstraint getConstraint_FolderSubOfSubFolderNAC() {
		var c = (Constraint) spec.getEntities().get(4);
		return NeoConstraintFactory.createNeoConstraint(c, builder);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/javatodoc/old/ConflictGenerator.msl#//@entities.5
	public IConstraint getConstraint_SubFolderSubOfFolderNAC() {
		var c = (Constraint) spec.getEntities().get(5);
		return NeoConstraintFactory.createNeoConstraint(c, builder);
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/javatodoc/old/ConflictGenerator.msl#//@entities.6
	public SubPackageSubOfPackageAccess getPattern_SubPackageSubOfPackage() {
		return new SubPackageSubOfPackageAccess();
	}
	
	public class SubPackageSubOfPackageAccess extends NeoPatternAccess<SubPackageSubOfPackageData, SubPackageSubOfPackageMask> {
		public final String _package = "package";
		public final String _subPackage = "subPackage";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(6);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<SubPackageSubOfPackageData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new SubPackageSubOfPackageData(d));
		}
		
		@Override
		public SubPackageSubOfPackageMask mask() {
			return new SubPackageSubOfPackageMask();
		}
	}
	
	public class SubPackageSubOfPackageData extends NeoData {
		public SubPackageSubOfPackageData(Record data) {
			
		}
	}
	
	public class SubPackageSubOfPackageMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/javatodoc/old/ConflictGenerator.msl#//@entities.7
	public PackageSubOfSubPackageAccess getPattern_PackageSubOfSubPackage() {
		return new PackageSubOfSubPackageAccess();
	}
	
	public class PackageSubOfSubPackageAccess extends NeoPatternAccess<PackageSubOfSubPackageData, PackageSubOfSubPackageMask> {
		public final String _subPackage = "subPackage";
		public final String _package = "package";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(7);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<PackageSubOfSubPackageData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new PackageSubOfSubPackageData(d));
		}
		
		@Override
		public PackageSubOfSubPackageMask mask() {
			return new PackageSubOfSubPackageMask();
		}
	}
	
	public class PackageSubOfSubPackageData extends NeoData {
		public PackageSubOfSubPackageData(Record data) {
			
		}
	}
	
	public class PackageSubOfSubPackageMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/javatodoc/old/ConflictGenerator.msl#//@entities.8
	public SubFolderSubOfFolderAccess getPattern_SubFolderSubOfFolder() {
		return new SubFolderSubOfFolderAccess();
	}
	
	public class SubFolderSubOfFolderAccess extends NeoPatternAccess<SubFolderSubOfFolderData, SubFolderSubOfFolderMask> {
		public final String _folder = "folder";
		public final String _subFolder = "subFolder";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(8);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<SubFolderSubOfFolderData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new SubFolderSubOfFolderData(d));
		}
		
		@Override
		public SubFolderSubOfFolderMask mask() {
			return new SubFolderSubOfFolderMask();
		}
	}
	
	public class SubFolderSubOfFolderData extends NeoData {
		public SubFolderSubOfFolderData(Record data) {
			
		}
	}
	
	public class SubFolderSubOfFolderMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/javatodoc/old/ConflictGenerator.msl#//@entities.9
	public FolderSubOfSubFolderAccess getPattern_FolderSubOfSubFolder() {
		return new FolderSubOfSubFolderAccess();
	}
	
	public class FolderSubOfSubFolderAccess extends NeoPatternAccess<FolderSubOfSubFolderData, FolderSubOfSubFolderMask> {
		public final String _subFolder = "subFolder";
		public final String _folder = "folder";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(9);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<FolderSubOfSubFolderData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new FolderSubOfSubFolderData(d));
		}
		
		@Override
		public FolderSubOfSubFolderMask mask() {
			return new FolderSubOfSubFolderMask();
		}
	}
	
	public class FolderSubOfSubFolderData extends NeoData {
		public FolderSubOfSubFolderData(Record data) {
			
		}
	}
	
	public class FolderSubOfSubFolderMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/javatodoc/old/ConflictGenerator.msl#//@entities.10
	public CreateDeleteConflictAccess getRule_CreateDeleteConflict() {
		return new CreateDeleteConflictAccess();
	}
	
	public class CreateDeleteConflictAccess extends NeoRuleCoAccess<CreateDeleteConflictData, CreateDeleteConflictCoData, CreateDeleteConflictMask> {
		public final String _package = "package";
		public final String _subPackage = "subPackage";
		public final String _class = "class";
		public final String _folder = "folder";
		public final String _subFolder = "subFolder";
		public final String _doc = "doc";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(10);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<CreateDeleteConflictData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateDeleteConflictData(d));
		}
			
		@Override
		public Stream<CreateDeleteConflictCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateDeleteConflictCoData(d));
		}
		
		@Override
		public CreateDeleteConflictMask mask() {
			return new CreateDeleteConflictMask();
		}
	}
	
	public class CreateDeleteConflictData extends NeoData {
		public CreateDeleteConflictData(Record data) {
		
		}
	}
	
	public class CreateDeleteConflictCoData extends NeoData {
		public CreateDeleteConflictCoData(Record data) {
		
		}
	}
	
	public class CreateDeleteConflictMask extends NeoMask {
	}
	
	//:~> platform:/resource/ClassInhHier2DB/TestSuiteTGG/bin/org/emoflon/neo/example/javatodoc/old/ConflictGenerator.msl#//@entities.11
	public MoveDeleteConflictAccess getRule_MoveDeleteConflict() {
		return new MoveDeleteConflictAccess();
	}
	
	public class MoveDeleteConflictAccess extends NeoRuleCoAccess<MoveDeleteConflictData, MoveDeleteConflictCoData, MoveDeleteConflictMask> {
		public final String _package = "package";
		public final String _otherPackage = "otherPackage";
		public final String _subPackage = "subPackage";
		public final String _folder = "folder";
		public final String _subFolder = "subFolder";
		
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(11);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MoveDeleteConflictData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveDeleteConflictData(d));
		}
			
		@Override
		public Stream<MoveDeleteConflictCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MoveDeleteConflictCoData(d));
		}
		
		@Override
		public MoveDeleteConflictMask mask() {
			return new MoveDeleteConflictMask();
		}
	}
	
	public class MoveDeleteConflictData extends NeoData {
		public MoveDeleteConflictData(Record data) {
		
		}
	}
	
	public class MoveDeleteConflictCoData extends NeoData {
		public MoveDeleteConflictCoData(Record data) {
		
		}
	}
	
	public class MoveDeleteConflictMask extends NeoMask {
	}
}
