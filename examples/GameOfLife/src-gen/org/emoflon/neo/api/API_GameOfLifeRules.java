/** 
 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
 */
package org.emoflon.neo.api;

import org.emoflon.neo.neo4j.adapter.models.NeoCoreBuilder;
import org.emoflon.neo.neo4j.adapter.patterns.NeoMatch;
import org.emoflon.neo.neo4j.adapter.rules.NeoCoMatch;
import org.emoflon.neo.emsl.eMSL.EMSL_Spec;
import org.emoflon.neo.emsl.eMSL.Model;
import org.emoflon.neo.emsl.eMSL.Metamodel;
import org.emoflon.neo.emsl.util.EMSLUtil;
import org.emoflon.neo.engine.api.patterns.IPattern;
import org.emoflon.neo.engine.api.rules.IRule;
import org.emoflon.neo.neo4j.adapter.rules.NeoRule;
import org.emoflon.neo.neo4j.adapter.rules.NeoRuleAccess;
import org.emoflon.neo.neo4j.adapter.patterns.NeoPattern;
import org.emoflon.neo.neo4j.adapter.patterns.NeoPatternFactory;
import org.emoflon.neo.emsl.eMSL.Pattern;
import org.emoflon.neo.emsl.eMSL.Rule;
import org.emoflon.neo.neo4j.adapter.rules.NeoRuleFactory;
import org.emoflon.neo.neo4j.adapter.constraints.NeoConstraint;
import org.emoflon.neo.neo4j.adapter.constraints.NeoConstraintFactory;
import org.emoflon.neo.engine.api.constraints.IConstraint;
import org.emoflon.neo.emsl.eMSL.Constraint;
import org.neo4j.driver.v1.Value;
import org.emoflon.neo.neo4j.adapter.patterns.NeoPatternAccess;
import org.emoflon.neo.neo4j.adapter.patterns.NeoMask;
import org.emoflon.neo.neo4j.adapter.patterns.NeoData;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.time.LocalDate;

@SuppressWarnings("unused")
public class API_GameOfLifeRules {
	private EMSL_Spec spec;
	private NeoCoreBuilder builder;

	public API_GameOfLifeRules(NeoCoreBuilder builder, String platformResourceURIRoot, String platformPluginURIRoot){
		spec = (EMSL_Spec) EMSLUtil.loadSpecification("platform:/resource/GameOfLife/src/GameOfLifeRules.msl", platformResourceURIRoot, platformPluginURIRoot);
		this.builder = builder;
	}

	//:~> platform:/resource/GameOfLife/src/GameOfLifeRules.msl#//@entities.0
	public Metamodel getMetamodel_GameOfLife(){
		return (Metamodel) spec.getEntities().get(0);
	}
	
	//:~> platform:/resource/GameOfLife/src/GameOfLifeRules.msl#//@entities.1
	
	//:~> platform:/resource/GameOfLife/src/GameOfLifeRules.msl#//@entities.2
	//FIXME Unable to generate API: org.emoflon.neo.emsl.util.FlattenerException  */ 
	
	//:~> platform:/resource/GameOfLife/src/GameOfLifeRules.msl#//@entities.3
	//FIXME Unable to generate API: org.emoflon.neo.emsl.util.FlattenerException  */ 
	
	//:~> platform:/resource/GameOfLife/src/GameOfLifeRules.msl#//@entities.4
	public ReproduceAccess getRule_Reproduce() {
		return new ReproduceAccess();
	}
	
	public class ReproduceAccess extends NeoRuleAccess<ReproduceData,ReproduceMask> {
		public final String c = "c";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(4);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public NeoRule rule(ReproduceMask mask) {
			var r = (Rule) spec.getEntities().get(4);
			return NeoRuleFactory.createNeoRule(r, builder, mask);
		}
		
		@Override
		public ReproduceData data(NeoMatch m) {
			return new ReproduceData(m);
		}
		
		@Override
		public ReproduceMask mask() {
			return new ReproduceMask();
		}
	}
	
	public class ReproduceData extends NeoData {
		public final CNode c;
		
		public ReproduceData(NeoMatch m) {
			var data = m.getData();
			var c = data.get("c");
			this.c = new CNode(c);
		}
		
		
		public class CNode {
			public int x;
			public int y;
			public boolean alive;
			
			public CNode(Value c) {
				if(!c.get("x").isNull())
					this.x = c.get("x").asInt();
				if(!c.get("y").isNull())
					this.y = c.get("y").asInt();
				if(!c.get("alive").isNull())
					this.alive = c.get("alive").asBoolean();
			}
		}
		
	}
	
	public class ReproduceMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
		
		// Black and Red Nodes of a Rule
		public ReproduceMask setC(Long value) {
			nodeMask.put("c", value);
			return this;
		}
		public ReproduceMask setCX(int value) {
			attributeMask.put("c.x", value);
			return this;
		}
		public ReproduceMask setCY(int value) {
			attributeMask.put("c.y", value);
			return this;
		}
		public ReproduceMask setCAlive(boolean value) {
			attributeMask.put("c.alive", value);
			return this;
		}
	}
	
	//:~> platform:/resource/GameOfLife/src/GameOfLifeRules.msl#//@entities.5
	public IConstraint getConstraint_ExactlyThreeNeighboursAlive() {
		var c = (Constraint) spec.getEntities().get(5);
		return NeoConstraintFactory.createNeoConstraint(c, builder);
	}
	
	//:~> platform:/resource/GameOfLife/src/GameOfLifeRules.msl#//@entities.6
	public IConstraint getConstraint_AtLeastThreeNeighboursAlive() {
		var c = (Constraint) spec.getEntities().get(6);
		return NeoConstraintFactory.createNeoConstraint(c, builder);
	}
	
	//:~> platform:/resource/GameOfLife/src/GameOfLifeRules.msl#//@entities.7
	public IConstraint getConstraint_NoMoreThanThreeNeighboursAlive() {
		var c = (Constraint) spec.getEntities().get(7);
		return NeoConstraintFactory.createNeoConstraint(c, builder);
	}
	
	//:~> platform:/resource/GameOfLife/src/GameOfLifeRules.msl#//@entities.8
	public FourNeighboursAliveAccess getPattern_FourNeighboursAlive() {
		return new FourNeighboursAliveAccess();
	}
	
	public class FourNeighboursAliveAccess extends NeoPatternAccess<FourNeighboursAliveData,FourNeighboursAliveMask> {
		public final String c = "c";
		public final String n1 = "n1";
		public final String n2 = "n2";
		public final String n3 = "n3";
		public final String n4 = "n4";
		
		@Override
		public NeoPattern matcher(){
			var p = (Pattern) spec.getEntities().get(8);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public NeoPattern matcher(FourNeighboursAliveMask mask) {
			var p = (Pattern) spec.getEntities().get(8);
			return NeoPatternFactory.createNeoPattern(p, builder, mask);
		}
		
		@Override
		public FourNeighboursAliveData data(NeoMatch m) {
			return new FourNeighboursAliveData(m);
		}
		
		@Override
		public FourNeighboursAliveMask mask() {
			return new FourNeighboursAliveMask();
		}
	}
	
	public class FourNeighboursAliveData extends NeoData {
		public final CNode c;
		public final C_neighbours_0_n1Rel c_neighbours_0_n1;
		public final C_neighbours_1_n2Rel c_neighbours_1_n2;
		public final C_neighbours_2_n3Rel c_neighbours_2_n3;
		public final C_neighbours_3_n4Rel c_neighbours_3_n4;
		public final N1Node n1;
		public final N2Node n2;
		public final N3Node n3;
		public final N4Node n4;
		
		public FourNeighboursAliveData(NeoMatch m) {
			var data = m.getData();
			var c = data.get("c");
			this.c = new CNode(c);
			var c_neighbours_0_n1 = data.get("c_neighbours_0_n1");
			this.c_neighbours_0_n1 = new C_neighbours_0_n1Rel(c_neighbours_0_n1);
			var c_neighbours_1_n2 = data.get("c_neighbours_1_n2");
			this.c_neighbours_1_n2 = new C_neighbours_1_n2Rel(c_neighbours_1_n2);
			var c_neighbours_2_n3 = data.get("c_neighbours_2_n3");
			this.c_neighbours_2_n3 = new C_neighbours_2_n3Rel(c_neighbours_2_n3);
			var c_neighbours_3_n4 = data.get("c_neighbours_3_n4");
			this.c_neighbours_3_n4 = new C_neighbours_3_n4Rel(c_neighbours_3_n4);
			var n1 = data.get("n1");
			this.n1 = new N1Node(n1);
			var n2 = data.get("n2");
			this.n2 = new N2Node(n2);
			var n3 = data.get("n3");
			this.n3 = new N3Node(n3);
			var n4 = data.get("n4");
			this.n4 = new N4Node(n4);
		}
		
		
		public class CNode {
			public int x;
			public int y;
			public boolean alive;
			
			public CNode(Value c) {
				if(!c.get("x").isNull())
					this.x = c.get("x").asInt();
				if(!c.get("y").isNull())
					this.y = c.get("y").asInt();
				if(!c.get("alive").isNull())
					this.alive = c.get("alive").asBoolean();
			}
		}
		
		public class C_neighbours_0_n1Rel {
		
			public C_neighbours_0_n1Rel(Value c_neighbours_0_n1) {
			}
		}
		public class C_neighbours_1_n2Rel {
		
			public C_neighbours_1_n2Rel(Value c_neighbours_1_n2) {
			}
		}
		public class C_neighbours_2_n3Rel {
		
			public C_neighbours_2_n3Rel(Value c_neighbours_2_n3) {
			}
		}
		public class C_neighbours_3_n4Rel {
		
			public C_neighbours_3_n4Rel(Value c_neighbours_3_n4) {
			}
		}
		public class N1Node {
			public int x;
			public int y;
			public boolean alive;
			
			public N1Node(Value n1) {
				if(!n1.get("x").isNull())
					this.x = n1.get("x").asInt();
				if(!n1.get("y").isNull())
					this.y = n1.get("y").asInt();
				if(!n1.get("alive").isNull())
					this.alive = n1.get("alive").asBoolean();
			}
		}
		
		public class N2Node {
			public int x;
			public int y;
			public boolean alive;
			
			public N2Node(Value n2) {
				if(!n2.get("x").isNull())
					this.x = n2.get("x").asInt();
				if(!n2.get("y").isNull())
					this.y = n2.get("y").asInt();
				if(!n2.get("alive").isNull())
					this.alive = n2.get("alive").asBoolean();
			}
		}
		
		public class N3Node {
			public int x;
			public int y;
			public boolean alive;
			
			public N3Node(Value n3) {
				if(!n3.get("x").isNull())
					this.x = n3.get("x").asInt();
				if(!n3.get("y").isNull())
					this.y = n3.get("y").asInt();
				if(!n3.get("alive").isNull())
					this.alive = n3.get("alive").asBoolean();
			}
		}
		
		public class N4Node {
			public int x;
			public int y;
			public boolean alive;
			
			public N4Node(Value n4) {
				if(!n4.get("x").isNull())
					this.x = n4.get("x").asInt();
				if(!n4.get("y").isNull())
					this.y = n4.get("y").asInt();
				if(!n4.get("alive").isNull())
					this.alive = n4.get("alive").asBoolean();
			}
		}
		
	}
	
	public class FourNeighboursAliveMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public FourNeighboursAliveMask setC(Long value) {
			nodeMask.put("c", value);
			return this;
		}
		public FourNeighboursAliveMask setCX(int value) {
			attributeMask.put("c.x", value);
			return this;
		}
		public FourNeighboursAliveMask setCY(int value) {
			attributeMask.put("c.y", value);
			return this;
		}
		public FourNeighboursAliveMask setCAlive(boolean value) {
			attributeMask.put("c.alive", value);
			return this;
		}
		public FourNeighboursAliveMask setN1(Long value) {
			nodeMask.put("n1", value);
			return this;
		}
		public FourNeighboursAliveMask setN1X(int value) {
			attributeMask.put("n1.x", value);
			return this;
		}
		public FourNeighboursAliveMask setN1Y(int value) {
			attributeMask.put("n1.y", value);
			return this;
		}
		public FourNeighboursAliveMask setN1Alive(boolean value) {
			attributeMask.put("n1.alive", value);
			return this;
		}
		public FourNeighboursAliveMask setN2(Long value) {
			nodeMask.put("n2", value);
			return this;
		}
		public FourNeighboursAliveMask setN2X(int value) {
			attributeMask.put("n2.x", value);
			return this;
		}
		public FourNeighboursAliveMask setN2Y(int value) {
			attributeMask.put("n2.y", value);
			return this;
		}
		public FourNeighboursAliveMask setN2Alive(boolean value) {
			attributeMask.put("n2.alive", value);
			return this;
		}
		public FourNeighboursAliveMask setN3(Long value) {
			nodeMask.put("n3", value);
			return this;
		}
		public FourNeighboursAliveMask setN3X(int value) {
			attributeMask.put("n3.x", value);
			return this;
		}
		public FourNeighboursAliveMask setN3Y(int value) {
			attributeMask.put("n3.y", value);
			return this;
		}
		public FourNeighboursAliveMask setN3Alive(boolean value) {
			attributeMask.put("n3.alive", value);
			return this;
		}
		public FourNeighboursAliveMask setN4(Long value) {
			nodeMask.put("n4", value);
			return this;
		}
		public FourNeighboursAliveMask setN4X(int value) {
			attributeMask.put("n4.x", value);
			return this;
		}
		public FourNeighboursAliveMask setN4Y(int value) {
			attributeMask.put("n4.y", value);
			return this;
		}
		public FourNeighboursAliveMask setN4Alive(boolean value) {
			attributeMask.put("n4.alive", value);
			return this;
		}
	
	}
	
	//:~> platform:/resource/GameOfLife/src/GameOfLifeRules.msl#//@entities.9
	public ThreeNeighboursAliveAccess getPattern_ThreeNeighboursAlive() {
		return new ThreeNeighboursAliveAccess();
	}
	
	public class ThreeNeighboursAliveAccess extends NeoPatternAccess<ThreeNeighboursAliveData,ThreeNeighboursAliveMask> {
		public final String c = "c";
		public final String n1 = "n1";
		public final String n2 = "n2";
		public final String n3 = "n3";
		
		@Override
		public NeoPattern matcher(){
			var p = (Pattern) spec.getEntities().get(9);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public NeoPattern matcher(ThreeNeighboursAliveMask mask) {
			var p = (Pattern) spec.getEntities().get(9);
			return NeoPatternFactory.createNeoPattern(p, builder, mask);
		}
		
		@Override
		public ThreeNeighboursAliveData data(NeoMatch m) {
			return new ThreeNeighboursAliveData(m);
		}
		
		@Override
		public ThreeNeighboursAliveMask mask() {
			return new ThreeNeighboursAliveMask();
		}
	}
	
	public class ThreeNeighboursAliveData extends NeoData {
		public final CNode c;
		public final C_neighbours_0_n1Rel c_neighbours_0_n1;
		public final C_neighbours_1_n2Rel c_neighbours_1_n2;
		public final C_neighbours_2_n3Rel c_neighbours_2_n3;
		public final N1Node n1;
		public final N2Node n2;
		public final N3Node n3;
		
		public ThreeNeighboursAliveData(NeoMatch m) {
			var data = m.getData();
			var c = data.get("c");
			this.c = new CNode(c);
			var c_neighbours_0_n1 = data.get("c_neighbours_0_n1");
			this.c_neighbours_0_n1 = new C_neighbours_0_n1Rel(c_neighbours_0_n1);
			var c_neighbours_1_n2 = data.get("c_neighbours_1_n2");
			this.c_neighbours_1_n2 = new C_neighbours_1_n2Rel(c_neighbours_1_n2);
			var c_neighbours_2_n3 = data.get("c_neighbours_2_n3");
			this.c_neighbours_2_n3 = new C_neighbours_2_n3Rel(c_neighbours_2_n3);
			var n1 = data.get("n1");
			this.n1 = new N1Node(n1);
			var n2 = data.get("n2");
			this.n2 = new N2Node(n2);
			var n3 = data.get("n3");
			this.n3 = new N3Node(n3);
		}
		
		
		public class CNode {
			public int x;
			public int y;
			public boolean alive;
			
			public CNode(Value c) {
				if(!c.get("x").isNull())
					this.x = c.get("x").asInt();
				if(!c.get("y").isNull())
					this.y = c.get("y").asInt();
				if(!c.get("alive").isNull())
					this.alive = c.get("alive").asBoolean();
			}
		}
		
		public class C_neighbours_0_n1Rel {
		
			public C_neighbours_0_n1Rel(Value c_neighbours_0_n1) {
			}
		}
		public class C_neighbours_1_n2Rel {
		
			public C_neighbours_1_n2Rel(Value c_neighbours_1_n2) {
			}
		}
		public class C_neighbours_2_n3Rel {
		
			public C_neighbours_2_n3Rel(Value c_neighbours_2_n3) {
			}
		}
		public class N1Node {
			public int x;
			public int y;
			public boolean alive;
			
			public N1Node(Value n1) {
				if(!n1.get("x").isNull())
					this.x = n1.get("x").asInt();
				if(!n1.get("y").isNull())
					this.y = n1.get("y").asInt();
				if(!n1.get("alive").isNull())
					this.alive = n1.get("alive").asBoolean();
			}
		}
		
		public class N2Node {
			public int x;
			public int y;
			public boolean alive;
			
			public N2Node(Value n2) {
				if(!n2.get("x").isNull())
					this.x = n2.get("x").asInt();
				if(!n2.get("y").isNull())
					this.y = n2.get("y").asInt();
				if(!n2.get("alive").isNull())
					this.alive = n2.get("alive").asBoolean();
			}
		}
		
		public class N3Node {
			public int x;
			public int y;
			public boolean alive;
			
			public N3Node(Value n3) {
				if(!n3.get("x").isNull())
					this.x = n3.get("x").asInt();
				if(!n3.get("y").isNull())
					this.y = n3.get("y").asInt();
				if(!n3.get("alive").isNull())
					this.alive = n3.get("alive").asBoolean();
			}
		}
		
	}
	
	public class ThreeNeighboursAliveMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public ThreeNeighboursAliveMask setC(Long value) {
			nodeMask.put("c", value);
			return this;
		}
		public ThreeNeighboursAliveMask setCX(int value) {
			attributeMask.put("c.x", value);
			return this;
		}
		public ThreeNeighboursAliveMask setCY(int value) {
			attributeMask.put("c.y", value);
			return this;
		}
		public ThreeNeighboursAliveMask setCAlive(boolean value) {
			attributeMask.put("c.alive", value);
			return this;
		}
		public ThreeNeighboursAliveMask setN1(Long value) {
			nodeMask.put("n1", value);
			return this;
		}
		public ThreeNeighboursAliveMask setN1X(int value) {
			attributeMask.put("n1.x", value);
			return this;
		}
		public ThreeNeighboursAliveMask setN1Y(int value) {
			attributeMask.put("n1.y", value);
			return this;
		}
		public ThreeNeighboursAliveMask setN1Alive(boolean value) {
			attributeMask.put("n1.alive", value);
			return this;
		}
		public ThreeNeighboursAliveMask setN2(Long value) {
			nodeMask.put("n2", value);
			return this;
		}
		public ThreeNeighboursAliveMask setN2X(int value) {
			attributeMask.put("n2.x", value);
			return this;
		}
		public ThreeNeighboursAliveMask setN2Y(int value) {
			attributeMask.put("n2.y", value);
			return this;
		}
		public ThreeNeighboursAliveMask setN2Alive(boolean value) {
			attributeMask.put("n2.alive", value);
			return this;
		}
		public ThreeNeighboursAliveMask setN3(Long value) {
			nodeMask.put("n3", value);
			return this;
		}
		public ThreeNeighboursAliveMask setN3X(int value) {
			attributeMask.put("n3.x", value);
			return this;
		}
		public ThreeNeighboursAliveMask setN3Y(int value) {
			attributeMask.put("n3.y", value);
			return this;
		}
		public ThreeNeighboursAliveMask setN3Alive(boolean value) {
			attributeMask.put("n3.alive", value);
			return this;
		}
	
	}
	
	//:~> platform:/resource/GameOfLife/src/GameOfLifeRules.msl#//@entities.10
	public TwoNeighboursAliveAccess getPattern_TwoNeighboursAlive() {
		return new TwoNeighboursAliveAccess();
	}
	
	public class TwoNeighboursAliveAccess extends NeoPatternAccess<TwoNeighboursAliveData,TwoNeighboursAliveMask> {
		public final String c = "c";
		public final String n1 = "n1";
		public final String n2 = "n2";
		
		@Override
		public NeoPattern matcher(){
			var p = (Pattern) spec.getEntities().get(10);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public NeoPattern matcher(TwoNeighboursAliveMask mask) {
			var p = (Pattern) spec.getEntities().get(10);
			return NeoPatternFactory.createNeoPattern(p, builder, mask);
		}
		
		@Override
		public TwoNeighboursAliveData data(NeoMatch m) {
			return new TwoNeighboursAliveData(m);
		}
		
		@Override
		public TwoNeighboursAliveMask mask() {
			return new TwoNeighboursAliveMask();
		}
	}
	
	public class TwoNeighboursAliveData extends NeoData {
		public final CNode c;
		public final C_neighbours_0_n1Rel c_neighbours_0_n1;
		public final C_neighbours_1_n2Rel c_neighbours_1_n2;
		public final N1Node n1;
		public final N2Node n2;
		
		public TwoNeighboursAliveData(NeoMatch m) {
			var data = m.getData();
			var c = data.get("c");
			this.c = new CNode(c);
			var c_neighbours_0_n1 = data.get("c_neighbours_0_n1");
			this.c_neighbours_0_n1 = new C_neighbours_0_n1Rel(c_neighbours_0_n1);
			var c_neighbours_1_n2 = data.get("c_neighbours_1_n2");
			this.c_neighbours_1_n2 = new C_neighbours_1_n2Rel(c_neighbours_1_n2);
			var n1 = data.get("n1");
			this.n1 = new N1Node(n1);
			var n2 = data.get("n2");
			this.n2 = new N2Node(n2);
		}
		
		
		public class CNode {
			public int x;
			public int y;
			public boolean alive;
			
			public CNode(Value c) {
				if(!c.get("x").isNull())
					this.x = c.get("x").asInt();
				if(!c.get("y").isNull())
					this.y = c.get("y").asInt();
				if(!c.get("alive").isNull())
					this.alive = c.get("alive").asBoolean();
			}
		}
		
		public class C_neighbours_0_n1Rel {
		
			public C_neighbours_0_n1Rel(Value c_neighbours_0_n1) {
			}
		}
		public class C_neighbours_1_n2Rel {
		
			public C_neighbours_1_n2Rel(Value c_neighbours_1_n2) {
			}
		}
		public class N1Node {
			public int x;
			public int y;
			public boolean alive;
			
			public N1Node(Value n1) {
				if(!n1.get("x").isNull())
					this.x = n1.get("x").asInt();
				if(!n1.get("y").isNull())
					this.y = n1.get("y").asInt();
				if(!n1.get("alive").isNull())
					this.alive = n1.get("alive").asBoolean();
			}
		}
		
		public class N2Node {
			public int x;
			public int y;
			public boolean alive;
			
			public N2Node(Value n2) {
				if(!n2.get("x").isNull())
					this.x = n2.get("x").asInt();
				if(!n2.get("y").isNull())
					this.y = n2.get("y").asInt();
				if(!n2.get("alive").isNull())
					this.alive = n2.get("alive").asBoolean();
			}
		}
		
	}
	
	public class TwoNeighboursAliveMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public TwoNeighboursAliveMask setC(Long value) {
			nodeMask.put("c", value);
			return this;
		}
		public TwoNeighboursAliveMask setCX(int value) {
			attributeMask.put("c.x", value);
			return this;
		}
		public TwoNeighboursAliveMask setCY(int value) {
			attributeMask.put("c.y", value);
			return this;
		}
		public TwoNeighboursAliveMask setCAlive(boolean value) {
			attributeMask.put("c.alive", value);
			return this;
		}
		public TwoNeighboursAliveMask setN1(Long value) {
			nodeMask.put("n1", value);
			return this;
		}
		public TwoNeighboursAliveMask setN1X(int value) {
			attributeMask.put("n1.x", value);
			return this;
		}
		public TwoNeighboursAliveMask setN1Y(int value) {
			attributeMask.put("n1.y", value);
			return this;
		}
		public TwoNeighboursAliveMask setN1Alive(boolean value) {
			attributeMask.put("n1.alive", value);
			return this;
		}
		public TwoNeighboursAliveMask setN2(Long value) {
			nodeMask.put("n2", value);
			return this;
		}
		public TwoNeighboursAliveMask setN2X(int value) {
			attributeMask.put("n2.x", value);
			return this;
		}
		public TwoNeighboursAliveMask setN2Y(int value) {
			attributeMask.put("n2.y", value);
			return this;
		}
		public TwoNeighboursAliveMask setN2Alive(boolean value) {
			attributeMask.put("n2.alive", value);
			return this;
		}
	
	}
	
	//:~> platform:/resource/GameOfLife/src/GameOfLifeRules.msl#//@entities.11
	public OneNeighbourAliveAccess getPattern_OneNeighbourAlive() {
		return new OneNeighbourAliveAccess();
	}
	
	public class OneNeighbourAliveAccess extends NeoPatternAccess<OneNeighbourAliveData,OneNeighbourAliveMask> {
		public final String c = "c";
		public final String n1 = "n1";
		
		@Override
		public NeoPattern matcher(){
			var p = (Pattern) spec.getEntities().get(11);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public NeoPattern matcher(OneNeighbourAliveMask mask) {
			var p = (Pattern) spec.getEntities().get(11);
			return NeoPatternFactory.createNeoPattern(p, builder, mask);
		}
		
		@Override
		public OneNeighbourAliveData data(NeoMatch m) {
			return new OneNeighbourAliveData(m);
		}
		
		@Override
		public OneNeighbourAliveMask mask() {
			return new OneNeighbourAliveMask();
		}
	}
	
	public class OneNeighbourAliveData extends NeoData {
		public final CNode c;
		public final C_neighbours_0_n1Rel c_neighbours_0_n1;
		public final N1Node n1;
		
		public OneNeighbourAliveData(NeoMatch m) {
			var data = m.getData();
			var c = data.get("c");
			this.c = new CNode(c);
			var c_neighbours_0_n1 = data.get("c_neighbours_0_n1");
			this.c_neighbours_0_n1 = new C_neighbours_0_n1Rel(c_neighbours_0_n1);
			var n1 = data.get("n1");
			this.n1 = new N1Node(n1);
		}
		
		
		public class CNode {
			public int x;
			public int y;
			public boolean alive;
			
			public CNode(Value c) {
				if(!c.get("x").isNull())
					this.x = c.get("x").asInt();
				if(!c.get("y").isNull())
					this.y = c.get("y").asInt();
				if(!c.get("alive").isNull())
					this.alive = c.get("alive").asBoolean();
			}
		}
		
		public class C_neighbours_0_n1Rel {
		
			public C_neighbours_0_n1Rel(Value c_neighbours_0_n1) {
			}
		}
		public class N1Node {
			public int x;
			public int y;
			public boolean alive;
			
			public N1Node(Value n1) {
				if(!n1.get("x").isNull())
					this.x = n1.get("x").asInt();
				if(!n1.get("y").isNull())
					this.y = n1.get("y").asInt();
				if(!n1.get("alive").isNull())
					this.alive = n1.get("alive").asBoolean();
			}
		}
		
	}
	
	public class OneNeighbourAliveMask extends NeoMask {
	
		private HashMap<String, Long> nodeMask = new HashMap<>();
		private HashMap<String, Object> attributeMask = new HashMap<>();
		
		@Override
		public Map<String, Long> getMaskedNodes() {
			return nodeMask;
		}
		
		@Override
		public Map<String, Object> getMaskedAttributes() {
			return attributeMask;
		}
		
	
		public OneNeighbourAliveMask setC(Long value) {
			nodeMask.put("c", value);
			return this;
		}
		public OneNeighbourAliveMask setCX(int value) {
			attributeMask.put("c.x", value);
			return this;
		}
		public OneNeighbourAliveMask setCY(int value) {
			attributeMask.put("c.y", value);
			return this;
		}
		public OneNeighbourAliveMask setCAlive(boolean value) {
			attributeMask.put("c.alive", value);
			return this;
		}
		public OneNeighbourAliveMask setN1(Long value) {
			nodeMask.put("n1", value);
			return this;
		}
		public OneNeighbourAliveMask setN1X(int value) {
			attributeMask.put("n1.x", value);
			return this;
		}
		public OneNeighbourAliveMask setN1Y(int value) {
			attributeMask.put("n1.y", value);
			return this;
		}
		public OneNeighbourAliveMask setN1Alive(boolean value) {
			attributeMask.put("n1.alive", value);
			return this;
		}
	
	}
}
