import "platform:/resource/JavaToDocSLE/src/metamodels/SimpleJavaSLE.msl"
import "platform:/resource/JavaToDocSLE/src/metamodels/SimpleDocSLE.msl"

tripleGrammar JavaToDocSLE {
	source {
		SimpleJavaSLE
	}
	
	target {
		SimpleDocSLE
	}
	
	correspondence {
		Clazz <- ClazzToDoc -> Doc
		Method <- MethodToEntry -> Entry
		Parameter <- ParamToEntry -> Entry
		Field <- FieldToEntry -> Entry
	}
	
	rules {
		ClazzToDocRule
		SubClazzToSubDocRule
		MethodToEntryRule
		AddParameterRule
		FieldToEntryRule
//		AddGlossaryRule
//		LinkGlossaryEntryRule
//		AddGlossaryEntryRule
	}
	
//	constraints{
//		NoTwoGlossaries
//		NoEmptyDoc
//		SameNameSameGlossaryEntry
//	}
}

tripleRule ClazzToDocRule : JavaToDocSLE {
	source { 
		++ c : Clazz {
			.name := <clazzName>
		}
	}
	
	target {
		++ d : Doc {
			.name := <clazzName>
		}
	}

	correspondence {
		++ c <-:ClazzToDoc-> d
	}
} 

tripleRule SubClazzToSubDocRule : JavaToDocSLE {
	source { 
		c : Clazz {
			++ -subTypes->sc
		}
		++ sc : Clazz {
			.name := <subClazzName>
		}
	}
	
	target {
		d : Doc {
			++ -hrefs->sd
		}
		++ sd : Doc {
			.name := <subClazzName>
		}
		
	}

	correspondence {
		c <-:ClazzToDoc-> d
		++ sc <-:ClazzToDoc-> sd
	}
} 

tripleRule MethodToEntryRule : JavaToDocSLE {
	source { 
		c : Clazz {
			++ -methods-> m
		}
		++ m : Method {
			.name := <methodName>
		}
	}
	
	target {
		d : Doc {
			++ -entries-> e
		}
		++ e : Entry {
			.name := <methodName>
		}
	}

	correspondence {
		c <-:ClazzToDoc-> d
		++ m <-:MethodToEntry-> e
	}
}

tripleRule AddParameterRule : JavaToDocSLE {
	source { 
		m : Method {
			.name : <entryName>
			++ -parameters-> p	
		}
		++ p : Parameter {
			.name := <paramName>
		}
	}
	
	target {
		e : Entry  {
			.name : <entryName>
		}
	}

	correspondence {
		 m <-:MethodToEntry-> e
		 ++ p <-:ParamToEntry-> e
	}
}

tripleRule FieldToEntryRule : JavaToDocSLE {
	source { 
		c : Clazz {
			++ -fields-> f
		}
		++ f : Field {
			.name := <fieldName>
		}
	}
	
	target {
		d : Doc {
			++ -entries-> e
		}
		++ e : Entry  {
			.name := <fieldName>
		}
	}

	correspondence {
		 c <-:ClazzToDoc-> d
		 ++ f <-:FieldToEntry-> e
	}
}

//tripleRule AddGlossaryRule : JavaToDocSLE {
//	source {
//		
//	}	
//	
//	target {
//		++ g : Glossary  {
//			.name := <glossaryName>
//		}
//	} 
//	
//	correspondence {
//		
//	}
//}
//
//tripleRule LinkGlossaryEntryRule : JavaToDocSLE {
//	
//	source {
//		
//	}	
//	
//	target {
//		e : Entry  {
//			++ -gEntries-> ge
//		}
//		
//		ge : GlossaryEntry {
//			
//		}
//	}
//	
//	correspondence {
//		
//	}
//}
//
//tripleRule AddGlossaryEntryRule : JavaToDocSLE {
//	source {
//		
//	}	
//	
//	target {
//		g : Glossary  {
//			++ -gEntries-> ge
//		}
//		
//		++ ge : GlossaryEntry {
//			.name := <glossaryEntryName>
//		}
//	}
//	
//	correspondence {
//		
//	}
//}

//pattern TwoGlossaries {
//	g1 : Glossary
//	g2 : Glossary 
//}
//
//constraint NoTwoGlossaries = forbid TwoGlossaries

//pattern OneDoc {
//	d : Doc
//}
//
//pattern DocWithEntry {
//	d : Doc {
//		-entries-> e
//	}
//	
//	e : Entry
//}
//
//constraint NoEmptyDoc = if OneDoc then DocWithEntry
//
//pattern SameMethodName {
//	
//	c : Clazz {
//		-methods-> m1
//		-methods-> m2
//	}
//	
//	m1 : Method {
//		.name : <methodName>
//		-corr-> e1
//	}
//	
//	m2 : Method {
//		.name : <methodName>
//		-corr-> e2
//	}
//	
//	e1 : Entry 
//	
//	e2 : Entry 
//}
//
//pattern SameGlossaryEntry {
//
//	e1 : Entry {
//		-gEntries-> ge
//	}
//	
//	e2 : Entry {
//		-gEntries-> ge
//	}
//	
//	ge : GlossaryEntry
//}
//
//constraint SameNameSameGlossaryEntry = if SameMethodName then SameGlossaryEntry