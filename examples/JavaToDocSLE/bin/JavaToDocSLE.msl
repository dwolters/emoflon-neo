import "platform:/resource/JavaToDocSLE/src/metamodels/SimpleJavaSLE.msl"
import "platform:/resource/JavaToDocSLE/src/metamodels/SimpleDocSLE.msl"

tripleGrammar JavaToDocSLE {
	source {
		SimpleJavaSLE
	}
	
	target {
		SimpleDocSLE
	}
	
	correspondence {
		Clazz <- ClazzToDoc -> Doc
		Method <- MethodToEntry -> Entry
		Parameter <- ParamToEntry -> Entry
		Field <- FieldToEntry -> Entry
	}
	
	rules {
		ClazzToDocRule
		SubClazzToSubDocRule
		MethodToEntryRule
		AddParameterRule
		FieldToEntryRule
		AddGlossaryRule
		LinkGlossaryEntryRule
		AddGlossaryEntryRule
	}
	
	constraints{
//		NoDoubleEntryDirect
//		NoDoubleEntryTransitive
		NoTwoGlossaries
		NoDoubleGlossaryLink
		NoTripleInheritance
		NoEmptyDoc
		SameHrefSameGlossaryEntry
	}
}

tripleRule ClazzToDocRule : JavaToDocSLE {
	source { 
		++ c : Clazz {
			.name := <clazzName>
		}
	}
	
	target {
		++ d : Doc {
			.name := <clazzName>
		}
	}

	correspondence {
		++ c <-:ClazzToDoc-> d
	}
} 

tripleRule SubClazzToSubDocRule : JavaToDocSLE {
	source { 
		c : Clazz {
			++ -subTypes->sc
		}
		++ sc : Clazz {
			.name := <subClazzName>
		}
	}
	
	target {
		d : Doc {
			++ -hrefs->sd
		}
		++ sd : Doc {
			.name := <subClazzName>
		}
		
	}

	correspondence {
		c <-:ClazzToDoc-> d
		++ sc <-:ClazzToDoc-> sd
	}
} 

tripleRule MethodToEntryRule : JavaToDocSLE {
	source { 
		c : Clazz {
			++ -methods-> m
		}
		++ m : Method {
			.name := <methodName>
			//++ -type-> t
		}
		
		//t : Clazz
	}
	
	target {
		d : Doc {
			++ -entries-> e
		}
		++ e : Entry {
			.name := <methodName>
			//++ -href->r
		}
		
		//r : Doc
	}

	correspondence {
		c <-:ClazzToDoc-> d
		//t <-:ClazzToDoc-> r
		++ m <-:MethodToEntry-> e
	}
}

tripleRule AddParameterRule : JavaToDocSLE {
	source { 
		m : Method {
			.name : <entryName>
			++ -parameters-> p	
		}
		++ p : Parameter {
			.name := <paramName>
			//++ -type-> t
		}
		//t : Clazz
	}
	
	target {
		e : Entry  {
			.name : <entryName>
		}
	}

	correspondence {
		 m <-:MethodToEntry-> e
		 ++ p <-:ParamToEntry-> e
	}
}

tripleRule FieldToEntryRule : JavaToDocSLE {
	source { 
		c : Clazz {
			++ -fields-> f
		}
		++ f : Field {
			.name := <fieldName>
			//++ -type-> t
		}
		
		//t : Clazz
	}
	
	target {
		d : Doc {
			++ -entries-> e
		}
		++ e : Entry  {
			.name := <fieldName>
			//++ -href->r
		}
		
		//r : Doc
	}

	correspondence {
		 c <-:ClazzToDoc-> d
		 //t <-:ClazzToDoc-> r
		 ++ f <-:FieldToEntry-> e
	}
}

tripleRule AddGlossaryRule : JavaToDocSLE {
	source {
		
	}	
	
	target {
		++ g : Glossary  {
			.name := <glossaryName>
		}
	} 
	
	correspondence {
		
	}
}

tripleRule LinkGlossaryEntryRule : JavaToDocSLE {
	
	source {
		
	}	
	
	target {
		e : Entry  {
			++ -gEntries-> ge
		}
		
		ge : GlossaryEntry {
			
		}
	}
	
	correspondence {
		
	}
}

tripleRule AddGlossaryEntryRule : JavaToDocSLE {
	source {
		
	}	
	
	target {
		g : Glossary  {
			++ -gEntries-> ge
		}
		
		++ ge : GlossaryEntry {
			.name := <glossaryEntryName>
		}
	}
	
	correspondence {
		
	}
}

pattern TwoGlossaries {
	g1 : Glossary
	g2 : Glossary 
}

constraint NoTwoGlossaries = forbid TwoGlossaries

pattern DoubleGlossaryLink {
	ge : GlossaryEntry
	
	e : Entry {
		-gEntries->ge
		-gEntries->ge
	}
}

constraint NoDoubleGlossaryLink = forbid DoubleGlossaryLink

pattern TripleInheritance {
	c1: Clazz {
		-subTypes-> c2
	}
	
	c2: Clazz {
		-subTypes-> c3
	}
	
	c3: Clazz 
}

constraint NoTripleInheritance = forbid TripleInheritance

pattern ADoc {
	d : Doc
}

pattern DocHasEntry {
	d : Doc {
		-entries-> e
	}
	
	e : Entry
}
	
constraint NoEmptyDoc = if ADoc then DocHasEntry

pattern EntriesWithSameHref {
	
	d : Doc {
		-entries->e1
		-entries->e2	
	}
	
	e1 : Entry {
		//-href->r
	}
	e2 : Entry{
		//-href->r
	}
	
	//r : Doc
}

pattern EntriesWithSameGlossaryEntry -> EntriesWithSameHref {
	e1 : Entry {
		-gEntries-> ge
	}
	
	e2 : Entry {
		-gEntries-> ge
	}
	
	ge: GlossaryEntry
}

constraint SameHrefSameGlossaryEntry = if EntriesWithSameHref then EntriesWithSameGlossaryEntry