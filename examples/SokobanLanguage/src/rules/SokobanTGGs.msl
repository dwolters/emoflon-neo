import "platform:/resource/SokobanLanguage/src/metamodels/SokobanLanguage.msl"

tripleGrammar SokobanImportExport {
	source {
		sokobanExchangeFormat
	}
	
	target {
		SokobanLanguage
	}
	
	correspondence {
		sokobanExchangeFormat.Entry <-EntryToField-> SokobanLanguage.Field
	
		sokobanExchangeFormat.Board <-BoardToBoard-> SokobanLanguage.Board
	}
}


abstract tripleRule BoardToBoardRule : SokobanImportExport {
	source {
		++ sokBoard:sokobanExchangeFormat.Board {
			++ -firstRow-> row
		}
		++ row:sokobanExchangeFormat.Row {
			++ -firstEntry->ne
		}
		++ ne:sokobanExchangeFormat.Entry
	}
	
	target {
		++ board:SokobanLanguage.Board {
			++ -fields->nf {
				.row : 0
				.col : 0
			}
		}
		++ nf:SokobanLanguage.Field
	}
	
	correspondence {
		++ sokBoard <-:SokobanImportExport.BoardToBoard-> board
		
		++ ne <-:SokobanImportExport.EntryToField-> nf
	}
	
	attributeConditions {
		
	}
	
}

tripleRule BoardEndEntryRule:SokobanImportExport -> BoardToBoardRule, EndRule

tripleRule BoardNormalEntryRule:SokobanImportExport -> BoardToBoardRule, NormalRule



abstract tripleRule EndRule:SokobanImportExport {
	source {
		++ ne: sokobanExchangeFormat.End
	}
	
	target {
		++ nf: SokobanLanguage.Field {
			.endPos : true
		}
	}
}

abstract tripleRule NormalRule:SokobanImportExport {
	source {
		++ ne: sokobanExchangeFormat.Normal
	}
	
	target {
		++ nf: SokobanLanguage.Field {
			.endPos : false
		}
	}
}

abstract tripleRule AllOtherFields:SokobanImportExport {
	source {
		ble: sokobanExchangeFormat.Entry {
			++ -next->ne
		}
		
		++ ne: sokobanExchangeFormat.Entry
	}
	
	target {
		b: SokobanLanguage.Board {
			-fields->ul
			++ -fields->nf
		}
		
		ul: SokobanLanguage.Field {
			-right->ur
			-bottom->bl {
				.row > 0				
			}
		}
		
		ur: SokobanLanguage.Field {
			++ -bottom->nf
		}
		
		bl: SokobanLanguage.Field {
			++ -right->nf
		}
		
		++ nf: SokobanLanguage.Field
	}
	
	correspondence {
		++ ble <-:SokobanImportExport.EntryToField-> bl
		
		++ ne <-:SokobanImportExport.EntryToField-> nf
	}
	
	attributeConditions {
		
	}
}

tripleRule AllOtherFieldsEnd:SokobanImportExport -> AllOtherFields, EndRule { }

tripleRule AllOtherFieldsNormal:SokobanImportExport -> AllOtherFields, NormalRule { }


abstract tripleRule FirstRowAllCols:SokobanImportExport {
	source {
		e: sokobanExchangeFormat.Entry { }
		
		++ ne: sokobanExchangeFormat.Entry { }
	}
	
	target {
		b: SokobanLanguage.Board {
			-fields->f {				
				.row : 0
			}
			++ -fields->nf {
				.row : 0
			}
		}
		
		f: SokobanLanguage.Field {
			++ -bottom->nf
		}
		
		++ nf: SokobanLanguage.Field
	}
	
	correspondence {
		e<-:SokobanImportExport.EntryToField->f
		
		++ ne<-:SokobanImportExport.EntryToField->nf
	}
	
	attributeConditions {
		
	}
}

tripleRule FirstColAllRows:SokobanImportExport -> FirstRowAllCols {
	source {
		r: sokobanExchangeFormat.Row {
			-firstEntry-> $e
			++ -next-> nr
		}
		
		++ nr:sokobanExchangeFormat.Row {
			++ -firstEntry-> $ne
		}
	}
	target {
		f: SokobanLanguage.Field {
			++ -bottom-> nf {
				.col : 0	
			}
		}
		
		++ nf: SokobanLanguage.Field
	}
}

tripleRule FirstColAllRowsEnd:SokobanImportExport -> FirstColAllRows, EndRule

tripleRule FirstColAllRowsNormal:SokobanImportExport -> FirstColAllRows, NormalRule



