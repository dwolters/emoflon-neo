import "platform:/resource/FacebookToInstagram_Constrained/src/Facebook.msl"
import "platform:/resource/FacebookToInstagram_Constrained/src/Instagram.msl"

grammar FacebookToInstagram_Constrained_MI {
	
	NetworkToNetwork
	NetworkToNetwork_1
	NetworkToNetwork_3
	NetworkToNetwork_5
	
	UserToUser
	UserToUser_1
	UserToUser_4
	UserToUser_5
	UserToUser_7
	UserToUser_16
	UserToUser_17
	UserToUser_25
	
	RequestFriendship
	
	AcceptFriendship
	AcceptFriendship_1
	AcceptFriendship_2
	AcceptFriendship_8
	AcceptFriendship_10
	AcceptFriendship_16
	AcceptFriendship_18
	AcceptFriendship_24
	AcceptFriendship_26
	AcceptFriendship_30
}
	
  rule NetworkToNetwork {
	fl:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-corr->il
		{
			._type_ : "NetworkToNetwork"
		}
		.description : il::description
		~_ex_ : true
	}

	il:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	attributeConstraints {
	}
} 

  rule NetworkToNetwork_1 {
	fl:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		++-corr->il
		{
			._type_ := "NetworkToNetwork"
		}
		.description : il::description
		~_ex_ : true
	}

	il:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	attributeConstraints {
	}
} 

  rule NetworkToNetwork_3 {
	fl:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		++-corr->il
		{
			._type_ := "NetworkToNetwork"
		}
		~_ex_ : true
	}

	++il:InstagramLanguage.Network {
		.enamespace := <__trgModelName>
		.description := fl::description
	}
	
	attributeConstraints {
	}
} 

  rule NetworkToNetwork_5 {
	++fl:FacebookLanguage.Network {
		.enamespace := <__srcModelName>
		++-corr->il
		{
			._type_ := "NetworkToNetwork"
		}
		.description := il::description
	}

	il:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	attributeConstraints {
	}
} 


  rule UserToUser {
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
		.name : iu::name
		~_ex_ : true
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu
		{
			~_ex_ : true
		}
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}

	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu
		{
			~_ex_ : true
		}
	}
	
	attributeConstraints {
	}
} 

  rule UserToUser_1 {
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		++-corr->iu
		{
			._type_ := "FbUserToInUser"
		}
		.name : iu::name
		~_ex_ : true
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu
		{
			~_ex_ : true
		}
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}

	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu
		{
			~_ex_ : true
		}
	}
	
	attributeConstraints {
	}
} 

  rule UserToUser_4 {
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
		.name : iu::name
		~_ex_ : true
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu
		{
			~_ex_ : true
		}
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}

	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		++-users->iu
	}
	
	attributeConstraints {
	}
} 

  rule UserToUser_5 {
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		++-corr->iu
		{
			._type_ := "FbUserToInUser"
		}
		.name : iu::name
		~_ex_ : true
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu
		{
			~_ex_ : true
		}
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}

	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		++-users->iu
	}
	
	attributeConstraints {
	}
} 

  rule UserToUser_7 {
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		++-corr->iu
		{
			._type_ := "FbUserToInUser"
		}
		~_ex_ : true
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu
		{
			~_ex_ : true
		}
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}

	++iu:InstagramLanguage.User {
		.enamespace := <__trgModelName>
		.name := fu::name
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		++-users->iu
	}
	
	attributeConstraints {
	}
} 

  rule UserToUser_16 {
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
		.name : iu::name
		~_ex_ : true
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		++-users->fu
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}

	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu
		{
			~_ex_ : true
		}
	}
	
	attributeConstraints {
	}
} 

  rule UserToUser_17 {
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		++-corr->iu
		{
			._type_ := "FbUserToInUser"
		}
		.name : iu::name
		~_ex_ : true
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		++-users->fu
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}

	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu
		{
			~_ex_ : true
		}
	}
	
	attributeConstraints {
	}
} 

  rule UserToUser_25 {
	++fu:FacebookLanguage.User {
		.enamespace := <__srcModelName>
		++-corr->iu
		{
			._type_ := "FbUserToInUser"
		}
		.name := iu::name
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		++-users->fu
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}

	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu
		{
			~_ex_ : true
		}
	}
	
	attributeConstraints {
	}
} 


  rule RequestFriendship {
	fu1:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu1
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fu2:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu2
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu1
		-users->fu2
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}

	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu1
		-users->iu2
	}
	
	iu1:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu2
		{
			~_ex_ : true
		}
	}
	
	iu2:InstagramLanguage.User {
		.enamespace : <__trgModelName>
	}
	
	attributeConstraints {
	}
} 


  rule AcceptFriendship {
	fu1:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu1
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fu2:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu2
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu1
		-users->fu2
		-friendships->fri
		{
			~_ex_ : true
		}
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}
	
	fri:Friendship {
		.enamespace : <__srcModelName>
		-friends->fu1
		{
			~_ex_ : true
		}
		-friends->fu2
		{
			~_ex_ : true
		}
		~_ex_ : true
	}

	iu1:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu2
	}
	
	iu2:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu1
		{
			~_ex_ : true
		}
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu1
		-users->iu2
	}
	
	attributeConstraints {
	}
} 

  rule AcceptFriendship_1 {
	fu1:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu1
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fu2:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu2
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu1
		-users->fu2
		-friendships->fri
		{
			~_ex_ : true
		}
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}
	
	fri:Friendship {
		.enamespace : <__srcModelName>
		-friends->fu1
		{
			~_ex_ : true
		}
		-friends->fu2
		{
			~_ex_ : true
		}
		~_ex_ : true
	}

	iu1:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu2
	}
	
	iu2:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		++-follows->iu1
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu1
		-users->iu2
	}
	
	attributeConstraints {
	}
} 

  rule AcceptFriendship_2 {
	fu1:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu1
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fu2:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu2
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu1
		-users->fu2
		++-friendships->fri
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}
	
	fri:Friendship {
		.enamespace : <__srcModelName>
		-friends->fu1
		{
			~_ex_ : true
		}
		-friends->fu2
		{
			~_ex_ : true
		}
		~_ex_ : true
	}

	iu1:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu2
	}
	
	iu2:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu1
		{
			~_ex_ : true
		}
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu1
		-users->iu2
	}
	
	attributeConstraints {
	}
} 

  rule AcceptFriendship_8 {
	fu1:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu1
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fu2:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu2
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu1
		-users->fu2
		-friendships->fri
		{
			~_ex_ : true
		}
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}
	
	fri:Friendship {
		.enamespace : <__srcModelName>
		++-friends->fu1
		-friends->fu2
		{
			~_ex_ : true
		}
		~_ex_ : true
	}

	iu1:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu2
	}
	
	iu2:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu1
		{
			~_ex_ : true
		}
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu1
		-users->iu2
	}
	
	attributeConstraints {
	}
} 

  rule AcceptFriendship_10 {
	fu1:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu1
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fu2:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu2
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu1
		-users->fu2
		++-friendships->fri
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}
	
	fri:Friendship {
		.enamespace : <__srcModelName>
		++-friends->fu1
		-friends->fu2
		{
			~_ex_ : true
		}
		~_ex_ : true
	}

	iu1:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu2
	}
	
	iu2:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu1
		{
			~_ex_ : true
		}
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu1
		-users->iu2
	}
	
	attributeConstraints {
	}
} 

  rule AcceptFriendship_16 {
	fu1:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu1
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fu2:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu2
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu1
		-users->fu2
		-friendships->fri
		{
			~_ex_ : true
		}
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}
	
	fri:Friendship {
		.enamespace : <__srcModelName>
		-friends->fu1
		{
			~_ex_ : true
		}
		++-friends->fu2
		~_ex_ : true
	}

	iu1:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu2
	}
	
	iu2:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu1
		{
			~_ex_ : true
		}
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu1
		-users->iu2
	}
	
	attributeConstraints {
	}
} 

  rule AcceptFriendship_18 {
	fu1:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu1
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fu2:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu2
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu1
		-users->fu2
		++-friendships->fri
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}
	
	fri:Friendship {
		.enamespace : <__srcModelName>
		-friends->fu1
		{
			~_ex_ : true
		}
		++-friends->fu2
		~_ex_ : true
	}

	iu1:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu2
	}
	
	iu2:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu1
		{
			~_ex_ : true
		}
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu1
		-users->iu2
	}
	
	attributeConstraints {
	}
} 

  rule AcceptFriendship_24 {
	fu1:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu1
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fu2:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu2
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu1
		-users->fu2
		-friendships->fri
		{
			~_ex_ : true
		}
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}
	
	fri:Friendship {
		.enamespace : <__srcModelName>
		++-friends->fu1
		++-friends->fu2
		~_ex_ : true
	}

	iu1:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu2
	}
	
	iu2:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu1
		{
			~_ex_ : true
		}
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu1
		-users->iu2
	}
	
	attributeConstraints {
	}
} 

  rule AcceptFriendship_26 {
	fu1:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu1
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fu2:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu2
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu1
		-users->fu2
		++-friendships->fri
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}
	
	fri:Friendship {
		.enamespace : <__srcModelName>
		++-friends->fu1
		++-friends->fu2
		~_ex_ : true
	}

	iu1:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu2
	}
	
	iu2:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu1
		{
			~_ex_ : true
		}
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu1
		-users->iu2
	}
	
	attributeConstraints {
	}
} 

  rule AcceptFriendship_30 {
	fu1:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu1
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fu2:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu2
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu1
		-users->fu2
		++-friendships->fri
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}
	
	++fri:Friendship {
		.enamespace := <__srcModelName>
		++-friends->fu1
		++-friends->fu2
	}

	iu1:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu2
	}
	
	iu2:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu1
		{
			~_ex_ : true
		}
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu1
		-users->iu2
	}
	
	attributeConstraints {
	}
} 

