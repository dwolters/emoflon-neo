import "platform:/resource/FacebookToInstagramFASE/src/Facebook.msl"
import "platform:/resource/FacebookToInstagramFASE/src/Instagram.msl"

grammar FacebookToInstagramFASE_FWD {
	NetworkToNetwork
	UserToUser
	RequestFriendship
	AcceptFriendship
}
	
  rule NetworkToNetwork {
	fl:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		++-corr->il
		{
			._type_ := "NetworkToNetwork"
		}
		~_tr_ : false
		~_tr_ := true
	}

	++il:InstagramLanguage.Network {
		.enamespace := <__trgModelName>
		.description := fl::description
	}
	
	attributeConstraints {
	}
} 


  rule UserToUser {
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		++-corr->iu
		{
			._type_ := "FbUserToInUser"
		}
		~_tr_ : false
		~_tr_ := true
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu
		{
			~_tr_ : false
			~_tr_ := true
		}
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
		~_tr_ : true
	}

	++iu:InstagramLanguage.User {
		.enamespace := <__trgModelName>
		.name := fu::name
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		++-users->iu
	}
	
	attributeConstraints {
	}
} 


  rule RequestFriendship {
	fu1:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu1
		{
			._type_ : "FbUserToInUser"
		}
		~_tr_ : true
	}
	
	fu2:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu2
		{
			._type_ : "FbUserToInUser"
		}
		~_tr_ : true
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu1
		{
			~_tr_ : true
		}
		-users->fu2
		{
			~_tr_ : true
		}
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
		~_tr_ : true
	}

	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu1
		-users->iu2
	}
	
	iu1:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		++-follows->iu2
	}
	
	iu2:InstagramLanguage.User {
		.enamespace : <__trgModelName>
	}
	
	attributeConstraints {
	}
} when RequestFriendshipNAC

constraint RequestFriendshipNAC = RequestFriendship_NoDoubleFollowsNAC && RequestFriendship_NoOppositeFollowsNAC

constraint RequestFriendship_NoDoubleFollowsNAC = forbid RequestFriendship_NoDoubleFollows

	pattern RequestFriendship_NoDoubleFollows {
		iu1 : InstagramLanguage.User {
			.enamespace : <__trgModelName>
			-follows->iu2
		}
		iu2 : InstagramLanguage.User {
			.enamespace : <__trgModelName>
		}
		
	}
constraint RequestFriendship_NoOppositeFollowsNAC = forbid RequestFriendship_NoOppositeFollows

	pattern RequestFriendship_NoOppositeFollows {
		iu1 : InstagramLanguage.User {
			.enamespace : <__trgModelName>
		}
		iu2 : InstagramLanguage.User {
			.enamespace : <__trgModelName>
			-follows->iu1
		}
		
	}

  rule AcceptFriendship {
	fu1:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu1
		{
			._type_ : "FbUserToInUser"
		}
		~_tr_ : true
	}
	
	fu2:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu2
		{
			._type_ : "FbUserToInUser"
		}
		~_tr_ : true
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu1
		{
			~_tr_ : true
		}
		-users->fu2
		{
			~_tr_ : true
		}
		-friendships->fri
		{
			~_tr_ : false
			~_tr_ := true
		}
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
		~_tr_ : true
	}
	
	fri:Friendship {
		.enamespace : <__srcModelName>
		-friends->fu1
		{
			~_tr_ : false
			~_tr_ := true
		}
		-friends->fu2
		{
			~_tr_ : false
			~_tr_ := true
		}
		~_tr_ : false
		~_tr_ := true
	}

	iu1:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu2
	}
	
	iu2:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		++-follows->iu1
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu1
		-users->iu2
	}
	
	attributeConstraints {
	}
} 

