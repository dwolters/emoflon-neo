import "platform:/resource/FacebookToInstagram/src/Facebook.msl"
import "platform:/resource/FacebookToInstagram/src/Instagram.msl"

grammar FacebookToInstagramGrammar_MI {
	
	NetworkToNetworkIslandRule
	NetworkToNetworkIslandRule_1
	NetworkToNetworkIslandRule_3
	NetworkToNetworkIslandRule_5
	
	UserToUserIslandRule
	UserToUserIslandRule_1
	UserToUserIslandRule_3
	UserToUserIslandRule_5
	
	UserNetworkBridgeRule
	UserNetworkBridgeRule_1
	UserNetworkBridgeRule_2
	
	RequestFriendship
	
	AcceptFriendship
	AcceptFriendship_1
	AcceptFriendship_4
	AcceptFriendship_8
	AcceptFriendship_12
	AcceptFriendship_16
	AcceptFriendship_20
	AcceptFriendship_24
	AcceptFriendship_28
	AcceptFriendship_30
	
	IgnoreInterNetworkFollowers
	
	ParentsIgnoreRule
	
	SpouseIgnoreRule
	SpouseIgnoreRule_1
	SpouseIgnoreRule_2
	
	SiblingsIgnoreRule
	SiblingsIgnoreRule_1
	SiblingsIgnoreRule_2
}
	
  rule NetworkToNetworkIslandRule {
	fl:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-corr->il
		{
			._type_ : "NetworkToNetwork"
		}
		~_ex_ : true
	}

	il:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		.description : fl::description
		~_ex_ : true
	}
	
	attributeConstraints {
	}
} 

  rule NetworkToNetworkIslandRule_1 {
	fl:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		++-corr->il
		{
			._type_ := "NetworkToNetwork"
		}
		~_ex_ : true
	}

	il:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		.description : fl::description
		~_ex_ : true
	}
	
	attributeConstraints {
	}
} 

  rule NetworkToNetworkIslandRule_3 {
	fl:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		++-corr->il
		{
			._type_ := "NetworkToNetwork"
		}
		~_ex_ : true
	}

	++il:InstagramLanguage.Network {
		.enamespace := <__trgModelName>
		.description := fl::description
	}
	
	attributeConstraints {
	}
} 

  rule NetworkToNetworkIslandRule_5 {
	++fl:FacebookLanguage.Network {
		.enamespace := <__srcModelName>
		++-corr->il
		{
			._type_ := "NetworkToNetwork"
		}
		.description := il::description
	}

	il:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	attributeConstraints {
	}
} 


  rule UserToUserIslandRule {
	flu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->ilu
		{
			._type_ : "FbUserToInUser"
		}
		~_ex_ : true
	}

	ilu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		.name : flu::name
		~_ex_ : true
	}
	
	attributeConstraints {
	}
} 

  rule UserToUserIslandRule_1 {
	flu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		++-corr->ilu
		{
			._type_ := "FbUserToInUser"
		}
		~_ex_ : true
	}

	ilu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		.name : flu::name
		~_ex_ : true
	}
	
	attributeConstraints {
	}
} 

  rule UserToUserIslandRule_3 {
	flu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		++-corr->ilu
		{
			._type_ := "FbUserToInUser"
		}
		~_ex_ : true
	}

	++ilu:InstagramLanguage.User {
		.enamespace := <__trgModelName>
		.name := flu::name
	}
	
	attributeConstraints {
	}
} 

  rule UserToUserIslandRule_5 {
	++flu:FacebookLanguage.User {
		.enamespace := <__srcModelName>
		++-corr->ilu
		{
			._type_ := "FbUserToInUser"
		}
		.name := ilu::name
	}

	ilu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	attributeConstraints {
	}
} 


  rule UserNetworkBridgeRule {
	f:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu
		{
			~_ex_ : true
		}
		-corr->i
		{
			._type_ : "NetworkToNetwork"
		}
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
	}

	i:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu
		{
			~_ex_ : true
		}
	}
	
	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
	}
	
	attributeConstraints {
	}
} 

  rule UserNetworkBridgeRule_1 {
	f:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu
		{
			~_ex_ : true
		}
		-corr->i
		{
			._type_ : "NetworkToNetwork"
		}
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
	}

	i:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		++-users->iu
	}
	
	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
	}
	
	attributeConstraints {
	}
} 

  rule UserNetworkBridgeRule_2 {
	f:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		++-users->fu
		-corr->i
		{
			._type_ : "NetworkToNetwork"
		}
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
	}

	i:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu
		{
			~_ex_ : true
		}
	}
	
	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
	}
	
	attributeConstraints {
	}
} 


  rule RequestFriendship {

	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
	}
	
	in:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu
		{
			~_ex_ : true
		}
	}
	
	attributeConstraints {
	}
} 


  rule AcceptFriendship {
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->in
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fri:Friendship {
		.enamespace : <__srcModelName>
		-friends->fn
		{
			~_ex_ : true
		}
		-friends->fu
		{
			~_ex_ : true
		}
		~_ex_ : true
	}
	
	n:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-friendships->fri
		{
			~_ex_ : true
		}
		-users->fn
		-users->fu
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
	}

	in:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu
		{
			~_ex_ : true
		}
	}
	
	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->in
	}
	
	attributeConstraints {
	}
} 

  rule AcceptFriendship_1 {
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->in
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fri:Friendship {
		.enamespace : <__srcModelName>
		-friends->fn
		{
			~_ex_ : true
		}
		-friends->fu
		{
			~_ex_ : true
		}
		~_ex_ : true
	}
	
	n:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-friendships->fri
		{
			~_ex_ : true
		}
		-users->fn
		-users->fu
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
	}

	in:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		++-follows->iu
	}
	
	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->in
	}
	
	attributeConstraints {
	}
} 

  rule AcceptFriendship_4 {
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->in
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fri:Friendship {
		.enamespace : <__srcModelName>
		++-friends->fn
		-friends->fu
		{
			~_ex_ : true
		}
		~_ex_ : true
	}
	
	n:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-friendships->fri
		{
			~_ex_ : true
		}
		-users->fn
		-users->fu
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
	}

	in:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu
		{
			~_ex_ : true
		}
	}
	
	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->in
	}
	
	attributeConstraints {
	}
} 

  rule AcceptFriendship_8 {
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->in
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fri:Friendship {
		.enamespace : <__srcModelName>
		-friends->fn
		{
			~_ex_ : true
		}
		++-friends->fu
		~_ex_ : true
	}
	
	n:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-friendships->fri
		{
			~_ex_ : true
		}
		-users->fn
		-users->fu
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
	}

	in:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu
		{
			~_ex_ : true
		}
	}
	
	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->in
	}
	
	attributeConstraints {
	}
} 

  rule AcceptFriendship_12 {
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->in
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fri:Friendship {
		.enamespace : <__srcModelName>
		++-friends->fn
		++-friends->fu
		~_ex_ : true
	}
	
	n:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-friendships->fri
		{
			~_ex_ : true
		}
		-users->fn
		-users->fu
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
	}

	in:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu
		{
			~_ex_ : true
		}
	}
	
	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->in
	}
	
	attributeConstraints {
	}
} 

  rule AcceptFriendship_16 {
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->in
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fri:Friendship {
		.enamespace : <__srcModelName>
		-friends->fn
		{
			~_ex_ : true
		}
		-friends->fu
		{
			~_ex_ : true
		}
		~_ex_ : true
	}
	
	n:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		++-friendships->fri
		-users->fn
		-users->fu
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
	}

	in:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu
		{
			~_ex_ : true
		}
	}
	
	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->in
	}
	
	attributeConstraints {
	}
} 

  rule AcceptFriendship_20 {
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->in
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fri:Friendship {
		.enamespace : <__srcModelName>
		++-friends->fn
		-friends->fu
		{
			~_ex_ : true
		}
		~_ex_ : true
	}
	
	n:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		++-friendships->fri
		-users->fn
		-users->fu
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
	}

	in:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu
		{
			~_ex_ : true
		}
	}
	
	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->in
	}
	
	attributeConstraints {
	}
} 

  rule AcceptFriendship_24 {
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->in
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fri:Friendship {
		.enamespace : <__srcModelName>
		-friends->fn
		{
			~_ex_ : true
		}
		++-friends->fu
		~_ex_ : true
	}
	
	n:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		++-friendships->fri
		-users->fn
		-users->fu
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
	}

	in:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu
		{
			~_ex_ : true
		}
	}
	
	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->in
	}
	
	attributeConstraints {
	}
} 

  rule AcceptFriendship_28 {
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->in
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fri:Friendship {
		.enamespace : <__srcModelName>
		++-friends->fn
		++-friends->fu
		~_ex_ : true
	}
	
	n:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		++-friendships->fri
		-users->fn
		-users->fu
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
	}

	in:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu
		{
			~_ex_ : true
		}
	}
	
	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->in
	}
	
	attributeConstraints {
	}
} 

  rule AcceptFriendship_30 {
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->in
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	++fri:Friendship {
		.enamespace := <__srcModelName>
		++-friends->fn
		++-friends->fu
	}
	
	n:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		++-friendships->fri
		-users->fn
		-users->fu
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
	}

	in:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu
		{
			~_ex_ : true
		}
	}
	
	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->in
	}
	
	attributeConstraints {
	}
} 


  rule IgnoreInterNetworkFollowers {
	nu:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu
	}
	
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->in
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	n:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fn
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
	}

	in:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu
		{
			~_ex_ : true
		}
	}
	
	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->in
	}
	
	attributeConstraints {
	}
} 


  rule ParentsIgnoreRule {
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-parents->fn
		{
			~_ex_ : true
		}
	}

	
	attributeConstraints {
	}
} 


  rule SpouseIgnoreRule {
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-spouse->fn
		{
			~_ex_ : true
		}
	}
	
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-spouse->fu
		{
			~_ex_ : true
		}
	}

	
	attributeConstraints {
	}
} 

  rule SpouseIgnoreRule_1 {
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		++-spouse->fn
	}
	
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-spouse->fu
		{
			~_ex_ : true
		}
	}

	
	attributeConstraints {
	}
} 

  rule SpouseIgnoreRule_2 {
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-spouse->fn
		{
			~_ex_ : true
		}
	}
	
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		++-spouse->fu
	}

	
	attributeConstraints {
	}
} 


  rule SiblingsIgnoreRule {
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-siblings->fu
		{
			~_ex_ : true
		}
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-siblings->fn
		{
			~_ex_ : true
		}
	}

	
	attributeConstraints {
	}
} 

  rule SiblingsIgnoreRule_1 {
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		++-siblings->fu
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-siblings->fn
		{
			~_ex_ : true
		}
	}

	
	attributeConstraints {
	}
} 

  rule SiblingsIgnoreRule_2 {
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-siblings->fu
		{
			~_ex_ : true
		}
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		++-siblings->fn
	}

	
	attributeConstraints {
	}
} 

