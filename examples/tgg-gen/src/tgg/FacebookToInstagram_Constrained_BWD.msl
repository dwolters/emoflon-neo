import "platform:/resource/FacebookToInstagram_Constrained/src/Facebook.msl"
import "platform:/resource/FacebookToInstagram_Constrained/src/Instagram.msl"

grammar FacebookToInstagram_Constrained_BWD {
	NetworkToNetwork
	UserToUser
	RequestFriendship
	AcceptFriendship
}
	
  rule NetworkToNetwork {
	++fl:FacebookLanguage.Network {
		.enamespace := <__srcModelName>
		++-corr->il
		{
			._type_ := "NetworkToNetwork"
		}
		.description := il::description
	}

	il:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		~_tr_ : false
		~_tr_ := true
	}
	
	attributeConstraints {
	}
} 


  rule UserToUser {
	++fu:FacebookLanguage.User {
		.enamespace := <__srcModelName>
		++-corr->iu
		{
			._type_ := "FbUserToInUser"
		}
		.name := iu::name
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		++-users->fu
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}

	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		~_tr_ : false
		~_tr_ := true
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu
		{
			~_tr_ : false
			~_tr_ := true
		}
		~_tr_ : true
	}
	
	attributeConstraints {
	}
} 


  rule RequestFriendship {
	fu1:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu1
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fu2:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu2
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu1
		-users->fu2
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}

	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu1
		{
			~_tr_ : true
		}
		-users->iu2
		{
			~_tr_ : true
		}
		~_tr_ : true
	}
	
	iu1:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu2
		{
			~_tr_ : false
			~_tr_ := true
		}
		~_tr_ : true
	}
	
	iu2:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		~_tr_ : true
	}
	
	attributeConstraints {
	}
} 


  rule AcceptFriendship {
	fu1:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu1
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fu2:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu2
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	fn:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu1
		-users->fu2
		++-friendships->fri
		-corr->in
		{
			._type_ : "NetworkToNetwork"
		}
	}
	
	++fri:Friendship {
		.enamespace := <__srcModelName>
		++-friends->fu1
		++-friends->fu2
	}

	iu1:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu2
		{
			~_tr_ : true
		}
		~_tr_ : true
	}
	
	iu2:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu1
		{
			~_tr_ : false
			~_tr_ := true
		}
		~_tr_ : true
	}
	
	in:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu1
		{
			~_tr_ : true
		}
		-users->iu2
		{
			~_tr_ : true
		}
		~_tr_ : true
	}
	
	attributeConstraints {
	}
} when AcceptFriendshipNAC

constraint AcceptFriendshipNAC = forbid AcceptFriendship_noDoubleFriendshipFacebook

	pattern AcceptFriendship_noDoubleFriendshipFacebook {
		fn : FacebookLanguage.Network {
			.enamespace : <__srcModelName>
			-friendships->other
		}
		fu1 : FacebookLanguage.User {
			.enamespace : <__srcModelName>
		}
		fu2 : FacebookLanguage.User {
			.enamespace : <__srcModelName>
		}
		other : Friendship {
			.enamespace : <__srcModelName>
			-friends->fu1
			-friends->fu2
		}
		
	}
