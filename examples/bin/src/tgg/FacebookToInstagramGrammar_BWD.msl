import "platform:/resource/FacebookToInstagram/src/Facebook.msl"
import "platform:/resource/FacebookToInstagram/src/Instagram.msl"

grammar FacebookToInstagramGrammar_BWD {
	NetworkToNetworkIslandRule
	UserToUserIslandRule
	UserNetworkBridgeRule
	RequestFriendship
	AcceptFriendship
	IgnoreInterNetworkFollowers
	ParentsIgnoreRule
	SpouseIgnoreRule
	SiblingsIgnoreRule
}
	
  rule NetworkToNetworkIslandRule {
	++fl:FacebookLanguage.Network {
		.enamespace := <__srcModelName>
		++-corr->il
		{
			._type_ := "NetworkToNetwork"
		}
		.description := il::description
	}

	il:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		~_tr_ : false
		~_tr_ := true
	}
	
	attributeConstraints {
	}
} 


  rule UserToUserIslandRule {
	++flu:FacebookLanguage.User {
		.enamespace := <__srcModelName>
		++-corr->ilu
		{
			._type_ := "FbUserToInUser"
		}
		.name := ilu::name
	}

	ilu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		~_tr_ : false
		~_tr_ := true
	}
	
	attributeConstraints {
	}
} 


  rule UserNetworkBridgeRule {
	f:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		++-users->fu
		-corr->i
		{
			._type_ : "NetworkToNetwork"
		}
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
	}

	i:InstagramLanguage.Network {
		.enamespace : <__trgModelName>
		-users->iu
		{
			~_tr_ : false
			~_tr_ := true
		}
		~_tr_ : true
	}
	
	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		~_tr_ : true
	}
	
	attributeConstraints {
	}
} when UserNetworkBridgeRuleNAC

constraint UserNetworkBridgeRuleNAC = UserNetworkBridgeRule_AlreadyInFBNetworkNAC && UserNetworkBridgeRule_AlreadyInAFBNetworkNAC

constraint UserNetworkBridgeRule_AlreadyInFBNetworkNAC = forbid UserNetworkBridgeRule_AlreadyInFBNetwork

	pattern UserNetworkBridgeRule_AlreadyInFBNetwork {
		f : FacebookLanguage.Network {
			.enamespace : <__srcModelName>
			-users->fu
		}
		fu : FacebookLanguage.User {
			.enamespace : <__srcModelName>
		}
		
	}
constraint UserNetworkBridgeRule_AlreadyInAFBNetworkNAC = forbid UserNetworkBridgeRule_AlreadyInAFBNetwork

	pattern UserNetworkBridgeRule_AlreadyInAFBNetwork {
		other : FacebookLanguage.Network {
			.enamespace : <__srcModelName>
			-users->fu
		}
		fu : FacebookLanguage.User {
			.enamespace : <__srcModelName>
		}
		
	}

  rule RequestFriendship {

	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		~_tr_ : true
	}
	
	in:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu
		{
			~_tr_ : false
			~_tr_ := true
		}
		~_tr_ : true
	}
	
	attributeConstraints {
	}
} 


  rule AcceptFriendship {
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->in
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	++fri:Friendship {
		.enamespace := <__srcModelName>
		++-friends->fn
		++-friends->fu
	}
	
	n:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		++-friendships->fri
		-users->fn
		-users->fu
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
	}

	in:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu
		{
			~_tr_ : false
			~_tr_ := true
		}
		~_tr_ : true
	}
	
	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->in
		{
			~_tr_ : true
		}
		~_tr_ : true
	}
	
	attributeConstraints {
	}
} when AcceptFriendshipNAC

constraint AcceptFriendshipNAC = forbid AcceptFriendship_NoDoubleFriendshipFacebook

	pattern AcceptFriendship_NoDoubleFriendshipFacebook {
		n : FacebookLanguage.Network {
			.enamespace : <__srcModelName>
			-friendships->other
		}
		fn : FacebookLanguage.User {
			.enamespace : <__srcModelName>
		}
		fu : FacebookLanguage.User {
			.enamespace : <__srcModelName>
		}
		other : Friendship {
			.enamespace : <__srcModelName>
			-friends->fn
			-friends->fu
		}
		
	}

  rule IgnoreInterNetworkFollowers {
	nu:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fu
	}
	
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->in
		{
			._type_ : "FbUserToInUser"
		}
	}
	
	n:FacebookLanguage.Network {
		.enamespace : <__srcModelName>
		-users->fn
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		-corr->iu
		{
			._type_ : "FbUserToInUser"
		}
	}

	in:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->iu
		{
			~_tr_ : false
			~_tr_ := true
		}
		~_tr_ : true
	}
	
	iu:InstagramLanguage.User {
		.enamespace : <__trgModelName>
		-follows->in
		{
			~_tr_ : true
		}
		~_tr_ : true
	}
	
	attributeConstraints {
	}
} 


  rule ParentsIgnoreRule {
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		++-parents->fn
	}

	
	attributeConstraints {
	}
} when ParentsIgnoreRuleNAC

constraint ParentsIgnoreRuleNAC = ParentsIgnoreRule_NoDoubleParentNAC && ParentsIgnoreRule_NoCyclicParenthoodNAC

constraint ParentsIgnoreRule_NoDoubleParentNAC = forbid ParentsIgnoreRule_NoDoubleParent

	pattern ParentsIgnoreRule_NoDoubleParent {
		fn : FacebookLanguage.User {
			.enamespace : <__srcModelName>
		}
		fu : FacebookLanguage.User {
			.enamespace : <__srcModelName>
			-parents->fn
		}
		
	}
constraint ParentsIgnoreRule_NoCyclicParenthoodNAC = forbid ParentsIgnoreRule_NoCyclicParenthood

	pattern ParentsIgnoreRule_NoCyclicParenthood {
		fn : FacebookLanguage.User {
			.enamespace : <__srcModelName>
			-parents->fu
		}
		fu : FacebookLanguage.User {
			.enamespace : <__srcModelName>
		}
		
	}

  rule SpouseIgnoreRule {
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		++-spouse->fn
	}
	
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		++-spouse->fu
	}

	
	attributeConstraints {
	}
} when SpouseIgnoreRuleNAC

constraint SpouseIgnoreRuleNAC = forbid SpouseIgnoreRule_NoDoubleSpouse

	pattern SpouseIgnoreRule_NoDoubleSpouse {
		fn : FacebookLanguage.User {
			.enamespace : <__srcModelName>
			-spouse->fu
		}
		fu : FacebookLanguage.User {
			.enamespace : <__srcModelName>
			-spouse->fn
		}
		
	}

  rule SiblingsIgnoreRule {
	fn:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		++-siblings->fu
	}
	
	fu:FacebookLanguage.User {
		.enamespace : <__srcModelName>
		++-siblings->fn
	}

	
	attributeConstraints {
	}
} when SiblingsIgnoreRuleNAC

constraint SiblingsIgnoreRuleNAC = forbid SiblingsIgnoreRule_NoDoubleSibling

	pattern SiblingsIgnoreRule_NoDoubleSibling {
		fn : FacebookLanguage.User {
			.enamespace : <__srcModelName>
			-siblings->fu
		}
		fu : FacebookLanguage.User {
			.enamespace : <__srcModelName>
			-siblings->fn
		}
		
	}
