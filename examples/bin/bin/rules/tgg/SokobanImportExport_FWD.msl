import "platform:/resource/SokobanLanguage/src/metamodels/SokobanLanguage.msl"

grammar SokobanImportExport_FWD {
	BoardEndEntryRule
	BoardNormalEntryRule
	FirstColAllRowsEnd
	FirstColAllRowsNormal
	FirstRowAllColsEnd
	FirstRowAllColsNormal
	AllOtherFieldsEnd
	AllOtherFieldsNormal
}
	
  rule BoardEndEntryRule {
	sokBoard:sokobanExchangeFormat.Board {
		.enamespace : <__srcModelName>
		-firstRow->row
		{
			~_tr_ : false
			~_tr_ := true
		}
		++-corr->board
		{
			._type_ := "BoardToBoard"
		}
		~_tr_ : false
		~_tr_ := true
	}
	
	ne:End {
		.enamespace : <__srcModelName>
		++-corr->nf
		{
			._type_ := "EntryToField"
		}
		~_tr_ : false
		~_tr_ := true
	}
	
	row:Row {
		.enamespace : <__srcModelName>
		-firstEntry->ne
		{
			~_tr_ : false
			~_tr_ := true
		}
		~_tr_ : false
		~_tr_ := true
	}

	++nf:Field {
		.enamespace := <__trgModelName>
		.endPos := true
	}
	
	++board:SokobanLanguage.Board {
		.enamespace := <__trgModelName>
		++-fields->nf
		{
			.row := 0
			.col := 0
		}
	}
	
	attributeConstraints {
	}
} 


  rule BoardNormalEntryRule {
	sokBoard:sokobanExchangeFormat.Board {
		.enamespace : <__srcModelName>
		-firstRow->row
		{
			~_tr_ : false
			~_tr_ := true
		}
		++-corr->board
		{
			._type_ := "BoardToBoard"
		}
		~_tr_ : false
		~_tr_ := true
	}
	
	ne:Normal {
		.enamespace : <__srcModelName>
		++-corr->nf
		{
			._type_ := "EntryToField"
		}
		~_tr_ : false
		~_tr_ := true
	}
	
	row:Row {
		.enamespace : <__srcModelName>
		-firstEntry->ne
		{
			~_tr_ : false
			~_tr_ := true
		}
		~_tr_ : false
		~_tr_ := true
	}

	++nf:Field {
		.enamespace := <__trgModelName>
		.endPos := false
	}
	
	++board:SokobanLanguage.Board {
		.enamespace := <__trgModelName>
		++-fields->nf
		{
			.col := 0
			.row := 0
		}
	}
	
	attributeConstraints {
	}
} 


  rule FirstColAllRowsEnd {
	r:Row {
		.enamespace : <__srcModelName>
		-next->nr
		{
			~_tr_ : false
			~_tr_ := true
		}
		-firstEntry->e
		{
			~_tr_ : true
		}
		~_tr_ : true
	}
	
	nr:Row {
		.enamespace : <__srcModelName>
		-firstEntry->ne
		{
			~_tr_ : false
			~_tr_ := true
		}
		~_tr_ : false
		~_tr_ := true
	}
	
	e:Entry {
		.enamespace : <__srcModelName>
		-corr->f
		{
			._type_ : "EntryToField"
		}
		~_tr_ : true
	}
	
	ne:End {
		.enamespace : <__srcModelName>
		++-corr->nf
		{
			._type_ := "EntryToField"
		}
		~_tr_ : false
		~_tr_ := true
	}

	b:SokobanLanguage.Board {
		.enamespace : <__trgModelName>
		-fields->f
		{
			.col : 0
		}
		++-fields->nf
		{
			.col := 0
			.row := b::-fields->f::row+1
		}
	}
	
	f:Field {
		.enamespace : <__trgModelName>
		++-bottom->nf
	}
	
	++nf:Field {
		.enamespace := <__trgModelName>
		.endPos := true
	}
	
	attributeConstraints {
	}
} when FirstColAllRowsEndNAC

constraint FirstColAllRowsEndNAC = forbid FirstColAllRowsEnd_NoDoubleBottom

	pattern FirstColAllRowsEnd_NoDoubleBottom {
		f : Field {
			.enamespace : <__trgModelName>
			-bottom->other
		}
		other : Field {
			.enamespace : <__trgModelName>
		}
		
	}

  rule FirstColAllRowsNormal {
	r:Row {
		.enamespace : <__srcModelName>
		-next->nr
		{
			~_tr_ : false
			~_tr_ := true
		}
		-firstEntry->e
		{
			~_tr_ : true
		}
		~_tr_ : true
	}
	
	nr:Row {
		.enamespace : <__srcModelName>
		-firstEntry->ne
		{
			~_tr_ : false
			~_tr_ := true
		}
		~_tr_ : false
		~_tr_ := true
	}
	
	e:Entry {
		.enamespace : <__srcModelName>
		-corr->f
		{
			._type_ : "EntryToField"
		}
		~_tr_ : true
	}
	
	ne:Normal {
		.enamespace : <__srcModelName>
		++-corr->nf
		{
			._type_ := "EntryToField"
		}
		~_tr_ : false
		~_tr_ := true
	}

	b:SokobanLanguage.Board {
		.enamespace : <__trgModelName>
		-fields->f
		{
			.col : 0
		}
		++-fields->nf
		{
			.col := 0
			.row := b::-fields->f::row+1
		}
	}
	
	f:Field {
		.enamespace : <__trgModelName>
		++-bottom->nf
	}
	
	++nf:Field {
		.enamespace := <__trgModelName>
		.endPos := false
	}
	
	attributeConstraints {
	}
} when FirstColAllRowsNormalNAC

constraint FirstColAllRowsNormalNAC = forbid FirstColAllRowsNormal_NoDoubleBottom

	pattern FirstColAllRowsNormal_NoDoubleBottom {
		f : Field {
			.enamespace : <__trgModelName>
			-bottom->other
		}
		other : Field {
			.enamespace : <__trgModelName>
		}
		
	}

  rule FirstRowAllColsEnd {
	e:Entry {
		.enamespace : <__srcModelName>
		-next->ne
		{
			~_tr_ : false
			~_tr_ := true
		}
		-corr->f
		{
			._type_ : "EntryToField"
		}
		~_tr_ : true
	}
	
	ne:End {
		.enamespace : <__srcModelName>
		++-corr->nf
		{
			._type_ := "EntryToField"
		}
		~_tr_ : false
		~_tr_ := true
	}

	b:SokobanLanguage.Board {
		.enamespace : <__trgModelName>
		-fields->f
		{
			.row : 0
		}
		++-fields->nf
		{
			.row := 0
			.col := b::-fields->f::col+1
		}
	}
	
	f:Field {
		.enamespace : <__trgModelName>
		++-right->nf
	}
	
	++nf:Field {
		.enamespace := <__trgModelName>
		.endPos := true
	}
	
	attributeConstraints {
	}
} when FirstRowAllColsEndNAC

constraint FirstRowAllColsEndNAC = forbid FirstRowAllColsEnd_NoDoubleRight

	pattern FirstRowAllColsEnd_NoDoubleRight {
		f : Field {
			.enamespace : <__trgModelName>
			-right->other
		}
		other : Field {
			.enamespace : <__trgModelName>
		}
		
	}

  rule FirstRowAllColsNormal {
	e:Entry {
		.enamespace : <__srcModelName>
		-next->ne
		{
			~_tr_ : false
			~_tr_ := true
		}
		-corr->f
		{
			._type_ : "EntryToField"
		}
		~_tr_ : true
	}
	
	ne:Normal {
		.enamespace : <__srcModelName>
		++-corr->nf
		{
			._type_ := "EntryToField"
		}
		~_tr_ : false
		~_tr_ := true
	}

	b:SokobanLanguage.Board {
		.enamespace : <__trgModelName>
		-fields->f
		{
			.row : 0
		}
		++-fields->nf
		{
			.col := b::-fields->f::col+1
			.row := 0
		}
	}
	
	f:Field {
		.enamespace : <__trgModelName>
		++-right->nf
	}
	
	++nf:Field {
		.enamespace := <__trgModelName>
		.endPos := false
	}
	
	attributeConstraints {
	}
} when FirstRowAllColsNormalNAC

constraint FirstRowAllColsNormalNAC = forbid FirstRowAllColsNormal_NoDoubleRight

	pattern FirstRowAllColsNormal_NoDoubleRight {
		f : Field {
			.enamespace : <__trgModelName>
			-right->other
		}
		other : Field {
			.enamespace : <__trgModelName>
		}
		
	}

  rule AllOtherFieldsEnd {
	ne:End {
		.enamespace : <__srcModelName>
		++-corr->nf
		{
			._type_ := "EntryToField"
		}
		~_tr_ : false
		~_tr_ := true
	}
	
	ble:Entry {
		.enamespace : <__srcModelName>
		-next->ne
		{
			~_tr_ : false
			~_tr_ := true
		}
		-corr->bl
		{
			._type_ : "EntryToField"
		}
		~_tr_ : true
	}

	b:SokobanLanguage.Board {
		.enamespace : <__trgModelName>
		-fields->ul
		++-fields->nf
		{
			.row := b::-fields->bl::row
			.col := b::-fields->ur::col
		}
		-fields->bl
		-fields->ur
	}
	
	ul:Field {
		.enamespace : <__trgModelName>
		-bottom->bl
		-right->ur
	}
	
	++nf:Field {
		.enamespace := <__trgModelName>
		.endPos := true
	}
	
	bl:Field {
		.enamespace : <__trgModelName>
		++-right->nf
	}
	
	ur:Field {
		.enamespace : <__trgModelName>
		++-bottom->nf
	}
	
	attributeConstraints {
	}
} when AllOtherFieldsEndNAC

constraint AllOtherFieldsEndNAC = AllOtherFieldsEnd_NoDoubleBottomTooNAC && AllOtherFieldsEnd_NoDoubleRightTooNAC

constraint AllOtherFieldsEnd_NoDoubleBottomTooNAC = forbid AllOtherFieldsEnd_NoDoubleBottomToo

	pattern AllOtherFieldsEnd_NoDoubleBottomToo {
		other : Field {
			.enamespace : <__trgModelName>
		}
		ur : Field {
			.enamespace : <__trgModelName>
			-bottom->other
		}
		
	}
constraint AllOtherFieldsEnd_NoDoubleRightTooNAC = forbid AllOtherFieldsEnd_NoDoubleRightToo

	pattern AllOtherFieldsEnd_NoDoubleRightToo {
		other : Field {
			.enamespace : <__trgModelName>
		}
		bl : Field {
			.enamespace : <__trgModelName>
			-right->other
		}
		
	}

  rule AllOtherFieldsNormal {
	ne:Normal {
		.enamespace : <__srcModelName>
		++-corr->nf
		{
			._type_ := "EntryToField"
		}
		~_tr_ : false
		~_tr_ := true
	}
	
	ble:Entry {
		.enamespace : <__srcModelName>
		-next->ne
		{
			~_tr_ : false
			~_tr_ := true
		}
		-corr->bl
		{
			._type_ : "EntryToField"
		}
		~_tr_ : true
	}

	b:SokobanLanguage.Board {
		.enamespace : <__trgModelName>
		-fields->ul
		++-fields->nf
		{
			.row := b::-fields->bl::row
			.col := b::-fields->ur::col
		}
		-fields->bl
		-fields->ur
	}
	
	ul:Field {
		.enamespace : <__trgModelName>
		-bottom->bl
		-right->ur
	}
	
	++nf:Field {
		.enamespace := <__trgModelName>
		.endPos := false
	}
	
	bl:Field {
		.enamespace : <__trgModelName>
		++-right->nf
	}
	
	ur:Field {
		.enamespace : <__trgModelName>
		++-bottom->nf
	}
	
	attributeConstraints {
	}
} when AllOtherFieldsNormalNAC

constraint AllOtherFieldsNormalNAC = AllOtherFieldsNormal_NoDoubleBottomTooNAC && AllOtherFieldsNormal_NoDoubleRightTooNAC

constraint AllOtherFieldsNormal_NoDoubleBottomTooNAC = forbid AllOtherFieldsNormal_NoDoubleBottomToo

	pattern AllOtherFieldsNormal_NoDoubleBottomToo {
		other : Field {
			.enamespace : <__trgModelName>
		}
		ur : Field {
			.enamespace : <__trgModelName>
			-bottom->other
		}
		
	}
constraint AllOtherFieldsNormal_NoDoubleRightTooNAC = forbid AllOtherFieldsNormal_NoDoubleRightToo

	pattern AllOtherFieldsNormal_NoDoubleRightToo {
		other : Field {
			.enamespace : <__trgModelName>
		}
		bl : Field {
			.enamespace : <__trgModelName>
			-right->other
		}
		
	}
