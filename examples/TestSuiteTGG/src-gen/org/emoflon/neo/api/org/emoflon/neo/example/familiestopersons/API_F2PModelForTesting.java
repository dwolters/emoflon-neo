/** 
 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
 */
package org.emoflon.neo.api.org.emoflon.neo.example.familiestopersons;

import org.emoflon.neo.cypher.common.*;
import org.emoflon.neo.cypher.constraints.*;
import org.emoflon.neo.cypher.factories.*;
import org.emoflon.neo.cypher.models.*;
import org.emoflon.neo.cypher.patterns.*;
import org.emoflon.neo.cypher.rules.*;
import org.emoflon.neo.engine.api.patterns.*;
import org.emoflon.neo.engine.api.constraints.*;
import org.emoflon.neo.engine.api.rules.*;
import org.emoflon.neo.emsl.eMSL.*;
import org.emoflon.neo.emsl.util.*;
import org.neo4j.driver.v1.Value;
import org.neo4j.driver.v1.Record;
import org.eclipse.emf.common.util.URI;
import org.emoflon.neo.api.API_Common;
import java.util.Collection;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;
import java.util.Optional;
import java.time.LocalDate;

@SuppressWarnings("unused")
public class API_F2PModelForTesting {
	private EMSL_Spec spec;
	private NeoCoreBuilder builder;

	/** Use this constructor for default values */
	public API_F2PModelForTesting(NeoCoreBuilder builder) {
		this(builder, API_Common.PLATFORM_RESOURCE_URI, API_Common.PLATFORM_PLUGIN_URI, API_Common.NEOCORE_URI_INSTALLED);
	}

	/** Use this constructor to configure values for loading EMSL files */
	public API_F2PModelForTesting(NeoCoreBuilder builder, String platformResourceURIRoot, String platformPluginURIRoot, String neocoreURI){
		spec = (EMSL_Spec) EMSLUtil.loadSpecification("platform:/resource/TestSuiteTGG/src/org/emoflon/neo/example/familiestopersons/F2PModelForTesting.msl", platformResourceURIRoot, platformPluginURIRoot, neocoreURI);
		this.builder = builder;
	}

	//:~> platform:/resource/TestSuiteTGG/src/org/emoflon/neo/example/familiestopersons/F2PModelForTesting.msl#//@entities.0
	public Model getModel_ConsistentSource1(){
		return (Model) spec.getEntities().get(0);
	}
	
	//:~> platform:/resource/TestSuiteTGG/src/org/emoflon/neo/example/familiestopersons/F2PModelForTesting.msl#//@entities.1
	public Model getModel_ConsistentTarget1(){
		return (Model) spec.getEntities().get(1);
	}
	
	//:~> platform:/resource/TestSuiteTGG/src/org/emoflon/neo/example/familiestopersons/F2PModelForTesting.msl#//@entities.2
	public ConsistentTriple1Access getRule_ConsistentTriple1() {
		return new ConsistentTriple1Access();
	}
	
	public class ConsistentTriple1Access extends NeoRuleCoAccess<ConsistentTriple1Data, ConsistentTriple1CoData, ConsistentTriple1Mask> {
		public final String _p1 = "p1";
		public final String _pr = "pr";
		public final String _p2 = "p2";
		public final String _fm2 = "fm2";
		public final String _fm1 = "fm1";
		public final String _fr = "fr";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(2);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<ConsistentTriple1Data> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new ConsistentTriple1Data(d));
		}
			
		@Override
		public Stream<ConsistentTriple1CoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new ConsistentTriple1CoData(d));
		}
		
		@Override
		public ConsistentTriple1Mask mask() {
			return new ConsistentTriple1Mask();
		}
	}
	
	public class ConsistentTriple1Data extends NeoData {
		public final P1Node _p1;
		public final PrNode _pr;
		public final P2Node _p2;
		public final Fm2Node _fm2;
		public final Fm1Node _fm1;
		public final FrNode _fr;
		
		public ConsistentTriple1Data(Record data) {
			var _p1 = data.get("p1");
			this._p1 = new P1Node(_p1);
			var _pr = data.get("pr");
			this._pr = new PrNode(_pr);
			var _p2 = data.get("p2");
			this._p2 = new P2Node(_p2);
			var _fm2 = data.get("fm2");
			this._fm2 = new Fm2Node(_fm2);
			var _fm1 = data.get("fm1");
			this._fm1 = new Fm1Node(_fm1);
			var _fr = data.get("fr");
			this._fr = new FrNode(_fr);
		}
		
		
		public class P1Node {
			public String _name;
			public LocalDate _birthday;
			
			public P1Node(Value _p1) {
				if(!_p1.get("name").isNull())
					this._name = _p1.get("name").asString();
				if(!_p1.get("birthday").isNull())
					this._birthday = _p1.get("birthday").asLocalDate();
			}
		}
		
		public class PrNode {
			
			public PrNode(Value _pr) {
			}
		}
		
		public class P2Node {
			public String _name;
			public LocalDate _birthday;
			
			public P2Node(Value _p2) {
				if(!_p2.get("name").isNull())
					this._name = _p2.get("name").asString();
				if(!_p2.get("birthday").isNull())
					this._birthday = _p2.get("birthday").asLocalDate();
			}
		}
		
		public class Fm2Node {
			public String _name;
			
			public Fm2Node(Value _fm2) {
				if(!_fm2.get("name").isNull())
					this._name = _fm2.get("name").asString();
			}
		}
		
		public class Fm1Node {
			public String _name;
			
			public Fm1Node(Value _fm1) {
				if(!_fm1.get("name").isNull())
					this._name = _fm1.get("name").asString();
			}
		}
		
		public class FrNode {
			
			public FrNode(Value _fr) {
			}
		}
		
	}
	
	public class ConsistentTriple1CoData extends NeoData {
		public final P1Node _p1;
		public final PrNode _pr;
		public final Pr_corr_0_frRel _pr_corr_0_fr;
		public final P2Node _p2;
		public final Fm2Node _fm2;
		public final Fm2_corr_0_p2Rel _fm2_corr_0_p2;
		public final Fm1Node _fm1;
		public final Fm1_corr_0_p1Rel _fm1_corr_0_p1;
		public final FrNode _fr;
	
		public ConsistentTriple1CoData(Record data) {
			var _p1 = data.get("p1");
			this._p1 = new P1Node(_p1);
			var _pr = data.get("pr");
			this._pr = new PrNode(_pr);
			var _pr_corr_0_fr = data.get("pr_corr_0_fr");
			this._pr_corr_0_fr = new Pr_corr_0_frRel(_pr_corr_0_fr);
			var _p2 = data.get("p2");
			this._p2 = new P2Node(_p2);
			var _fm2 = data.get("fm2");
			this._fm2 = new Fm2Node(_fm2);
			var _fm2_corr_0_p2 = data.get("fm2_corr_0_p2");
			this._fm2_corr_0_p2 = new Fm2_corr_0_p2Rel(_fm2_corr_0_p2);
			var _fm1 = data.get("fm1");
			this._fm1 = new Fm1Node(_fm1);
			var _fm1_corr_0_p1 = data.get("fm1_corr_0_p1");
			this._fm1_corr_0_p1 = new Fm1_corr_0_p1Rel(_fm1_corr_0_p1);
			var _fr = data.get("fr");
			this._fr = new FrNode(_fr);
		}
		
	
		public class P1Node {
			public String _name;
			public LocalDate _birthday;
			
			public P1Node(Value _p1) {
				if(!_p1.get("name").isNull())
					this._name = _p1.get("name").asString();
				if(!_p1.get("birthday").isNull())
					this._birthday = _p1.get("birthday").asLocalDate();
			}
		}
		
		public class PrNode {
			
			public PrNode(Value _pr) {
			}
		}
		
		public class Pr_corr_0_frRel {
			public String __type_;
		
			public Pr_corr_0_frRel(Value _pr_corr_0_fr) {
				if(!_pr_corr_0_fr.get("_type_").isNull())
					this.__type_ = _pr_corr_0_fr.get("_type_").asString();
			}
		}
		public class P2Node {
			public String _name;
			public LocalDate _birthday;
			
			public P2Node(Value _p2) {
				if(!_p2.get("name").isNull())
					this._name = _p2.get("name").asString();
				if(!_p2.get("birthday").isNull())
					this._birthday = _p2.get("birthday").asLocalDate();
			}
		}
		
		public class Fm2Node {
			public String _name;
			
			public Fm2Node(Value _fm2) {
				if(!_fm2.get("name").isNull())
					this._name = _fm2.get("name").asString();
			}
		}
		
		public class Fm2_corr_0_p2Rel {
			public String __type_;
		
			public Fm2_corr_0_p2Rel(Value _fm2_corr_0_p2) {
				if(!_fm2_corr_0_p2.get("_type_").isNull())
					this.__type_ = _fm2_corr_0_p2.get("_type_").asString();
			}
		}
		public class Fm1Node {
			public String _name;
			
			public Fm1Node(Value _fm1) {
				if(!_fm1.get("name").isNull())
					this._name = _fm1.get("name").asString();
			}
		}
		
		public class Fm1_corr_0_p1Rel {
			public String __type_;
		
			public Fm1_corr_0_p1Rel(Value _fm1_corr_0_p1) {
				if(!_fm1_corr_0_p1.get("_type_").isNull())
					this.__type_ = _fm1_corr_0_p1.get("_type_").asString();
			}
		}
		public class FrNode {
			
			public FrNode(Value _fr) {
			}
		}
		
	}
	
	public class ConsistentTriple1Mask extends NeoMask {
		public ConsistentTriple1Mask setP1(Long value) {
			nodeMask.put("p1", value);
			return this;
		}
		public ConsistentTriple1Mask setP1Name(String value) {
			attributeMask.put("p1.name", value);
			return this;
		}
		public ConsistentTriple1Mask setP1Birthday(LocalDate value) {
			attributeMask.put("p1.birthday", value);
			return this;
		}
		public ConsistentTriple1Mask setPr(Long value) {
			nodeMask.put("pr", value);
			return this;
		}
		public ConsistentTriple1Mask setPr_corr_0_fr_type_(String value) {
			attributeMask.put("pr_corr_0_fr._type_", value);
			return this;
		}
		public ConsistentTriple1Mask setP2(Long value) {
			nodeMask.put("p2", value);
			return this;
		}
		public ConsistentTriple1Mask setP2Name(String value) {
			attributeMask.put("p2.name", value);
			return this;
		}
		public ConsistentTriple1Mask setP2Birthday(LocalDate value) {
			attributeMask.put("p2.birthday", value);
			return this;
		}
		public ConsistentTriple1Mask setFm2(Long value) {
			nodeMask.put("fm2", value);
			return this;
		}
		public ConsistentTriple1Mask setFm2Name(String value) {
			attributeMask.put("fm2.name", value);
			return this;
		}
		public ConsistentTriple1Mask setFm2_corr_0_p2_type_(String value) {
			attributeMask.put("fm2_corr_0_p2._type_", value);
			return this;
		}
		public ConsistentTriple1Mask setFm1(Long value) {
			nodeMask.put("fm1", value);
			return this;
		}
		public ConsistentTriple1Mask setFm1Name(String value) {
			attributeMask.put("fm1.name", value);
			return this;
		}
		public ConsistentTriple1Mask setFm1_corr_0_p1_type_(String value) {
			attributeMask.put("fm1_corr_0_p1._type_", value);
			return this;
		}
		public ConsistentTriple1Mask setFr(Long value) {
			nodeMask.put("fr", value);
			return this;
		}
	}
	
	//:~> platform:/resource/TestSuiteTGG/src/org/emoflon/neo/example/familiestopersons/F2PModelForTesting.msl#//@entities.3
	public Model getModel_InConsistentSource1(){
		return (Model) spec.getEntities().get(3);
	}
	
	//:~> platform:/resource/TestSuiteTGG/src/org/emoflon/neo/example/familiestopersons/F2PModelForTesting.msl#//@entities.4
	public Model getModel_InConsistentTarget1(){
		return (Model) spec.getEntities().get(4);
	}
	
	//:~> platform:/resource/TestSuiteTGG/src/org/emoflon/neo/example/familiestopersons/F2PModelForTesting.msl#//@entities.5
	public InConsistentTriple1Access getRule_InConsistentTriple1() {
		return new InConsistentTriple1Access();
	}
	
	public class InConsistentTriple1Access extends NeoRuleCoAccess<InConsistentTriple1Data, InConsistentTriple1CoData, InConsistentTriple1Mask> {
		public final String _pr = "pr";
		public final String _p1 = "p1";
		public final String _fr = "fr";
		public final String _fm1 = "fm1";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(5);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<InConsistentTriple1Data> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new InConsistentTriple1Data(d));
		}
			
		@Override
		public Stream<InConsistentTriple1CoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new InConsistentTriple1CoData(d));
		}
		
		@Override
		public InConsistentTriple1Mask mask() {
			return new InConsistentTriple1Mask();
		}
	}
	
	public class InConsistentTriple1Data extends NeoData {
		public final PrNode _pr;
		public final P1Node _p1;
		public final FrNode _fr;
		public final Fm1Node _fm1;
		
		public InConsistentTriple1Data(Record data) {
			var _pr = data.get("pr");
			this._pr = new PrNode(_pr);
			var _p1 = data.get("p1");
			this._p1 = new P1Node(_p1);
			var _fr = data.get("fr");
			this._fr = new FrNode(_fr);
			var _fm1 = data.get("fm1");
			this._fm1 = new Fm1Node(_fm1);
		}
		
		
		public class PrNode {
			
			public PrNode(Value _pr) {
			}
		}
		
		public class P1Node {
			public String _name;
			public LocalDate _birthday;
			
			public P1Node(Value _p1) {
				if(!_p1.get("name").isNull())
					this._name = _p1.get("name").asString();
				if(!_p1.get("birthday").isNull())
					this._birthday = _p1.get("birthday").asLocalDate();
			}
		}
		
		public class FrNode {
			
			public FrNode(Value _fr) {
			}
		}
		
		public class Fm1Node {
			public String _name;
			
			public Fm1Node(Value _fm1) {
				if(!_fm1.get("name").isNull())
					this._name = _fm1.get("name").asString();
			}
		}
		
	}
	
	public class InConsistentTriple1CoData extends NeoData {
		public final PrNode _pr;
		public final Pr_corr_0_frRel _pr_corr_0_fr;
		public final P1Node _p1;
		public final FrNode _fr;
		public final Fm1Node _fm1;
		public final Fm1_corr_0_p1Rel _fm1_corr_0_p1;
	
		public InConsistentTriple1CoData(Record data) {
			var _pr = data.get("pr");
			this._pr = new PrNode(_pr);
			var _pr_corr_0_fr = data.get("pr_corr_0_fr");
			this._pr_corr_0_fr = new Pr_corr_0_frRel(_pr_corr_0_fr);
			var _p1 = data.get("p1");
			this._p1 = new P1Node(_p1);
			var _fr = data.get("fr");
			this._fr = new FrNode(_fr);
			var _fm1 = data.get("fm1");
			this._fm1 = new Fm1Node(_fm1);
			var _fm1_corr_0_p1 = data.get("fm1_corr_0_p1");
			this._fm1_corr_0_p1 = new Fm1_corr_0_p1Rel(_fm1_corr_0_p1);
		}
		
	
		public class PrNode {
			
			public PrNode(Value _pr) {
			}
		}
		
		public class Pr_corr_0_frRel {
			public String __type_;
		
			public Pr_corr_0_frRel(Value _pr_corr_0_fr) {
				if(!_pr_corr_0_fr.get("_type_").isNull())
					this.__type_ = _pr_corr_0_fr.get("_type_").asString();
			}
		}
		public class P1Node {
			public String _name;
			public LocalDate _birthday;
			
			public P1Node(Value _p1) {
				if(!_p1.get("name").isNull())
					this._name = _p1.get("name").asString();
				if(!_p1.get("birthday").isNull())
					this._birthday = _p1.get("birthday").asLocalDate();
			}
		}
		
		public class FrNode {
			
			public FrNode(Value _fr) {
			}
		}
		
		public class Fm1Node {
			public String _name;
			
			public Fm1Node(Value _fm1) {
				if(!_fm1.get("name").isNull())
					this._name = _fm1.get("name").asString();
			}
		}
		
		public class Fm1_corr_0_p1Rel {
			public String __type_;
		
			public Fm1_corr_0_p1Rel(Value _fm1_corr_0_p1) {
				if(!_fm1_corr_0_p1.get("_type_").isNull())
					this.__type_ = _fm1_corr_0_p1.get("_type_").asString();
			}
		}
	}
	
	public class InConsistentTriple1Mask extends NeoMask {
		public InConsistentTriple1Mask setPr(Long value) {
			nodeMask.put("pr", value);
			return this;
		}
		public InConsistentTriple1Mask setPr_corr_0_fr_type_(String value) {
			attributeMask.put("pr_corr_0_fr._type_", value);
			return this;
		}
		public InConsistentTriple1Mask setP1(Long value) {
			nodeMask.put("p1", value);
			return this;
		}
		public InConsistentTriple1Mask setP1Name(String value) {
			attributeMask.put("p1.name", value);
			return this;
		}
		public InConsistentTriple1Mask setP1Birthday(LocalDate value) {
			attributeMask.put("p1.birthday", value);
			return this;
		}
		public InConsistentTriple1Mask setFr(Long value) {
			nodeMask.put("fr", value);
			return this;
		}
		public InConsistentTriple1Mask setFm1(Long value) {
			nodeMask.put("fm1", value);
			return this;
		}
		public InConsistentTriple1Mask setFm1Name(String value) {
			attributeMask.put("fm1.name", value);
			return this;
		}
		public InConsistentTriple1Mask setFm1_corr_0_p1_type_(String value) {
			attributeMask.put("fm1_corr_0_p1._type_", value);
			return this;
		}
	}
	
	//:~> platform:/resource/TestSuiteTGG/src/org/emoflon/neo/example/familiestopersons/F2PModelForTesting.msl#//@entities.6
	public Model getModel_ConsistentSource2(){
		return (Model) spec.getEntities().get(6);
	}
	
	//:~> platform:/resource/TestSuiteTGG/src/org/emoflon/neo/example/familiestopersons/F2PModelForTesting.msl#//@entities.7
	public Model getModel_ConsistentTarget2(){
		return (Model) spec.getEntities().get(7);
	}
	
	//:~> platform:/resource/TestSuiteTGG/src/org/emoflon/neo/example/familiestopersons/F2PModelForTesting.msl#//@entities.8
	public ConsistentTriple2Access getRule_ConsistentTriple2() {
		return new ConsistentTriple2Access();
	}
	
	public class ConsistentTriple2Access extends NeoRuleCoAccess<ConsistentTriple2Data, ConsistentTriple2CoData, ConsistentTriple2Mask> {
		public final String _p1 = "p1";
		public final String _pr = "pr";
		public final String _p2 = "p2";
		public final String _fm2 = "fm2";
		public final String _fm1 = "fm1";
		public final String _fr = "fr";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(8);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<ConsistentTriple2Data> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new ConsistentTriple2Data(d));
		}
			
		@Override
		public Stream<ConsistentTriple2CoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new ConsistentTriple2CoData(d));
		}
		
		@Override
		public ConsistentTriple2Mask mask() {
			return new ConsistentTriple2Mask();
		}
	}
	
	public class ConsistentTriple2Data extends NeoData {
		public final P1Node _p1;
		public final PrNode _pr;
		public final P2Node _p2;
		public final Fm2Node _fm2;
		public final Fm1Node _fm1;
		public final FrNode _fr;
		
		public ConsistentTriple2Data(Record data) {
			var _p1 = data.get("p1");
			this._p1 = new P1Node(_p1);
			var _pr = data.get("pr");
			this._pr = new PrNode(_pr);
			var _p2 = data.get("p2");
			this._p2 = new P2Node(_p2);
			var _fm2 = data.get("fm2");
			this._fm2 = new Fm2Node(_fm2);
			var _fm1 = data.get("fm1");
			this._fm1 = new Fm1Node(_fm1);
			var _fr = data.get("fr");
			this._fr = new FrNode(_fr);
		}
		
		
		public class P1Node {
			public String _name;
			public LocalDate _birthday;
			
			public P1Node(Value _p1) {
				if(!_p1.get("name").isNull())
					this._name = _p1.get("name").asString();
				if(!_p1.get("birthday").isNull())
					this._birthday = _p1.get("birthday").asLocalDate();
			}
		}
		
		public class PrNode {
			
			public PrNode(Value _pr) {
			}
		}
		
		public class P2Node {
			public String _name;
			public LocalDate _birthday;
			
			public P2Node(Value _p2) {
				if(!_p2.get("name").isNull())
					this._name = _p2.get("name").asString();
				if(!_p2.get("birthday").isNull())
					this._birthday = _p2.get("birthday").asLocalDate();
			}
		}
		
		public class Fm2Node {
			public String _name;
			
			public Fm2Node(Value _fm2) {
				if(!_fm2.get("name").isNull())
					this._name = _fm2.get("name").asString();
			}
		}
		
		public class Fm1Node {
			public String _name;
			
			public Fm1Node(Value _fm1) {
				if(!_fm1.get("name").isNull())
					this._name = _fm1.get("name").asString();
			}
		}
		
		public class FrNode {
			
			public FrNode(Value _fr) {
			}
		}
		
	}
	
	public class ConsistentTriple2CoData extends NeoData {
		public final P1Node _p1;
		public final PrNode _pr;
		public final Pr_corr_0_frRel _pr_corr_0_fr;
		public final P2Node _p2;
		public final Fm2Node _fm2;
		public final Fm2_corr_0_p2Rel _fm2_corr_0_p2;
		public final Fm1Node _fm1;
		public final Fm1_corr_0_p1Rel _fm1_corr_0_p1;
		public final FrNode _fr;
	
		public ConsistentTriple2CoData(Record data) {
			var _p1 = data.get("p1");
			this._p1 = new P1Node(_p1);
			var _pr = data.get("pr");
			this._pr = new PrNode(_pr);
			var _pr_corr_0_fr = data.get("pr_corr_0_fr");
			this._pr_corr_0_fr = new Pr_corr_0_frRel(_pr_corr_0_fr);
			var _p2 = data.get("p2");
			this._p2 = new P2Node(_p2);
			var _fm2 = data.get("fm2");
			this._fm2 = new Fm2Node(_fm2);
			var _fm2_corr_0_p2 = data.get("fm2_corr_0_p2");
			this._fm2_corr_0_p2 = new Fm2_corr_0_p2Rel(_fm2_corr_0_p2);
			var _fm1 = data.get("fm1");
			this._fm1 = new Fm1Node(_fm1);
			var _fm1_corr_0_p1 = data.get("fm1_corr_0_p1");
			this._fm1_corr_0_p1 = new Fm1_corr_0_p1Rel(_fm1_corr_0_p1);
			var _fr = data.get("fr");
			this._fr = new FrNode(_fr);
		}
		
	
		public class P1Node {
			public String _name;
			public LocalDate _birthday;
			
			public P1Node(Value _p1) {
				if(!_p1.get("name").isNull())
					this._name = _p1.get("name").asString();
				if(!_p1.get("birthday").isNull())
					this._birthday = _p1.get("birthday").asLocalDate();
			}
		}
		
		public class PrNode {
			
			public PrNode(Value _pr) {
			}
		}
		
		public class Pr_corr_0_frRel {
			public String __type_;
		
			public Pr_corr_0_frRel(Value _pr_corr_0_fr) {
				if(!_pr_corr_0_fr.get("_type_").isNull())
					this.__type_ = _pr_corr_0_fr.get("_type_").asString();
			}
		}
		public class P2Node {
			public String _name;
			public LocalDate _birthday;
			
			public P2Node(Value _p2) {
				if(!_p2.get("name").isNull())
					this._name = _p2.get("name").asString();
				if(!_p2.get("birthday").isNull())
					this._birthday = _p2.get("birthday").asLocalDate();
			}
		}
		
		public class Fm2Node {
			public String _name;
			
			public Fm2Node(Value _fm2) {
				if(!_fm2.get("name").isNull())
					this._name = _fm2.get("name").asString();
			}
		}
		
		public class Fm2_corr_0_p2Rel {
			public String __type_;
		
			public Fm2_corr_0_p2Rel(Value _fm2_corr_0_p2) {
				if(!_fm2_corr_0_p2.get("_type_").isNull())
					this.__type_ = _fm2_corr_0_p2.get("_type_").asString();
			}
		}
		public class Fm1Node {
			public String _name;
			
			public Fm1Node(Value _fm1) {
				if(!_fm1.get("name").isNull())
					this._name = _fm1.get("name").asString();
			}
		}
		
		public class Fm1_corr_0_p1Rel {
			public String __type_;
		
			public Fm1_corr_0_p1Rel(Value _fm1_corr_0_p1) {
				if(!_fm1_corr_0_p1.get("_type_").isNull())
					this.__type_ = _fm1_corr_0_p1.get("_type_").asString();
			}
		}
		public class FrNode {
			
			public FrNode(Value _fr) {
			}
		}
		
	}
	
	public class ConsistentTriple2Mask extends NeoMask {
		public ConsistentTriple2Mask setP1(Long value) {
			nodeMask.put("p1", value);
			return this;
		}
		public ConsistentTriple2Mask setP1Name(String value) {
			attributeMask.put("p1.name", value);
			return this;
		}
		public ConsistentTriple2Mask setP1Birthday(LocalDate value) {
			attributeMask.put("p1.birthday", value);
			return this;
		}
		public ConsistentTriple2Mask setPr(Long value) {
			nodeMask.put("pr", value);
			return this;
		}
		public ConsistentTriple2Mask setPr_corr_0_fr_type_(String value) {
			attributeMask.put("pr_corr_0_fr._type_", value);
			return this;
		}
		public ConsistentTriple2Mask setP2(Long value) {
			nodeMask.put("p2", value);
			return this;
		}
		public ConsistentTriple2Mask setP2Name(String value) {
			attributeMask.put("p2.name", value);
			return this;
		}
		public ConsistentTriple2Mask setP2Birthday(LocalDate value) {
			attributeMask.put("p2.birthday", value);
			return this;
		}
		public ConsistentTriple2Mask setFm2(Long value) {
			nodeMask.put("fm2", value);
			return this;
		}
		public ConsistentTriple2Mask setFm2Name(String value) {
			attributeMask.put("fm2.name", value);
			return this;
		}
		public ConsistentTriple2Mask setFm2_corr_0_p2_type_(String value) {
			attributeMask.put("fm2_corr_0_p2._type_", value);
			return this;
		}
		public ConsistentTriple2Mask setFm1(Long value) {
			nodeMask.put("fm1", value);
			return this;
		}
		public ConsistentTriple2Mask setFm1Name(String value) {
			attributeMask.put("fm1.name", value);
			return this;
		}
		public ConsistentTriple2Mask setFm1_corr_0_p1_type_(String value) {
			attributeMask.put("fm1_corr_0_p1._type_", value);
			return this;
		}
		public ConsistentTriple2Mask setFr(Long value) {
			nodeMask.put("fr", value);
			return this;
		}
	}
	
	//:~> platform:/resource/TestSuiteTGG/src/org/emoflon/neo/example/familiestopersons/F2PModelForTesting.msl#//@entities.9
	public Model getModel_InConsistentSource2(){
		return (Model) spec.getEntities().get(9);
	}
	
	//:~> platform:/resource/TestSuiteTGG/src/org/emoflon/neo/example/familiestopersons/F2PModelForTesting.msl#//@entities.10
	public Model getModel_InConsistentTarget2(){
		return (Model) spec.getEntities().get(10);
	}
	
	//:~> platform:/resource/TestSuiteTGG/src/org/emoflon/neo/example/familiestopersons/F2PModelForTesting.msl#//@entities.11
	public InConsistentTriple2Access getRule_InConsistentTriple2() {
		return new InConsistentTriple2Access();
	}
	
	public class InConsistentTriple2Access extends NeoRuleCoAccess<InConsistentTriple2Data, InConsistentTriple2CoData, InConsistentTriple2Mask> {
		public final String _p1 = "p1";
		public final String _pr = "pr";
		public final String _p2 = "p2";
		public final String _fm2 = "fm2";
		public final String _fm1 = "fm1";
		public final String _fr = "fr";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(11);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<InConsistentTriple2Data> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new InConsistentTriple2Data(d));
		}
			
		@Override
		public Stream<InConsistentTriple2CoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new InConsistentTriple2CoData(d));
		}
		
		@Override
		public InConsistentTriple2Mask mask() {
			return new InConsistentTriple2Mask();
		}
	}
	
	public class InConsistentTriple2Data extends NeoData {
		public final P1Node _p1;
		public final PrNode _pr;
		public final P2Node _p2;
		public final Fm2Node _fm2;
		public final Fm1Node _fm1;
		public final FrNode _fr;
		
		public InConsistentTriple2Data(Record data) {
			var _p1 = data.get("p1");
			this._p1 = new P1Node(_p1);
			var _pr = data.get("pr");
			this._pr = new PrNode(_pr);
			var _p2 = data.get("p2");
			this._p2 = new P2Node(_p2);
			var _fm2 = data.get("fm2");
			this._fm2 = new Fm2Node(_fm2);
			var _fm1 = data.get("fm1");
			this._fm1 = new Fm1Node(_fm1);
			var _fr = data.get("fr");
			this._fr = new FrNode(_fr);
		}
		
		
		public class P1Node {
			public String _name;
			public LocalDate _birthday;
			
			public P1Node(Value _p1) {
				if(!_p1.get("name").isNull())
					this._name = _p1.get("name").asString();
				if(!_p1.get("birthday").isNull())
					this._birthday = _p1.get("birthday").asLocalDate();
			}
		}
		
		public class PrNode {
			
			public PrNode(Value _pr) {
			}
		}
		
		public class P2Node {
			public String _name;
			public LocalDate _birthday;
			
			public P2Node(Value _p2) {
				if(!_p2.get("name").isNull())
					this._name = _p2.get("name").asString();
				if(!_p2.get("birthday").isNull())
					this._birthday = _p2.get("birthday").asLocalDate();
			}
		}
		
		public class Fm2Node {
			public String _name;
			
			public Fm2Node(Value _fm2) {
				if(!_fm2.get("name").isNull())
					this._name = _fm2.get("name").asString();
			}
		}
		
		public class Fm1Node {
			public String _name;
			
			public Fm1Node(Value _fm1) {
				if(!_fm1.get("name").isNull())
					this._name = _fm1.get("name").asString();
			}
		}
		
		public class FrNode {
			
			public FrNode(Value _fr) {
			}
		}
		
	}
	
	public class InConsistentTriple2CoData extends NeoData {
		public final P1Node _p1;
		public final PrNode _pr;
		public final Pr_corr_0_frRel _pr_corr_0_fr;
		public final P2Node _p2;
		public final Fm2Node _fm2;
		public final Fm2_corr_0_p2Rel _fm2_corr_0_p2;
		public final Fm1Node _fm1;
		public final Fm1_corr_0_p1Rel _fm1_corr_0_p1;
		public final FrNode _fr;
	
		public InConsistentTriple2CoData(Record data) {
			var _p1 = data.get("p1");
			this._p1 = new P1Node(_p1);
			var _pr = data.get("pr");
			this._pr = new PrNode(_pr);
			var _pr_corr_0_fr = data.get("pr_corr_0_fr");
			this._pr_corr_0_fr = new Pr_corr_0_frRel(_pr_corr_0_fr);
			var _p2 = data.get("p2");
			this._p2 = new P2Node(_p2);
			var _fm2 = data.get("fm2");
			this._fm2 = new Fm2Node(_fm2);
			var _fm2_corr_0_p2 = data.get("fm2_corr_0_p2");
			this._fm2_corr_0_p2 = new Fm2_corr_0_p2Rel(_fm2_corr_0_p2);
			var _fm1 = data.get("fm1");
			this._fm1 = new Fm1Node(_fm1);
			var _fm1_corr_0_p1 = data.get("fm1_corr_0_p1");
			this._fm1_corr_0_p1 = new Fm1_corr_0_p1Rel(_fm1_corr_0_p1);
			var _fr = data.get("fr");
			this._fr = new FrNode(_fr);
		}
		
	
		public class P1Node {
			public String _name;
			public LocalDate _birthday;
			
			public P1Node(Value _p1) {
				if(!_p1.get("name").isNull())
					this._name = _p1.get("name").asString();
				if(!_p1.get("birthday").isNull())
					this._birthday = _p1.get("birthday").asLocalDate();
			}
		}
		
		public class PrNode {
			
			public PrNode(Value _pr) {
			}
		}
		
		public class Pr_corr_0_frRel {
			public String __type_;
		
			public Pr_corr_0_frRel(Value _pr_corr_0_fr) {
				if(!_pr_corr_0_fr.get("_type_").isNull())
					this.__type_ = _pr_corr_0_fr.get("_type_").asString();
			}
		}
		public class P2Node {
			public String _name;
			public LocalDate _birthday;
			
			public P2Node(Value _p2) {
				if(!_p2.get("name").isNull())
					this._name = _p2.get("name").asString();
				if(!_p2.get("birthday").isNull())
					this._birthday = _p2.get("birthday").asLocalDate();
			}
		}
		
		public class Fm2Node {
			public String _name;
			
			public Fm2Node(Value _fm2) {
				if(!_fm2.get("name").isNull())
					this._name = _fm2.get("name").asString();
			}
		}
		
		public class Fm2_corr_0_p2Rel {
			public String __type_;
		
			public Fm2_corr_0_p2Rel(Value _fm2_corr_0_p2) {
				if(!_fm2_corr_0_p2.get("_type_").isNull())
					this.__type_ = _fm2_corr_0_p2.get("_type_").asString();
			}
		}
		public class Fm1Node {
			public String _name;
			
			public Fm1Node(Value _fm1) {
				if(!_fm1.get("name").isNull())
					this._name = _fm1.get("name").asString();
			}
		}
		
		public class Fm1_corr_0_p1Rel {
			public String __type_;
		
			public Fm1_corr_0_p1Rel(Value _fm1_corr_0_p1) {
				if(!_fm1_corr_0_p1.get("_type_").isNull())
					this.__type_ = _fm1_corr_0_p1.get("_type_").asString();
			}
		}
		public class FrNode {
			
			public FrNode(Value _fr) {
			}
		}
		
	}
	
	public class InConsistentTriple2Mask extends NeoMask {
		public InConsistentTriple2Mask setP1(Long value) {
			nodeMask.put("p1", value);
			return this;
		}
		public InConsistentTriple2Mask setP1Name(String value) {
			attributeMask.put("p1.name", value);
			return this;
		}
		public InConsistentTriple2Mask setP1Birthday(LocalDate value) {
			attributeMask.put("p1.birthday", value);
			return this;
		}
		public InConsistentTriple2Mask setPr(Long value) {
			nodeMask.put("pr", value);
			return this;
		}
		public InConsistentTriple2Mask setPr_corr_0_fr_type_(String value) {
			attributeMask.put("pr_corr_0_fr._type_", value);
			return this;
		}
		public InConsistentTriple2Mask setP2(Long value) {
			nodeMask.put("p2", value);
			return this;
		}
		public InConsistentTriple2Mask setP2Name(String value) {
			attributeMask.put("p2.name", value);
			return this;
		}
		public InConsistentTriple2Mask setP2Birthday(LocalDate value) {
			attributeMask.put("p2.birthday", value);
			return this;
		}
		public InConsistentTriple2Mask setFm2(Long value) {
			nodeMask.put("fm2", value);
			return this;
		}
		public InConsistentTriple2Mask setFm2Name(String value) {
			attributeMask.put("fm2.name", value);
			return this;
		}
		public InConsistentTriple2Mask setFm2_corr_0_p2_type_(String value) {
			attributeMask.put("fm2_corr_0_p2._type_", value);
			return this;
		}
		public InConsistentTriple2Mask setFm1(Long value) {
			nodeMask.put("fm1", value);
			return this;
		}
		public InConsistentTriple2Mask setFm1Name(String value) {
			attributeMask.put("fm1.name", value);
			return this;
		}
		public InConsistentTriple2Mask setFm1_corr_0_p1_type_(String value) {
			attributeMask.put("fm1_corr_0_p1._type_", value);
			return this;
		}
		public InConsistentTriple2Mask setFr(Long value) {
			nodeMask.put("fr", value);
			return this;
		}
	}
	
	//:~> platform:/resource/TestSuiteTGG/src/org/emoflon/neo/example/familiestopersons/F2PModelForTesting.msl#//@entities.12
	public Model getModel_InConsistentSource3(){
		return (Model) spec.getEntities().get(12);
	}
	
	//:~> platform:/resource/TestSuiteTGG/src/org/emoflon/neo/example/familiestopersons/F2PModelForTesting.msl#//@entities.13
	public Model getModel_InConsistentTarget3(){
		return (Model) spec.getEntities().get(13);
	}
	
	//:~> platform:/resource/TestSuiteTGG/src/org/emoflon/neo/example/familiestopersons/F2PModelForTesting.msl#//@entities.14
	public InConsistentTriple3Access getRule_InConsistentTriple3() {
		return new InConsistentTriple3Access();
	}
	
	public class InConsistentTriple3Access extends NeoRuleCoAccess<InConsistentTriple3Data, InConsistentTriple3CoData, InConsistentTriple3Mask> {
		public final String _fr = "fr";
		public final String _fm1 = "fm1";
		public final String _fm2 = "fm2";
		public final String _pr = "pr";
		public final String _p1 = "p1";
		public final String _p2 = "p2";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(14);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<InConsistentTriple3Data> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new InConsistentTriple3Data(d));
		}
			
		@Override
		public Stream<InConsistentTriple3CoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new InConsistentTriple3CoData(d));
		}
		
		@Override
		public InConsistentTriple3Mask mask() {
			return new InConsistentTriple3Mask();
		}
	}
	
	public class InConsistentTriple3Data extends NeoData {
		public final FrNode _fr;
		public final Fm1Node _fm1;
		public final Fm2Node _fm2;
		public final PrNode _pr;
		public final P1Node _p1;
		public final P2Node _p2;
		
		public InConsistentTriple3Data(Record data) {
			var _fr = data.get("fr");
			this._fr = new FrNode(_fr);
			var _fm1 = data.get("fm1");
			this._fm1 = new Fm1Node(_fm1);
			var _fm2 = data.get("fm2");
			this._fm2 = new Fm2Node(_fm2);
			var _pr = data.get("pr");
			this._pr = new PrNode(_pr);
			var _p1 = data.get("p1");
			this._p1 = new P1Node(_p1);
			var _p2 = data.get("p2");
			this._p2 = new P2Node(_p2);
		}
		
		
		public class FrNode {
			
			public FrNode(Value _fr) {
			}
		}
		
		public class Fm1Node {
			public String _name;
			
			public Fm1Node(Value _fm1) {
				if(!_fm1.get("name").isNull())
					this._name = _fm1.get("name").asString();
			}
		}
		
		public class Fm2Node {
			public String _name;
			
			public Fm2Node(Value _fm2) {
				if(!_fm2.get("name").isNull())
					this._name = _fm2.get("name").asString();
			}
		}
		
		public class PrNode {
			
			public PrNode(Value _pr) {
			}
		}
		
		public class P1Node {
			public String _name;
			public LocalDate _birthday;
			
			public P1Node(Value _p1) {
				if(!_p1.get("name").isNull())
					this._name = _p1.get("name").asString();
				if(!_p1.get("birthday").isNull())
					this._birthday = _p1.get("birthday").asLocalDate();
			}
		}
		
		public class P2Node {
			public String _name;
			public LocalDate _birthday;
			
			public P2Node(Value _p2) {
				if(!_p2.get("name").isNull())
					this._name = _p2.get("name").asString();
				if(!_p2.get("birthday").isNull())
					this._birthday = _p2.get("birthday").asLocalDate();
			}
		}
		
	}
	
	public class InConsistentTriple3CoData extends NeoData {
		public final FrNode _fr;
		public final Fr_corr_0_prRel _fr_corr_0_pr;
		public final Fm1Node _fm1;
		public final Fm1_corr_0_p1Rel _fm1_corr_0_p1;
		public final Fm2Node _fm2;
		public final Fm2_corr_0_p2Rel _fm2_corr_0_p2;
		public final PrNode _pr;
		public final P1Node _p1;
		public final P2Node _p2;
	
		public InConsistentTriple3CoData(Record data) {
			var _fr = data.get("fr");
			this._fr = new FrNode(_fr);
			var _fr_corr_0_pr = data.get("fr_corr_0_pr");
			this._fr_corr_0_pr = new Fr_corr_0_prRel(_fr_corr_0_pr);
			var _fm1 = data.get("fm1");
			this._fm1 = new Fm1Node(_fm1);
			var _fm1_corr_0_p1 = data.get("fm1_corr_0_p1");
			this._fm1_corr_0_p1 = new Fm1_corr_0_p1Rel(_fm1_corr_0_p1);
			var _fm2 = data.get("fm2");
			this._fm2 = new Fm2Node(_fm2);
			var _fm2_corr_0_p2 = data.get("fm2_corr_0_p2");
			this._fm2_corr_0_p2 = new Fm2_corr_0_p2Rel(_fm2_corr_0_p2);
			var _pr = data.get("pr");
			this._pr = new PrNode(_pr);
			var _p1 = data.get("p1");
			this._p1 = new P1Node(_p1);
			var _p2 = data.get("p2");
			this._p2 = new P2Node(_p2);
		}
		
	
		public class FrNode {
			
			public FrNode(Value _fr) {
			}
		}
		
		public class Fr_corr_0_prRel {
			public String __type_;
		
			public Fr_corr_0_prRel(Value _fr_corr_0_pr) {
				if(!_fr_corr_0_pr.get("_type_").isNull())
					this.__type_ = _fr_corr_0_pr.get("_type_").asString();
			}
		}
		public class Fm1Node {
			public String _name;
			
			public Fm1Node(Value _fm1) {
				if(!_fm1.get("name").isNull())
					this._name = _fm1.get("name").asString();
			}
		}
		
		public class Fm1_corr_0_p1Rel {
			public String __type_;
		
			public Fm1_corr_0_p1Rel(Value _fm1_corr_0_p1) {
				if(!_fm1_corr_0_p1.get("_type_").isNull())
					this.__type_ = _fm1_corr_0_p1.get("_type_").asString();
			}
		}
		public class Fm2Node {
			public String _name;
			
			public Fm2Node(Value _fm2) {
				if(!_fm2.get("name").isNull())
					this._name = _fm2.get("name").asString();
			}
		}
		
		public class Fm2_corr_0_p2Rel {
			public String __type_;
		
			public Fm2_corr_0_p2Rel(Value _fm2_corr_0_p2) {
				if(!_fm2_corr_0_p2.get("_type_").isNull())
					this.__type_ = _fm2_corr_0_p2.get("_type_").asString();
			}
		}
		public class PrNode {
			
			public PrNode(Value _pr) {
			}
		}
		
		public class P1Node {
			public String _name;
			public LocalDate _birthday;
			
			public P1Node(Value _p1) {
				if(!_p1.get("name").isNull())
					this._name = _p1.get("name").asString();
				if(!_p1.get("birthday").isNull())
					this._birthday = _p1.get("birthday").asLocalDate();
			}
		}
		
		public class P2Node {
			public String _name;
			public LocalDate _birthday;
			
			public P2Node(Value _p2) {
				if(!_p2.get("name").isNull())
					this._name = _p2.get("name").asString();
				if(!_p2.get("birthday").isNull())
					this._birthday = _p2.get("birthday").asLocalDate();
			}
		}
		
	}
	
	public class InConsistentTriple3Mask extends NeoMask {
		public InConsistentTriple3Mask setFr(Long value) {
			nodeMask.put("fr", value);
			return this;
		}
		public InConsistentTriple3Mask setFr_corr_0_pr_type_(String value) {
			attributeMask.put("fr_corr_0_pr._type_", value);
			return this;
		}
		public InConsistentTriple3Mask setFm1(Long value) {
			nodeMask.put("fm1", value);
			return this;
		}
		public InConsistentTriple3Mask setFm1Name(String value) {
			attributeMask.put("fm1.name", value);
			return this;
		}
		public InConsistentTriple3Mask setFm1_corr_0_p1_type_(String value) {
			attributeMask.put("fm1_corr_0_p1._type_", value);
			return this;
		}
		public InConsistentTriple3Mask setFm2(Long value) {
			nodeMask.put("fm2", value);
			return this;
		}
		public InConsistentTriple3Mask setFm2Name(String value) {
			attributeMask.put("fm2.name", value);
			return this;
		}
		public InConsistentTriple3Mask setFm2_corr_0_p2_type_(String value) {
			attributeMask.put("fm2_corr_0_p2._type_", value);
			return this;
		}
		public InConsistentTriple3Mask setPr(Long value) {
			nodeMask.put("pr", value);
			return this;
		}
		public InConsistentTriple3Mask setP1(Long value) {
			nodeMask.put("p1", value);
			return this;
		}
		public InConsistentTriple3Mask setP1Name(String value) {
			attributeMask.put("p1.name", value);
			return this;
		}
		public InConsistentTriple3Mask setP1Birthday(LocalDate value) {
			attributeMask.put("p1.birthday", value);
			return this;
		}
		public InConsistentTriple3Mask setP2(Long value) {
			nodeMask.put("p2", value);
			return this;
		}
		public InConsistentTriple3Mask setP2Name(String value) {
			attributeMask.put("p2.name", value);
			return this;
		}
		public InConsistentTriple3Mask setP2Birthday(LocalDate value) {
			attributeMask.put("p2.birthday", value);
			return this;
		}
	}
}
