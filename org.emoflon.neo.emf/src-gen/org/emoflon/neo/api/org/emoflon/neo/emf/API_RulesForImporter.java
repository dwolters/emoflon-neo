/** 
 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
 */
package org.emoflon.neo.api.org.emoflon.neo.emf;

import org.emoflon.neo.cypher.common.*;
import org.emoflon.neo.cypher.factories.*;
import org.emoflon.neo.cypher.models.*;
import org.emoflon.neo.cypher.patterns.*;
import org.emoflon.neo.cypher.rules.*;
import org.emoflon.neo.engine.api.patterns.*;
import org.emoflon.neo.engine.api.constraints.*;
import org.emoflon.neo.engine.api.rules.*;
import org.emoflon.neo.emsl.eMSL.*;
import org.emoflon.neo.emsl.util.*;
import org.neo4j.driver.Value;
import org.neo4j.driver.Record;
import org.eclipse.emf.common.util.URI;
import org.emoflon.neo.api.org.emoflon.neo.emf.API_Common;
import java.util.Collection;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;
import java.util.Optional;
import java.time.LocalDate;

@SuppressWarnings("unused")
public class API_RulesForImporter {
	private EMSL_Spec spec;
	private NeoCoreBuilder builder;

	/** Use this constructor for default values */
	public API_RulesForImporter(NeoCoreBuilder builder) {
		this(builder, API_Common.PLATFORM_RESOURCE_URI, API_Common.PLATFORM_PLUGIN_URI, API_Common.NEOCORE_URI_INSTALLED);
	}

	/** Use this constructor to configure values for loading EMSL files */
	public API_RulesForImporter(NeoCoreBuilder builder, String platformResourceURIRoot, String platformPluginURIRoot, String neocoreURI){
		this((EMSL_Spec) EMSLUtil.loadSpecification("platform:/resource/org.emoflon.neo.emf/src/RulesForImporter.msl", platformResourceURIRoot, platformPluginURIRoot, neocoreURI), builder);
	}

	public API_RulesForImporter(EMSL_Spec spec, NeoCoreBuilder builder) {
		this.spec = spec;
		this.builder = builder;
	}

	//:~> platform:/resource/org.emoflon.neo.emf/src/RulesForImporter.msl#//@entities.0
	public ImportMetamodelAccess getRule_ImportMetamodel() {
		return new ImportMetamodelAccess();
	}
	
	public class ImportMetamodelAccess extends NeoRuleCoAccess<ImportMetamodelData, ImportMetamodelCoData, ImportMetamodelMask> {
		public final String _neoCore = "neoCore";
		public final String _mm = "mm";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(0);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<ImportMetamodelData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new ImportMetamodelData(d));
		}
			
		@Override
		public Stream<ImportMetamodelCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new ImportMetamodelCoData(d));
		}
		
		@Override
		public ImportMetamodelMask mask() {
			return new ImportMetamodelMask();
		}
	}
	
	public class ImportMetamodelData extends NeoData {
		public ImportMetamodelData(Record data) {
		
		}
	}
	
	public class ImportMetamodelCoData extends NeoData {
		public ImportMetamodelCoData(Record data) {
		
		}
	}
	
	public class ImportMetamodelMask extends NeoMask {
	}
}
