/*
 * generated by Xtext 2.16.0
 */
package org.emoflon.neo.emsl.generator

import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.emoflon.neo.emsl.eMSL.EMSL_Spec
import org.emoflon.neo.emsl.eMSL.Entity
import org.emoflon.neo.emsl.eMSL.Model
import org.emoflon.neo.emsl.eMSL.Pattern
import org.emoflon.neo.emsl.util.EMSUtil
import org.eclipse.core.runtime.preferences.InstanceScope
import org.eclipse.ui.preferences.ScopedPreferenceStore

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class EMSLGenerator extends AbstractGenerator {

	String UI_PLUGIN_ID = "org.emoflon.neo.emsl.ui"

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var apiName = "API_" + resource.URI.trimFileExtension.segmentsList //
		.drop(2) //
		.map[s|s.toFirstUpper] //
		.join("_");
		var emslSpec = resource.contents.get(0) as EMSL_Spec

		fsa.generateFile("org/emoflon/neo/api/" + "API_Common.java", generateCommon())
		fsa.generateFile("org/emoflon/neo/api/" + apiName + ".java", generateAPIFor(apiName, emslSpec, resource.URI))
	}

	def generateCommon() {
		val store = new ScopedPreferenceStore(InstanceScope.INSTANCE, UI_PLUGIN_ID)

		val uri = store.getString(EMSUtil.P_URI);
		val userName = store.getString(EMSUtil.P_USER);
		val password = store.getString(EMSUtil.P_PASSWORD);

		'''
			/** 
			 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
			 */
			package org.emoflon.neo.api;			
			import org.emoflon.neo.neo4j.adapter.NeoCoreBuilder;
			
			public class API_Common {
			
				public static NeoCoreBuilder createBuilder() {
					return new NeoCoreBuilder("«uri»", "«userName»", "«password»");
				}
			}
		'''
	}

	def generateAPIFor(String apiName, EMSL_Spec spec, URI uri) {
		'''
			/** 
			 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
			 */
			package org.emoflon.neo.api;
			
			import org.emoflon.neo.neo4j.adapter.NeoCoreBuilder;
			import org.emoflon.neo.emsl.eMSL.EMSL_Spec;
			import org.emoflon.neo.emsl.eMSL.Model;
			import org.emoflon.neo.emsl.util.EMSUtil;
			import org.emoflon.neo.neo4j.adapter.NeoPattern;
			import org.emoflon.neo.emsl.eMSL.Pattern;
			
			@SuppressWarnings("unused")
			public class «apiName» {
				private EMSL_Spec spec;
				private NeoCoreBuilder builder;
			
				«apiName»(NeoCoreBuilder builder, String platformURIRoot){
					spec = (EMSL_Spec) EMSUtil.loadSpecification("«uri»", platformURIRoot);
					this.builder = builder;
				}
				
				«apiName»(NeoCoreBuilder builder){
					this(builder, "../");
				}
			
				«FOR e : spec.entities»
					«generateAccess(e, spec.entities.indexOf(e))»
				«ENDFOR»
			}
		'''
	}

	dispatch def generateAccess(Entity e, int index) {
		''''''
	}

	dispatch def generateAccess(Pattern p, int index) {
		'''
			public NeoPattern getPattern_«p.body.name.toFirstUpper»(){
				var p = (Pattern) spec.getEntities().get(«index»);
				return new NeoPattern(p, builder);
			}
		'''
	}

	dispatch def generateAccess(Model m, int index) {
		'''
			public Model getModel_«m.name.toFirstUpper»(){
				return (Model) spec.getEntities().get(«index»);
			}
		'''
	}
}
