/*
 * generated by Xtext 2.16.0
 */
package org.emoflon.neo.emsl.scoping

import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.resource.XtextResourceSet
import org.eclipse.xtext.scoping.Scopes
import org.emoflon.neo.emsl.eMSL.EMSLPackage
import org.emoflon.neo.emsl.eMSL.ImportStatement
import org.emoflon.neo.emsl.eMSL.Metamodel
import org.emoflon.neo.emsl.eMSL.NodeBlock

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class EMSLScopeProvider extends AbstractEMSLScopeProvider {
	override getScope(EObject context, EReference reference) {
		if (typeOfNodeBlock(context, reference)) {
			if (isInMetamodel(context as NodeBlock))
				return handleNodeBlockTypesInMetamodel(context as NodeBlock, reference)
			else
				return handleNodeBlockTypesInModel(context as NodeBlock, reference)
		}

		return super.getScope(context, reference)
	}

	// For a metamodel, candidates are all node blocks in NeoCore
	def handleNodeBlockTypesInMetamodel(NodeBlock context, EReference reference) {
		val neoCore = loadEMSL_Spec("platform:/plugin/org.emoflon.neo.neocore/model/NeoCore.msl")
		val allNodeBlocksInNeoCore = EcoreUtil2.getAllContentsOfType(neoCore, Metamodel).flatMap [ mm |
			EcoreUtil2.getAllContentsOfType(mm, NodeBlock)
		]
		return Scopes.scopeFor(allNodeBlocksInNeoCore)
	}

	// For all entities other than metamodels, candidates are all node blocks of all imported metamodels
	def handleNodeBlockTypesInModel(NodeBlock context, EReference reference) {
		val root = EcoreUtil2.getRootContainer(context)
		val importStatements = EcoreUtil2.getAllContentsOfType(root, ImportStatement)

		val allNodeBlocksInAllMetamodels = importStatements.map [ st |
			loadEMSL_Spec(st.value)
		].flatMap [ sp |
			EcoreUtil2.getAllContentsOfType(sp, Metamodel)
		].flatMap [ mm |
			EcoreUtil2.getAllContentsOfType(mm, NodeBlock)
		]

		return Scopes.scopeFor(allNodeBlocksInAllMetamodels)
	}

	def loadEMSL_Spec(String uri) {
		val rs = new XtextResourceSet()
		val resource = rs.createResource(URI.createURI(uri))
		resource.load(null)
		resource.contents.get(0)
	}

	def isInMetamodel(NodeBlock context) {
		context.eContainer instanceof Metamodel
	}

	def typeOfNodeBlock(EObject context, EReference reference) {
		context instanceof NodeBlock && reference == EMSLPackage.Literals.NODE_BLOCK__TYPE
	}
}
